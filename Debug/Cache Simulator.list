
Cache Simulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081ac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08008340  08008340  00009340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087dc  080087dc  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000008  080087dc  080087dc  000097dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087e4  080087e4  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087e4  080087e4  000097e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080087e8  080087e8  000097e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080087ec  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a78  200001d8  080089c4  0000a1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003c50  080089c4  0000ac50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b841  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cfd  00000000  00000000  00015a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  00017748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ab  00000000  00000000  00018158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026eab  00000000  00000000  00018903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c533  00000000  00000000  0003f7ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eaff7  00000000  00000000  0004bce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136cd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ce4  00000000  00000000  00136d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0013aa00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008324 	.word	0x08008324

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08008324 	.word	0x08008324

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <getCacheEntry>:
char stringBuffer[4096] = {'\0'};
char* bufferLoc = stringBuffer;
//Variable used to keep track of the number of cache hits.
uint32_t hits = 0;

void getCacheEntry(uint32_t address){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	6078      	str	r0, [r7, #4]
	uint32_t addressOffset = address % cacheBlockSize;
 8000ee0:	4b35      	ldr	r3, [pc, #212]	@ (8000fb8 <getCacheEntry+0xe0>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	fbb3 f1f2 	udiv	r1, r3, r2
 8000eea:	fb01 f202 	mul.w	r2, r1, r2
 8000eee:	1a9b      	subs	r3, r3, r2
 8000ef0:	617b      	str	r3, [r7, #20]
	uint32_t addressIndex = (address/cacheBlockSize) % (cacheMemAmount / cacheBlockSize);
 8000ef2:	4b31      	ldr	r3, [pc, #196]	@ (8000fb8 <getCacheEntry+0xe0>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efc:	4a2f      	ldr	r2, [pc, #188]	@ (8000fbc <getCacheEntry+0xe4>)
 8000efe:	6811      	ldr	r1, [r2, #0]
 8000f00:	4a2d      	ldr	r2, [pc, #180]	@ (8000fb8 <getCacheEntry+0xe0>)
 8000f02:	6812      	ldr	r2, [r2, #0]
 8000f04:	fbb1 f2f2 	udiv	r2, r1, r2
 8000f08:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f0c:	fb01 f202 	mul.w	r2, r1, r2
 8000f10:	1a9b      	subs	r3, r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
	uint32_t addressTag = address / cacheMemAmount;
 8000f14:	4b29      	ldr	r3, [pc, #164]	@ (8000fbc <getCacheEntry+0xe4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	60fb      	str	r3, [r7, #12]
	//Add address information to buffer for printing.
	bufferLoc += sprintf(bufferLoc, "0x%08" PRIX32 " - 0x%08" PRIX32 " - 0x%08" PRIX32 " - 0x%08" PRIX32 " - ", address, addressTag, addressIndex, addressOffset);
 8000f20:	4b27      	ldr	r3, [pc, #156]	@ (8000fc0 <getCacheEntry+0xe8>)
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	9301      	str	r3, [sp, #4]
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	4924      	ldr	r1, [pc, #144]	@ (8000fc4 <getCacheEntry+0xec>)
 8000f32:	f004 fa23 	bl	800537c <siprintf>
 8000f36:	4602      	mov	r2, r0
 8000f38:	4b21      	ldr	r3, [pc, #132]	@ (8000fc0 <getCacheEntry+0xe8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	4a20      	ldr	r2, [pc, #128]	@ (8000fc0 <getCacheEntry+0xe8>)
 8000f40:	6013      	str	r3, [r2, #0]
	//Cache hit.
	if(valid[addressIndex] && cache[addressIndex] == addressTag){
 8000f42:	4a21      	ldr	r2, [pc, #132]	@ (8000fc8 <getCacheEntry+0xf0>)
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4413      	add	r3, r2
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d018      	beq.n	8000f80 <getCacheEntry+0xa8>
 8000f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8000fcc <getCacheEntry+0xf4>)
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d111      	bne.n	8000f80 <getCacheEntry+0xa8>
		 bufferLoc += sprintf(bufferLoc, "hit\r\n");
 8000f5c:	4b18      	ldr	r3, [pc, #96]	@ (8000fc0 <getCacheEntry+0xe8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	491b      	ldr	r1, [pc, #108]	@ (8000fd0 <getCacheEntry+0xf8>)
 8000f62:	4618      	mov	r0, r3
 8000f64:	f004 fa0a 	bl	800537c <siprintf>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <getCacheEntry+0xe8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a13      	ldr	r2, [pc, #76]	@ (8000fc0 <getCacheEntry+0xe8>)
 8000f72:	6013      	str	r3, [r2, #0]
		 hits++;
 8000f74:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <getCacheEntry+0xfc>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	4a16      	ldr	r2, [pc, #88]	@ (8000fd4 <getCacheEntry+0xfc>)
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	e016      	b.n	8000fae <getCacheEntry+0xd6>
	}
	//Cache miss.
	else{
		//update cache to store value.
		cache[addressIndex] = addressTag;
 8000f80:	4912      	ldr	r1, [pc, #72]	@ (8000fcc <getCacheEntry+0xf4>)
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Update valid array.
		valid[addressIndex] = 1;
 8000f8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc8 <getCacheEntry+0xf0>)
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4413      	add	r3, r2
 8000f90:	2201      	movs	r2, #1
 8000f92:	701a      	strb	r2, [r3, #0]
		bufferLoc += sprintf(bufferLoc, "miss\r\n");
 8000f94:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <getCacheEntry+0xe8>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	490f      	ldr	r1, [pc, #60]	@ (8000fd8 <getCacheEntry+0x100>)
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f004 f9ee 	bl	800537c <siprintf>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <getCacheEntry+0xe8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a05      	ldr	r2, [pc, #20]	@ (8000fc0 <getCacheEntry+0xe8>)
 8000faa:	6013      	str	r3, [r2, #0]
	}
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20002ae0 	.word	0x20002ae0
 8000fbc:	20002adc 	.word	0x20002adc
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	08008340 	.word	0x08008340
 8000fc8:	200022d0 	.word	0x200022d0
 8000fcc:	200002d0 	.word	0x200002d0
 8000fd0:	0800836c 	.word	0x0800836c
 8000fd4:	20003af8 	.word	0x20003af8
 8000fd8:	08008374 	.word	0x08008374
 8000fdc:	00000000 	.word	0x00000000

08000fe0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe2:	b08d      	sub	sp, #52	@ 0x34
 8000fe4:	af02      	add	r7, sp, #8
 8000fe6:	60f8      	str	r0, [r7, #12]
	//Copy contents of UART_Buffer to safer buffer that is null terminated.
	uint32_t received_value = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
	char hex_str[13];
	memcpy(hex_str, UART_Buffer, 12);
 8000fec:	4a9c      	ldr	r2, [pc, #624]	@ (8001260 <HAL_UART_RxCpltCallback+0x280>)
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ff4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hex_str[12] = '\0';
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f887 3020 	strb.w	r3, [r7, #32]
	if(sscanf(hex_str, "0x%" SCNx32, &received_value) == 1){
 8000ffe:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4997      	ldr	r1, [pc, #604]	@ (8001264 <HAL_UART_RxCpltCallback+0x284>)
 8001008:	4618      	mov	r0, r3
 800100a:	f004 f9d7 	bl	80053bc <siscanf>
 800100e:	4603      	mov	r3, r0
 8001010:	2b01      	cmp	r3, #1
 8001012:	f040 8113 	bne.w	800123c <HAL_UART_RxCpltCallback+0x25c>
		//HAL_UART_Transmit(&huart2, "Entering Switch\r\n", sizeof("Entering Switch\r\n"), HAL_MAX_DELAY);
		switch(sequenceCounter){
 8001016:	4b94      	ldr	r3, [pc, #592]	@ (8001268 <HAL_UART_RxCpltCallback+0x288>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b04      	cmp	r3, #4
 800101c:	f200 8084 	bhi.w	8001128 <HAL_UART_RxCpltCallback+0x148>
 8001020:	a201      	add	r2, pc, #4	@ (adr r2, 8001028 <HAL_UART_RxCpltCallback+0x48>)
 8001022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001026:	bf00      	nop
 8001028:	0800103d 	.word	0x0800103d
 800102c:	0800104b 	.word	0x0800104b
 8001030:	08001053 	.word	0x08001053
 8001034:	0800105b 	.word	0x0800105b
 8001038:	08001063 	.word	0x08001063
			case 0:
				//First address contains the number of addresses.
				addressNum = received_value;
 800103c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103e:	4a8b      	ldr	r2, [pc, #556]	@ (800126c <HAL_UART_RxCpltCallback+0x28c>)
 8001040:	6013      	str	r3, [r2, #0]
				initialAddressNum = received_value;
 8001042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001044:	4a8a      	ldr	r2, [pc, #552]	@ (8001270 <HAL_UART_RxCpltCallback+0x290>)
 8001046:	6013      	str	r3, [r2, #0]
				break;
 8001048:	e0f8      	b.n	800123c <HAL_UART_RxCpltCallback+0x25c>
			case 1:
				//Second address contains the size of main memory.
				mainMemAmount = received_value;
 800104a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104c:	4a89      	ldr	r2, [pc, #548]	@ (8001274 <HAL_UART_RxCpltCallback+0x294>)
 800104e:	6013      	str	r3, [r2, #0]
				break;
 8001050:	e0f4      	b.n	800123c <HAL_UART_RxCpltCallback+0x25c>
			case 2:
				//Third address contains the cache memory size.
				cacheMemAmount = received_value;
 8001052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001054:	4a88      	ldr	r2, [pc, #544]	@ (8001278 <HAL_UART_RxCpltCallback+0x298>)
 8001056:	6013      	str	r3, [r2, #0]
				break;
 8001058:	e0f0      	b.n	800123c <HAL_UART_RxCpltCallback+0x25c>
			case 3:
				//Fourth address contains the cache block size.
				cacheBlockSize = received_value;
 800105a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105c:	4a87      	ldr	r2, [pc, #540]	@ (800127c <HAL_UART_RxCpltCallback+0x29c>)
 800105e:	6013      	str	r3, [r2, #0]
				break;
 8001060:	e0ec      	b.n	800123c <HAL_UART_RxCpltCallback+0x25c>
			case 4:
				//Fifth address contains teh word size.
				wordSize = received_value;
 8001062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001064:	4a86      	ldr	r2, [pc, #536]	@ (8001280 <HAL_UART_RxCpltCallback+0x2a0>)
 8001066:	6013      	str	r3, [r2, #0]
				//Calculate cache statistics.
				bitNum = (uint8_t)log2(mainMemAmount);
 8001068:	4b82      	ldr	r3, [pc, #520]	@ (8001274 <HAL_UART_RxCpltCallback+0x294>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fa49 	bl	8000504 <__aeabi_ui2d>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	ec43 2b10 	vmov	d0, r2, r3
 800107a:	f006 ff55 	bl	8007f28 <log>
 800107e:	ec51 0b10 	vmov	r0, r1, d0
 8001082:	a375      	add	r3, pc, #468	@ (adr r3, 8001258 <HAL_UART_RxCpltCallback+0x278>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f7ff fbe0 	bl	800084c <__aeabi_ddiv>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fd88 	bl	8000ba8 <__aeabi_d2uiz>
 8001098:	4603      	mov	r3, r0
 800109a:	b2db      	uxtb	r3, r3
 800109c:	461a      	mov	r2, r3
 800109e:	4b79      	ldr	r3, [pc, #484]	@ (8001284 <HAL_UART_RxCpltCallback+0x2a4>)
 80010a0:	601a      	str	r2, [r3, #0]
				offset = (uint8_t)log2(cacheBlockSize / wordSize);
 80010a2:	4b76      	ldr	r3, [pc, #472]	@ (800127c <HAL_UART_RxCpltCallback+0x29c>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	4b76      	ldr	r3, [pc, #472]	@ (8001280 <HAL_UART_RxCpltCallback+0x2a0>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fa28 	bl	8000504 <__aeabi_ui2d>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	ec43 2b10 	vmov	d0, r2, r3
 80010bc:	f006 ff34 	bl	8007f28 <log>
 80010c0:	ec51 0b10 	vmov	r0, r1, d0
 80010c4:	a364      	add	r3, pc, #400	@ (adr r3, 8001258 <HAL_UART_RxCpltCallback+0x278>)
 80010c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ca:	f7ff fbbf 	bl	800084c <__aeabi_ddiv>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	f7ff fd67 	bl	8000ba8 <__aeabi_d2uiz>
 80010da:	4603      	mov	r3, r0
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	461a      	mov	r2, r3
 80010e0:	4b69      	ldr	r3, [pc, #420]	@ (8001288 <HAL_UART_RxCpltCallback+0x2a8>)
 80010e2:	601a      	str	r2, [r3, #0]
				indexInfo = (uint8_t)log2(cacheMemAmount / cacheBlockSize);
 80010e4:	4b64      	ldr	r3, [pc, #400]	@ (8001278 <HAL_UART_RxCpltCallback+0x298>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b64      	ldr	r3, [pc, #400]	@ (800127c <HAL_UART_RxCpltCallback+0x29c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fa07 	bl	8000504 <__aeabi_ui2d>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	ec43 2b10 	vmov	d0, r2, r3
 80010fe:	f006 ff13 	bl	8007f28 <log>
 8001102:	ec51 0b10 	vmov	r0, r1, d0
 8001106:	a354      	add	r3, pc, #336	@ (adr r3, 8001258 <HAL_UART_RxCpltCallback+0x278>)
 8001108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110c:	f7ff fb9e 	bl	800084c <__aeabi_ddiv>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4610      	mov	r0, r2
 8001116:	4619      	mov	r1, r3
 8001118:	f7ff fd46 	bl	8000ba8 <__aeabi_d2uiz>
 800111c:	4603      	mov	r3, r0
 800111e:	b2db      	uxtb	r3, r3
 8001120:	461a      	mov	r2, r3
 8001122:	4b5a      	ldr	r3, [pc, #360]	@ (800128c <HAL_UART_RxCpltCallback+0x2ac>)
 8001124:	601a      	str	r2, [r3, #0]
				break;
 8001126:	e089      	b.n	800123c <HAL_UART_RxCpltCallback+0x25c>
			default:
				//After the fifth address, use the sent address to access cache.
				getCacheEntry(received_value);
 8001128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fed4 	bl	8000ed8 <getCacheEntry>
				addressNum--;
 8001130:	4b4e      	ldr	r3, [pc, #312]	@ (800126c <HAL_UART_RxCpltCallback+0x28c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3b01      	subs	r3, #1
 8001136:	4a4d      	ldr	r2, [pc, #308]	@ (800126c <HAL_UART_RxCpltCallback+0x28c>)
 8001138:	6013      	str	r3, [r2, #0]
				//If all addresses were sent, print cache statistics over UART.
				if(addressNum == 0){
 800113a:	4b4c      	ldr	r3, [pc, #304]	@ (800126c <HAL_UART_RxCpltCallback+0x28c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d17b      	bne.n	800123a <HAL_UART_RxCpltCallback+0x25a>
					bufferLoc += sprintf(bufferLoc, "Memory address lines = %" PRIu32 "\r\n", bitNum);
 8001142:	4b53      	ldr	r3, [pc, #332]	@ (8001290 <HAL_UART_RxCpltCallback+0x2b0>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a4f      	ldr	r2, [pc, #316]	@ (8001284 <HAL_UART_RxCpltCallback+0x2a4>)
 8001148:	6812      	ldr	r2, [r2, #0]
 800114a:	4952      	ldr	r1, [pc, #328]	@ (8001294 <HAL_UART_RxCpltCallback+0x2b4>)
 800114c:	4618      	mov	r0, r3
 800114e:	f004 f915 	bl	800537c <siprintf>
 8001152:	4602      	mov	r2, r0
 8001154:	4b4e      	ldr	r3, [pc, #312]	@ (8001290 <HAL_UART_RxCpltCallback+0x2b0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4413      	add	r3, r2
 800115a:	4a4d      	ldr	r2, [pc, #308]	@ (8001290 <HAL_UART_RxCpltCallback+0x2b0>)
 800115c:	6013      	str	r3, [r2, #0]
					bufferLoc += sprintf(bufferLoc, "Tag bits = %" PRIu32 "\r\n", bitNum - offset - indexInfo);
 800115e:	4b4c      	ldr	r3, [pc, #304]	@ (8001290 <HAL_UART_RxCpltCallback+0x2b0>)
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	4b48      	ldr	r3, [pc, #288]	@ (8001284 <HAL_UART_RxCpltCallback+0x2a4>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4b48      	ldr	r3, [pc, #288]	@ (8001288 <HAL_UART_RxCpltCallback+0x2a8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	1ad2      	subs	r2, r2, r3
 800116c:	4b47      	ldr	r3, [pc, #284]	@ (800128c <HAL_UART_RxCpltCallback+0x2ac>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	461a      	mov	r2, r3
 8001174:	4948      	ldr	r1, [pc, #288]	@ (8001298 <HAL_UART_RxCpltCallback+0x2b8>)
 8001176:	f004 f901 	bl	800537c <siprintf>
 800117a:	4602      	mov	r2, r0
 800117c:	4b44      	ldr	r3, [pc, #272]	@ (8001290 <HAL_UART_RxCpltCallback+0x2b0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4413      	add	r3, r2
 8001182:	4a43      	ldr	r2, [pc, #268]	@ (8001290 <HAL_UART_RxCpltCallback+0x2b0>)
 8001184:	6013      	str	r3, [r2, #0]
					bufferLoc += sprintf(bufferLoc, "Index bits = %" PRIu32 "\r\n", indexInfo);
 8001186:	4b42      	ldr	r3, [pc, #264]	@ (8001290 <HAL_UART_RxCpltCallback+0x2b0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a40      	ldr	r2, [pc, #256]	@ (800128c <HAL_UART_RxCpltCallback+0x2ac>)
 800118c:	6812      	ldr	r2, [r2, #0]
 800118e:	4943      	ldr	r1, [pc, #268]	@ (800129c <HAL_UART_RxCpltCallback+0x2bc>)
 8001190:	4618      	mov	r0, r3
 8001192:	f004 f8f3 	bl	800537c <siprintf>
 8001196:	4602      	mov	r2, r0
 8001198:	4b3d      	ldr	r3, [pc, #244]	@ (8001290 <HAL_UART_RxCpltCallback+0x2b0>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4413      	add	r3, r2
 800119e:	4a3c      	ldr	r2, [pc, #240]	@ (8001290 <HAL_UART_RxCpltCallback+0x2b0>)
 80011a0:	6013      	str	r3, [r2, #0]
					bufferLoc += sprintf(bufferLoc, "Offset bits = %" PRIu32 "\r\n", offset);
 80011a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001290 <HAL_UART_RxCpltCallback+0x2b0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a38      	ldr	r2, [pc, #224]	@ (8001288 <HAL_UART_RxCpltCallback+0x2a8>)
 80011a8:	6812      	ldr	r2, [r2, #0]
 80011aa:	493d      	ldr	r1, [pc, #244]	@ (80012a0 <HAL_UART_RxCpltCallback+0x2c0>)
 80011ac:	4618      	mov	r0, r3
 80011ae:	f004 f8e5 	bl	800537c <siprintf>
 80011b2:	4602      	mov	r2, r0
 80011b4:	4b36      	ldr	r3, [pc, #216]	@ (8001290 <HAL_UART_RxCpltCallback+0x2b0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4413      	add	r3, r2
 80011ba:	4a35      	ldr	r2, [pc, #212]	@ (8001290 <HAL_UART_RxCpltCallback+0x2b0>)
 80011bc:	6013      	str	r3, [r2, #0]
					bufferLoc += sprintf(bufferLoc, "Hit rate = %" PRIu32 "/%" PRIu32 "= %f%%\r\n", hits, initialAddressNum, (double)hits/initialAddressNum * 100);
 80011be:	4b34      	ldr	r3, [pc, #208]	@ (8001290 <HAL_UART_RxCpltCallback+0x2b0>)
 80011c0:	681e      	ldr	r6, [r3, #0]
 80011c2:	4b38      	ldr	r3, [pc, #224]	@ (80012a4 <HAL_UART_RxCpltCallback+0x2c4>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	4b29      	ldr	r3, [pc, #164]	@ (8001270 <HAL_UART_RxCpltCallback+0x290>)
 80011ca:	6819      	ldr	r1, [r3, #0]
 80011cc:	6079      	str	r1, [r7, #4]
 80011ce:	4b35      	ldr	r3, [pc, #212]	@ (80012a4 <HAL_UART_RxCpltCallback+0x2c4>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f996 	bl	8000504 <__aeabi_ui2d>
 80011d8:	4604      	mov	r4, r0
 80011da:	460d      	mov	r5, r1
 80011dc:	4b24      	ldr	r3, [pc, #144]	@ (8001270 <HAL_UART_RxCpltCallback+0x290>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f98f 	bl	8000504 <__aeabi_ui2d>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4620      	mov	r0, r4
 80011ec:	4629      	mov	r1, r5
 80011ee:	f7ff fb2d 	bl	800084c <__aeabi_ddiv>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <HAL_UART_RxCpltCallback+0x2c8>)
 8001200:	f7ff f9fa 	bl	80005f8 <__aeabi_dmul>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	e9cd 2300 	strd	r2, r3, [sp]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	4926      	ldr	r1, [pc, #152]	@ (80012ac <HAL_UART_RxCpltCallback+0x2cc>)
 8001212:	4630      	mov	r0, r6
 8001214:	f004 f8b2 	bl	800537c <siprintf>
 8001218:	4602      	mov	r2, r0
 800121a:	4b1d      	ldr	r3, [pc, #116]	@ (8001290 <HAL_UART_RxCpltCallback+0x2b0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a1b      	ldr	r2, [pc, #108]	@ (8001290 <HAL_UART_RxCpltCallback+0x2b0>)
 8001222:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)stringBuffer, bufferLoc-stringBuffer, HAL_MAX_DELAY);
 8001224:	4b1a      	ldr	r3, [pc, #104]	@ (8001290 <HAL_UART_RxCpltCallback+0x2b0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a21      	ldr	r2, [pc, #132]	@ (80012b0 <HAL_UART_RxCpltCallback+0x2d0>)
 800122a:	1a9b      	subs	r3, r3, r2
 800122c:	b29a      	uxth	r2, r3
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	491f      	ldr	r1, [pc, #124]	@ (80012b0 <HAL_UART_RxCpltCallback+0x2d0>)
 8001234:	481f      	ldr	r0, [pc, #124]	@ (80012b4 <HAL_UART_RxCpltCallback+0x2d4>)
 8001236:	f002 fc03 	bl	8003a40 <HAL_UART_Transmit>
				}
				break;
 800123a:	bf00      	nop
		}
	}
	sequenceCounter++;
 800123c:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <HAL_UART_RxCpltCallback+0x288>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	4a09      	ldr	r2, [pc, #36]	@ (8001268 <HAL_UART_RxCpltCallback+0x288>)
 8001244:	6013      	str	r3, [r2, #0]
	//Tell DMA to get next value
	HAL_UART_Receive_DMA(&huart2, UART_Buffer, 12);
 8001246:	220c      	movs	r2, #12
 8001248:	4905      	ldr	r1, [pc, #20]	@ (8001260 <HAL_UART_RxCpltCallback+0x280>)
 800124a:	481a      	ldr	r0, [pc, #104]	@ (80012b4 <HAL_UART_RxCpltCallback+0x2d4>)
 800124c:	f002 fc82 	bl	8003b54 <HAL_UART_Receive_DMA>
}
 8001250:	bf00      	nop
 8001252:	372c      	adds	r7, #44	@ 0x2c
 8001254:	46bd      	mov	sp, r7
 8001256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001258:	fefa39ef 	.word	0xfefa39ef
 800125c:	3fe62e42 	.word	0x3fe62e42
 8001260:	200002c4 	.word	0x200002c4
 8001264:	0800837c 	.word	0x0800837c
 8001268:	20002ad0 	.word	0x20002ad0
 800126c:	20002ae8 	.word	0x20002ae8
 8001270:	20002ad4 	.word	0x20002ad4
 8001274:	20002ad8 	.word	0x20002ad8
 8001278:	20002adc 	.word	0x20002adc
 800127c:	20002ae0 	.word	0x20002ae0
 8001280:	20002ae4 	.word	0x20002ae4
 8001284:	20002aec 	.word	0x20002aec
 8001288:	20002af0 	.word	0x20002af0
 800128c:	20002af4 	.word	0x20002af4
 8001290:	20000000 	.word	0x20000000
 8001294:	08008384 	.word	0x08008384
 8001298:	080083a4 	.word	0x080083a4
 800129c:	080083b8 	.word	0x080083b8
 80012a0:	080083cc 	.word	0x080083cc
 80012a4:	20003af8 	.word	0x20003af8
 80012a8:	40590000 	.word	0x40590000
 80012ac:	080083e0 	.word	0x080083e0
 80012b0:	20002af8 	.word	0x20002af8
 80012b4:	200001f4 	.word	0x200001f4

080012b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012bc:	f000 fb0a 	bl	80018d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c0:	f000 f812 	bl	80012e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c4:	f000 f8b0 	bl	8001428 <MX_GPIO_Init>
  MX_DMA_Init();
 80012c8:	f000 f890 	bl	80013ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 80012cc:	f000 f85e 	bl	800138c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //Initiate DMA transfer 12 bytes at a time.
  HAL_UART_Receive_DMA(&huart2, UART_Buffer, 12);
 80012d0:	220c      	movs	r2, #12
 80012d2:	4903      	ldr	r1, [pc, #12]	@ (80012e0 <main+0x28>)
 80012d4:	4803      	ldr	r0, [pc, #12]	@ (80012e4 <main+0x2c>)
 80012d6:	f002 fc3d 	bl	8003b54 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
 80012da:	bf00      	nop
 80012dc:	e7fd      	b.n	80012da <main+0x22>
 80012de:	bf00      	nop
 80012e0:	200002c4 	.word	0x200002c4
 80012e4:	200001f4 	.word	0x200001f4

080012e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b096      	sub	sp, #88	@ 0x58
 80012ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	2244      	movs	r2, #68	@ 0x44
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f004 f8cf 	bl	800549a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012fc:	463b      	mov	r3, r7
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800130a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800130e:	f001 f837 	bl	8002380 <HAL_PWREx_ControlVoltageScaling>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001318:	f000 f8ec 	bl	80014f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800131c:	2302      	movs	r3, #2
 800131e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001320:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001324:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001326:	2310      	movs	r3, #16
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132a:	2302      	movs	r3, #2
 800132c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800132e:	2302      	movs	r3, #2
 8001330:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001332:	2301      	movs	r3, #1
 8001334:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001336:	230a      	movs	r3, #10
 8001338:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800133a:	2307      	movs	r3, #7
 800133c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800133e:	2302      	movs	r3, #2
 8001340:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001342:	2302      	movs	r3, #2
 8001344:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4618      	mov	r0, r3
 800134c:	f001 f86e 	bl	800242c <HAL_RCC_OscConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001356:	f000 f8cd 	bl	80014f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800135a:	230f      	movs	r3, #15
 800135c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800135e:	2303      	movs	r3, #3
 8001360:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800136e:	463b      	mov	r3, r7
 8001370:	2104      	movs	r1, #4
 8001372:	4618      	mov	r0, r3
 8001374:	f001 fc36 	bl	8002be4 <HAL_RCC_ClockConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800137e:	f000 f8b9 	bl	80014f4 <Error_Handler>
  }
}
 8001382:	bf00      	nop
 8001384:	3758      	adds	r7, #88	@ 0x58
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001390:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 8001392:	4a15      	ldr	r2, [pc, #84]	@ (80013e8 <MX_USART2_UART_Init+0x5c>)
 8001394:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001396:	4b13      	ldr	r3, [pc, #76]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 8001398:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800139c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800139e:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013b2:	220c      	movs	r2, #12
 80013b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013bc:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c2:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <MX_USART2_UART_Init+0x58>)
 80013d0:	f002 fae8 	bl	80039a4 <HAL_UART_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013da:	f000 f88b 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200001f4 	.word	0x200001f4
 80013e8:	40004400 	.word	0x40004400

080013ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <MX_DMA_Init+0x38>)
 80013f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001424 <MX_DMA_Init+0x38>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6493      	str	r3, [r2, #72]	@ 0x48
 80013fe:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <MX_DMA_Init+0x38>)
 8001400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	2010      	movs	r0, #16
 8001410:	f000 fbb7 	bl	8001b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001414:	2010      	movs	r0, #16
 8001416:	f000 fbd0 	bl	8001bba <HAL_NVIC_EnableIRQ>

}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000

08001428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	@ 0x28
 800142c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	4b2b      	ldr	r3, [pc, #172]	@ (80014ec <MX_GPIO_Init+0xc4>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001442:	4a2a      	ldr	r2, [pc, #168]	@ (80014ec <MX_GPIO_Init+0xc4>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800144a:	4b28      	ldr	r3, [pc, #160]	@ (80014ec <MX_GPIO_Init+0xc4>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001456:	4b25      	ldr	r3, [pc, #148]	@ (80014ec <MX_GPIO_Init+0xc4>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	4a24      	ldr	r2, [pc, #144]	@ (80014ec <MX_GPIO_Init+0xc4>)
 800145c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001462:	4b22      	ldr	r3, [pc, #136]	@ (80014ec <MX_GPIO_Init+0xc4>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	4b1f      	ldr	r3, [pc, #124]	@ (80014ec <MX_GPIO_Init+0xc4>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001472:	4a1e      	ldr	r2, [pc, #120]	@ (80014ec <MX_GPIO_Init+0xc4>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147a:	4b1c      	ldr	r3, [pc, #112]	@ (80014ec <MX_GPIO_Init+0xc4>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	4b19      	ldr	r3, [pc, #100]	@ (80014ec <MX_GPIO_Init+0xc4>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148a:	4a18      	ldr	r2, [pc, #96]	@ (80014ec <MX_GPIO_Init+0xc4>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001492:	4b16      	ldr	r3, [pc, #88]	@ (80014ec <MX_GPIO_Init+0xc4>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	2120      	movs	r1, #32
 80014a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a6:	f000 ff45 	bl	8002334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014b0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	480b      	ldr	r0, [pc, #44]	@ (80014f0 <MX_GPIO_Init+0xc8>)
 80014c2:	f000 fd8d 	bl	8001fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014c6:	2320      	movs	r3, #32
 80014c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014e0:	f000 fd7e 	bl	8001fe0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014e4:	bf00      	nop
 80014e6:	3728      	adds	r7, #40	@ 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40021000 	.word	0x40021000
 80014f0:	48000800 	.word	0x48000800

080014f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f8:	b672      	cpsid	i
}
 80014fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <Error_Handler+0x8>

08001500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001506:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <HAL_MspInit+0x44>)
 8001508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800150a:	4a0e      	ldr	r2, [pc, #56]	@ (8001544 <HAL_MspInit+0x44>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6613      	str	r3, [r2, #96]	@ 0x60
 8001512:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <HAL_MspInit+0x44>)
 8001514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <HAL_MspInit+0x44>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001522:	4a08      	ldr	r2, [pc, #32]	@ (8001544 <HAL_MspInit+0x44>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001528:	6593      	str	r3, [r2, #88]	@ 0x58
 800152a:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <HAL_MspInit+0x44>)
 800152c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000

08001548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b0ac      	sub	sp, #176	@ 0xb0
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2288      	movs	r2, #136	@ 0x88
 8001566:	2100      	movs	r1, #0
 8001568:	4618      	mov	r0, r3
 800156a:	f003 ff96 	bl	800549a <memset>
  if(huart->Instance==USART2)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a36      	ldr	r2, [pc, #216]	@ (800164c <HAL_UART_MspInit+0x104>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d165      	bne.n	8001644 <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001578:	2302      	movs	r3, #2
 800157a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800157c:	2300      	movs	r3, #0
 800157e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4618      	mov	r0, r3
 8001586:	f001 fd51 	bl	800302c <HAL_RCCEx_PeriphCLKConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001590:	f7ff ffb0 	bl	80014f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001594:	4b2e      	ldr	r3, [pc, #184]	@ (8001650 <HAL_UART_MspInit+0x108>)
 8001596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001598:	4a2d      	ldr	r2, [pc, #180]	@ (8001650 <HAL_UART_MspInit+0x108>)
 800159a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800159e:	6593      	str	r3, [r2, #88]	@ 0x58
 80015a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001650 <HAL_UART_MspInit+0x108>)
 80015a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ac:	4b28      	ldr	r3, [pc, #160]	@ (8001650 <HAL_UART_MspInit+0x108>)
 80015ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b0:	4a27      	ldr	r2, [pc, #156]	@ (8001650 <HAL_UART_MspInit+0x108>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015b8:	4b25      	ldr	r3, [pc, #148]	@ (8001650 <HAL_UART_MspInit+0x108>)
 80015ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015c4:	230c      	movs	r3, #12
 80015c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015dc:	2307      	movs	r3, #7
 80015de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015e6:	4619      	mov	r1, r3
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ec:	f000 fcf8 	bl	8001fe0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80015f0:	4b18      	ldr	r3, [pc, #96]	@ (8001654 <HAL_UART_MspInit+0x10c>)
 80015f2:	4a19      	ldr	r2, [pc, #100]	@ (8001658 <HAL_UART_MspInit+0x110>)
 80015f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80015f6:	4b17      	ldr	r3, [pc, #92]	@ (8001654 <HAL_UART_MspInit+0x10c>)
 80015f8:	2202      	movs	r2, #2
 80015fa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015fc:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <HAL_UART_MspInit+0x10c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001602:	4b14      	ldr	r3, [pc, #80]	@ (8001654 <HAL_UART_MspInit+0x10c>)
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001608:	4b12      	ldr	r3, [pc, #72]	@ (8001654 <HAL_UART_MspInit+0x10c>)
 800160a:	2280      	movs	r2, #128	@ 0x80
 800160c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800160e:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <HAL_UART_MspInit+0x10c>)
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001614:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <HAL_UART_MspInit+0x10c>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800161a:	4b0e      	ldr	r3, [pc, #56]	@ (8001654 <HAL_UART_MspInit+0x10c>)
 800161c:	2220      	movs	r2, #32
 800161e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001620:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <HAL_UART_MspInit+0x10c>)
 8001622:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001626:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001628:	480a      	ldr	r0, [pc, #40]	@ (8001654 <HAL_UART_MspInit+0x10c>)
 800162a:	f000 fae1 	bl	8001bf0 <HAL_DMA_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8001634:	f7ff ff5e 	bl	80014f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a06      	ldr	r2, [pc, #24]	@ (8001654 <HAL_UART_MspInit+0x10c>)
 800163c:	675a      	str	r2, [r3, #116]	@ 0x74
 800163e:	4a05      	ldr	r2, [pc, #20]	@ (8001654 <HAL_UART_MspInit+0x10c>)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001644:	bf00      	nop
 8001646:	37b0      	adds	r7, #176	@ 0xb0
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40004400 	.word	0x40004400
 8001650:	40021000 	.word	0x40021000
 8001654:	2000027c 	.word	0x2000027c
 8001658:	4002006c 	.word	0x4002006c

0800165c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <NMI_Handler+0x4>

08001664 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <HardFault_Handler+0x4>

0800166c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <MemManage_Handler+0x4>

08001674 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <BusFault_Handler+0x4>

0800167c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <UsageFault_Handler+0x4>

08001684 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b2:	f000 f96b 	bl	800198c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80016c0:	4802      	ldr	r0, [pc, #8]	@ (80016cc <DMA1_Channel6_IRQHandler+0x10>)
 80016c2:	f000 fbad 	bl	8001e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	2000027c 	.word	0x2000027c

080016d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return 1;
 80016d4:	2301      	movs	r3, #1
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <_kill>:

int _kill(int pid, int sig)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016ea:	f003 ff29 	bl	8005540 <__errno>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2216      	movs	r2, #22
 80016f2:	601a      	str	r2, [r3, #0]
  return -1;
 80016f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <_exit>:

void _exit (int status)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001708:	f04f 31ff 	mov.w	r1, #4294967295
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff ffe7 	bl	80016e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001712:	bf00      	nop
 8001714:	e7fd      	b.n	8001712 <_exit+0x12>

08001716 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	e00a      	b.n	800173e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001728:	f3af 8000 	nop.w
 800172c:	4601      	mov	r1, r0
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	1c5a      	adds	r2, r3, #1
 8001732:	60ba      	str	r2, [r7, #8]
 8001734:	b2ca      	uxtb	r2, r1
 8001736:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	3301      	adds	r3, #1
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	429a      	cmp	r2, r3
 8001744:	dbf0      	blt.n	8001728 <_read+0x12>
  }

  return len;
 8001746:	687b      	ldr	r3, [r7, #4]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	e009      	b.n	8001776 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	1c5a      	adds	r2, r3, #1
 8001766:	60ba      	str	r2, [r7, #8]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	3301      	adds	r3, #1
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	429a      	cmp	r2, r3
 800177c:	dbf1      	blt.n	8001762 <_write+0x12>
  }
  return len;
 800177e:	687b      	ldr	r3, [r7, #4]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_close>:

int _close(int file)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001790:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017b0:	605a      	str	r2, [r3, #4]
  return 0;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <_isatty>:

int _isatty(int file)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017c8:	2301      	movs	r3, #1
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b085      	sub	sp, #20
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f8:	4a14      	ldr	r2, [pc, #80]	@ (800184c <_sbrk+0x5c>)
 80017fa:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <_sbrk+0x60>)
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001804:	4b13      	ldr	r3, [pc, #76]	@ (8001854 <_sbrk+0x64>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d102      	bne.n	8001812 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800180c:	4b11      	ldr	r3, [pc, #68]	@ (8001854 <_sbrk+0x64>)
 800180e:	4a12      	ldr	r2, [pc, #72]	@ (8001858 <_sbrk+0x68>)
 8001810:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001812:	4b10      	ldr	r3, [pc, #64]	@ (8001854 <_sbrk+0x64>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	429a      	cmp	r2, r3
 800181e:	d207      	bcs.n	8001830 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001820:	f003 fe8e 	bl	8005540 <__errno>
 8001824:	4603      	mov	r3, r0
 8001826:	220c      	movs	r2, #12
 8001828:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800182a:	f04f 33ff 	mov.w	r3, #4294967295
 800182e:	e009      	b.n	8001844 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001830:	4b08      	ldr	r3, [pc, #32]	@ (8001854 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001836:	4b07      	ldr	r3, [pc, #28]	@ (8001854 <_sbrk+0x64>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	4a05      	ldr	r2, [pc, #20]	@ (8001854 <_sbrk+0x64>)
 8001840:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001842:	68fb      	ldr	r3, [r7, #12]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20018000 	.word	0x20018000
 8001850:	00000400 	.word	0x00000400
 8001854:	20003afc 	.word	0x20003afc
 8001858:	20003c50 	.word	0x20003c50

0800185c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001860:	4b06      	ldr	r3, [pc, #24]	@ (800187c <SystemInit+0x20>)
 8001862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001866:	4a05      	ldr	r2, [pc, #20]	@ (800187c <SystemInit+0x20>)
 8001868:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800186c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001880:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001884:	f7ff ffea 	bl	800185c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001888:	480c      	ldr	r0, [pc, #48]	@ (80018bc <LoopForever+0x6>)
  ldr r1, =_edata
 800188a:	490d      	ldr	r1, [pc, #52]	@ (80018c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800188c:	4a0d      	ldr	r2, [pc, #52]	@ (80018c4 <LoopForever+0xe>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001890:	e002      	b.n	8001898 <LoopCopyDataInit>

08001892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001896:	3304      	adds	r3, #4

08001898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800189c:	d3f9      	bcc.n	8001892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189e:	4a0a      	ldr	r2, [pc, #40]	@ (80018c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018a0:	4c0a      	ldr	r4, [pc, #40]	@ (80018cc <LoopForever+0x16>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a4:	e001      	b.n	80018aa <LoopFillZerobss>

080018a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a8:	3204      	adds	r2, #4

080018aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ac:	d3fb      	bcc.n	80018a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ae:	f003 fe4d 	bl	800554c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018b2:	f7ff fd01 	bl	80012b8 <main>

080018b6 <LoopForever>:

LoopForever:
    b LoopForever
 80018b6:	e7fe      	b.n	80018b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80018c4:	080087ec 	.word	0x080087ec
  ldr r2, =_sbss
 80018c8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80018cc:	20003c50 	.word	0x20003c50

080018d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018d0:	e7fe      	b.n	80018d0 <ADC1_2_IRQHandler>
	...

080018d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018de:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <HAL_Init+0x3c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001910 <HAL_Init+0x3c>)
 80018e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ea:	2003      	movs	r0, #3
 80018ec:	f000 f93e 	bl	8001b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018f0:	2000      	movs	r0, #0
 80018f2:	f000 f80f 	bl	8001914 <HAL_InitTick>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d002      	beq.n	8001902 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	71fb      	strb	r3, [r7, #7]
 8001900:	e001      	b.n	8001906 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001902:	f7ff fdfd 	bl	8001500 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001906:	79fb      	ldrb	r3, [r7, #7]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40022000 	.word	0x40022000

08001914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001920:	4b17      	ldr	r3, [pc, #92]	@ (8001980 <HAL_InitTick+0x6c>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d023      	beq.n	8001970 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001928:	4b16      	ldr	r3, [pc, #88]	@ (8001984 <HAL_InitTick+0x70>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b14      	ldr	r3, [pc, #80]	@ (8001980 <HAL_InitTick+0x6c>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4619      	mov	r1, r3
 8001932:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001936:	fbb3 f3f1 	udiv	r3, r3, r1
 800193a:	fbb2 f3f3 	udiv	r3, r2, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f000 f949 	bl	8001bd6 <HAL_SYSTICK_Config>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10f      	bne.n	800196a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b0f      	cmp	r3, #15
 800194e:	d809      	bhi.n	8001964 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001950:	2200      	movs	r2, #0
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	f000 f913 	bl	8001b82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800195c:	4a0a      	ldr	r2, [pc, #40]	@ (8001988 <HAL_InitTick+0x74>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e007      	b.n	8001974 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	73fb      	strb	r3, [r7, #15]
 8001968:	e004      	b.n	8001974 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	73fb      	strb	r3, [r7, #15]
 800196e:	e001      	b.n	8001974 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001974:	7bfb      	ldrb	r3, [r7, #15]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	2000000c 	.word	0x2000000c
 8001984:	20000004 	.word	0x20000004
 8001988:	20000008 	.word	0x20000008

0800198c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001990:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_IncTick+0x20>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <HAL_IncTick+0x24>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4413      	add	r3, r2
 800199c:	4a04      	ldr	r2, [pc, #16]	@ (80019b0 <HAL_IncTick+0x24>)
 800199e:	6013      	str	r3, [r2, #0]
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	2000000c 	.word	0x2000000c
 80019b0:	20003b00 	.word	0x20003b00

080019b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return uwTick;
 80019b8:	4b03      	ldr	r3, [pc, #12]	@ (80019c8 <HAL_GetTick+0x14>)
 80019ba:	681b      	ldr	r3, [r3, #0]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20003b00 	.word	0x20003b00

080019cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019e8:	4013      	ands	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fe:	4a04      	ldr	r2, [pc, #16]	@ (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	60d3      	str	r3, [r2, #12]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a18:	4b04      	ldr	r3, [pc, #16]	@ (8001a2c <__NVIC_GetPriorityGrouping+0x18>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	f003 0307 	and.w	r3, r3, #7
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	db0b      	blt.n	8001a5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	f003 021f 	and.w	r2, r3, #31
 8001a48:	4907      	ldr	r1, [pc, #28]	@ (8001a68 <__NVIC_EnableIRQ+0x38>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	2001      	movs	r0, #1
 8001a52:	fa00 f202 	lsl.w	r2, r0, r2
 8001a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000e100 	.word	0xe000e100

08001a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	db0a      	blt.n	8001a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	490c      	ldr	r1, [pc, #48]	@ (8001ab8 <__NVIC_SetPriority+0x4c>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	0112      	lsls	r2, r2, #4
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	440b      	add	r3, r1
 8001a90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a94:	e00a      	b.n	8001aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4908      	ldr	r1, [pc, #32]	@ (8001abc <__NVIC_SetPriority+0x50>)
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	3b04      	subs	r3, #4
 8001aa4:	0112      	lsls	r2, r2, #4
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	761a      	strb	r2, [r3, #24]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000e100 	.word	0xe000e100
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	@ 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f1c3 0307 	rsb	r3, r3, #7
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	bf28      	it	cs
 8001ade:	2304      	movcs	r3, #4
 8001ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d902      	bls.n	8001af0 <NVIC_EncodePriority+0x30>
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3b03      	subs	r3, #3
 8001aee:	e000      	b.n	8001af2 <NVIC_EncodePriority+0x32>
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	f04f 32ff 	mov.w	r2, #4294967295
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43da      	mvns	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	401a      	ands	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43d9      	mvns	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	4313      	orrs	r3, r2
         );
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3724      	adds	r7, #36	@ 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b38:	d301      	bcc.n	8001b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e00f      	b.n	8001b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b68 <SysTick_Config+0x40>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b46:	210f      	movs	r1, #15
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4c:	f7ff ff8e 	bl	8001a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b50:	4b05      	ldr	r3, [pc, #20]	@ (8001b68 <SysTick_Config+0x40>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b56:	4b04      	ldr	r3, [pc, #16]	@ (8001b68 <SysTick_Config+0x40>)
 8001b58:	2207      	movs	r2, #7
 8001b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	e000e010 	.word	0xe000e010

08001b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ff29 	bl	80019cc <__NVIC_SetPriorityGrouping>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
 8001b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b94:	f7ff ff3e 	bl	8001a14 <__NVIC_GetPriorityGrouping>
 8001b98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	6978      	ldr	r0, [r7, #20]
 8001ba0:	f7ff ff8e 	bl	8001ac0 <NVIC_EncodePriority>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff5d 	bl	8001a6c <__NVIC_SetPriority>
}
 8001bb2:	bf00      	nop
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff31 	bl	8001a30 <__NVIC_EnableIRQ>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ffa2 	bl	8001b28 <SysTick_Config>
 8001be4:	4603      	mov	r3, r0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e098      	b.n	8001d34 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	4b4d      	ldr	r3, [pc, #308]	@ (8001d40 <HAL_DMA_Init+0x150>)
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d80f      	bhi.n	8001c2e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	4b4b      	ldr	r3, [pc, #300]	@ (8001d44 <HAL_DMA_Init+0x154>)
 8001c16:	4413      	add	r3, r2
 8001c18:	4a4b      	ldr	r2, [pc, #300]	@ (8001d48 <HAL_DMA_Init+0x158>)
 8001c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1e:	091b      	lsrs	r3, r3, #4
 8001c20:	009a      	lsls	r2, r3, #2
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a48      	ldr	r2, [pc, #288]	@ (8001d4c <HAL_DMA_Init+0x15c>)
 8001c2a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c2c:	e00e      	b.n	8001c4c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b46      	ldr	r3, [pc, #280]	@ (8001d50 <HAL_DMA_Init+0x160>)
 8001c36:	4413      	add	r3, r2
 8001c38:	4a43      	ldr	r2, [pc, #268]	@ (8001d48 <HAL_DMA_Init+0x158>)
 8001c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3e:	091b      	lsrs	r3, r3, #4
 8001c40:	009a      	lsls	r2, r3, #2
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a42      	ldr	r2, [pc, #264]	@ (8001d54 <HAL_DMA_Init+0x164>)
 8001c4a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ca6:	d039      	beq.n	8001d1c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cac:	4a27      	ldr	r2, [pc, #156]	@ (8001d4c <HAL_DMA_Init+0x15c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d11a      	bne.n	8001ce8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001cb2:	4b29      	ldr	r3, [pc, #164]	@ (8001d58 <HAL_DMA_Init+0x168>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cba:	f003 031c 	and.w	r3, r3, #28
 8001cbe:	210f      	movs	r1, #15
 8001cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	4924      	ldr	r1, [pc, #144]	@ (8001d58 <HAL_DMA_Init+0x168>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001ccc:	4b22      	ldr	r3, [pc, #136]	@ (8001d58 <HAL_DMA_Init+0x168>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6859      	ldr	r1, [r3, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd8:	f003 031c 	and.w	r3, r3, #28
 8001cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce0:	491d      	ldr	r1, [pc, #116]	@ (8001d58 <HAL_DMA_Init+0x168>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]
 8001ce6:	e019      	b.n	8001d1c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d5c <HAL_DMA_Init+0x16c>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf0:	f003 031c 	and.w	r3, r3, #28
 8001cf4:	210f      	movs	r1, #15
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	4917      	ldr	r1, [pc, #92]	@ (8001d5c <HAL_DMA_Init+0x16c>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001d02:	4b16      	ldr	r3, [pc, #88]	@ (8001d5c <HAL_DMA_Init+0x16c>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6859      	ldr	r1, [r3, #4]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	f003 031c 	and.w	r3, r3, #28
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	4911      	ldr	r1, [pc, #68]	@ (8001d5c <HAL_DMA_Init+0x16c>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	40020407 	.word	0x40020407
 8001d44:	bffdfff8 	.word	0xbffdfff8
 8001d48:	cccccccd 	.word	0xcccccccd
 8001d4c:	40020000 	.word	0x40020000
 8001d50:	bffdfbf8 	.word	0xbffdfbf8
 8001d54:	40020400 	.word	0x40020400
 8001d58:	400200a8 	.word	0x400200a8
 8001d5c:	400204a8 	.word	0x400204a8

08001d60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
 8001d6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <HAL_DMA_Start_IT+0x20>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e04b      	b.n	8001e18 <HAL_DMA_Start_IT+0xb8>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d13a      	bne.n	8001e0a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2202      	movs	r2, #2
 8001d98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0201 	bic.w	r2, r2, #1
 8001db0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	68b9      	ldr	r1, [r7, #8]
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 f8e0 	bl	8001f7e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d008      	beq.n	8001dd8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f042 020e 	orr.w	r2, r2, #14
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	e00f      	b.n	8001df8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0204 	bic.w	r2, r2, #4
 8001de6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 020a 	orr.w	r2, r2, #10
 8001df6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	e005      	b.n	8001e16 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e12:	2302      	movs	r3, #2
 8001e14:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3c:	f003 031c 	and.w	r3, r3, #28
 8001e40:	2204      	movs	r2, #4
 8001e42:	409a      	lsls	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d026      	beq.n	8001e9a <HAL_DMA_IRQHandler+0x7a>
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d021      	beq.n	8001e9a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0320 	and.w	r3, r3, #32
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d107      	bne.n	8001e74 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0204 	bic.w	r2, r2, #4
 8001e72:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e78:	f003 021c 	and.w	r2, r3, #28
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e80:	2104      	movs	r1, #4
 8001e82:	fa01 f202 	lsl.w	r2, r1, r2
 8001e86:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d071      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001e98:	e06c      	b.n	8001f74 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9e:	f003 031c 	and.w	r3, r3, #28
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	409a      	lsls	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d02e      	beq.n	8001f0c <HAL_DMA_IRQHandler+0xec>
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d029      	beq.n	8001f0c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0320 	and.w	r3, r3, #32
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10b      	bne.n	8001ede <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 020a 	bic.w	r2, r2, #10
 8001ed4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee2:	f003 021c 	and.w	r2, r3, #28
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	2102      	movs	r1, #2
 8001eec:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d038      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001f0a:	e033      	b.n	8001f74 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f10:	f003 031c 	and.w	r3, r3, #28
 8001f14:	2208      	movs	r2, #8
 8001f16:	409a      	lsls	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d02a      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x156>
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d025      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 020e 	bic.w	r2, r2, #14
 8001f38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3e:	f003 021c 	and.w	r2, r3, #28
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	2101      	movs	r1, #1
 8001f48:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d004      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
}
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b085      	sub	sp, #20
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
 8001f8a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f90:	f003 021c 	and.w	r2, r3, #28
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f98:	2101      	movs	r1, #1
 8001f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2b10      	cmp	r3, #16
 8001fae:	d108      	bne.n	8001fc2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fc0:	e007      	b.n	8001fd2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	60da      	str	r2, [r3, #12]
}
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b087      	sub	sp, #28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fee:	e17f      	b.n	80022f0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 8171 	beq.w	80022ea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	2b01      	cmp	r3, #1
 8002012:	d005      	beq.n	8002020 <HAL_GPIO_Init+0x40>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d130      	bne.n	8002082 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	2203      	movs	r2, #3
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	4313      	orrs	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002056:	2201      	movs	r2, #1
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4013      	ands	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	091b      	lsrs	r3, r3, #4
 800206c:	f003 0201 	and.w	r2, r3, #1
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	2b03      	cmp	r3, #3
 800208c:	d118      	bne.n	80020c0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002092:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002094:	2201      	movs	r2, #1
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	08db      	lsrs	r3, r3, #3
 80020aa:	f003 0201 	and.w	r2, r3, #1
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d017      	beq.n	80020fc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	2203      	movs	r2, #3
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d123      	bne.n	8002150 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	08da      	lsrs	r2, r3, #3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3208      	adds	r2, #8
 8002110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002114:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	220f      	movs	r2, #15
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	4013      	ands	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	08da      	lsrs	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3208      	adds	r2, #8
 800214a:	6939      	ldr	r1, [r7, #16]
 800214c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4013      	ands	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0203 	and.w	r2, r3, #3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4313      	orrs	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 80ac 	beq.w	80022ea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002192:	4b5f      	ldr	r3, [pc, #380]	@ (8002310 <HAL_GPIO_Init+0x330>)
 8002194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002196:	4a5e      	ldr	r2, [pc, #376]	@ (8002310 <HAL_GPIO_Init+0x330>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6613      	str	r3, [r2, #96]	@ 0x60
 800219e:	4b5c      	ldr	r3, [pc, #368]	@ (8002310 <HAL_GPIO_Init+0x330>)
 80021a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021aa:	4a5a      	ldr	r2, [pc, #360]	@ (8002314 <HAL_GPIO_Init+0x334>)
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	089b      	lsrs	r3, r3, #2
 80021b0:	3302      	adds	r3, #2
 80021b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	220f      	movs	r2, #15
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4013      	ands	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021d4:	d025      	beq.n	8002222 <HAL_GPIO_Init+0x242>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002318 <HAL_GPIO_Init+0x338>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d01f      	beq.n	800221e <HAL_GPIO_Init+0x23e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a4e      	ldr	r2, [pc, #312]	@ (800231c <HAL_GPIO_Init+0x33c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d019      	beq.n	800221a <HAL_GPIO_Init+0x23a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002320 <HAL_GPIO_Init+0x340>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d013      	beq.n	8002216 <HAL_GPIO_Init+0x236>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a4c      	ldr	r2, [pc, #304]	@ (8002324 <HAL_GPIO_Init+0x344>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00d      	beq.n	8002212 <HAL_GPIO_Init+0x232>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002328 <HAL_GPIO_Init+0x348>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d007      	beq.n	800220e <HAL_GPIO_Init+0x22e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a4a      	ldr	r2, [pc, #296]	@ (800232c <HAL_GPIO_Init+0x34c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d101      	bne.n	800220a <HAL_GPIO_Init+0x22a>
 8002206:	2306      	movs	r3, #6
 8002208:	e00c      	b.n	8002224 <HAL_GPIO_Init+0x244>
 800220a:	2307      	movs	r3, #7
 800220c:	e00a      	b.n	8002224 <HAL_GPIO_Init+0x244>
 800220e:	2305      	movs	r3, #5
 8002210:	e008      	b.n	8002224 <HAL_GPIO_Init+0x244>
 8002212:	2304      	movs	r3, #4
 8002214:	e006      	b.n	8002224 <HAL_GPIO_Init+0x244>
 8002216:	2303      	movs	r3, #3
 8002218:	e004      	b.n	8002224 <HAL_GPIO_Init+0x244>
 800221a:	2302      	movs	r3, #2
 800221c:	e002      	b.n	8002224 <HAL_GPIO_Init+0x244>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <HAL_GPIO_Init+0x244>
 8002222:	2300      	movs	r3, #0
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	f002 0203 	and.w	r2, r2, #3
 800222a:	0092      	lsls	r2, r2, #2
 800222c:	4093      	lsls	r3, r2
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002234:	4937      	ldr	r1, [pc, #220]	@ (8002314 <HAL_GPIO_Init+0x334>)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	089b      	lsrs	r3, r3, #2
 800223a:	3302      	adds	r3, #2
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002242:	4b3b      	ldr	r3, [pc, #236]	@ (8002330 <HAL_GPIO_Init+0x350>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	43db      	mvns	r3, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002266:	4a32      	ldr	r2, [pc, #200]	@ (8002330 <HAL_GPIO_Init+0x350>)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800226c:	4b30      	ldr	r3, [pc, #192]	@ (8002330 <HAL_GPIO_Init+0x350>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	43db      	mvns	r3, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002290:	4a27      	ldr	r2, [pc, #156]	@ (8002330 <HAL_GPIO_Init+0x350>)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002296:	4b26      	ldr	r3, [pc, #152]	@ (8002330 <HAL_GPIO_Init+0x350>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	43db      	mvns	r3, r3
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022ba:	4a1d      	ldr	r2, [pc, #116]	@ (8002330 <HAL_GPIO_Init+0x350>)
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002330 <HAL_GPIO_Init+0x350>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022e4:	4a12      	ldr	r2, [pc, #72]	@ (8002330 <HAL_GPIO_Init+0x350>)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	3301      	adds	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	fa22 f303 	lsr.w	r3, r2, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f47f ae78 	bne.w	8001ff0 <HAL_GPIO_Init+0x10>
  }
}
 8002300:	bf00      	nop
 8002302:	bf00      	nop
 8002304:	371c      	adds	r7, #28
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000
 8002314:	40010000 	.word	0x40010000
 8002318:	48000400 	.word	0x48000400
 800231c:	48000800 	.word	0x48000800
 8002320:	48000c00 	.word	0x48000c00
 8002324:	48001000 	.word	0x48001000
 8002328:	48001400 	.word	0x48001400
 800232c:	48001800 	.word	0x48001800
 8002330:	40010400 	.word	0x40010400

08002334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	807b      	strh	r3, [r7, #2]
 8002340:	4613      	mov	r3, r2
 8002342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002344:	787b      	ldrb	r3, [r7, #1]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800234a:	887a      	ldrh	r2, [r7, #2]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002350:	e002      	b.n	8002358 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002352:	887a      	ldrh	r2, [r7, #2]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002368:	4b04      	ldr	r3, [pc, #16]	@ (800237c <HAL_PWREx_GetVoltageRange+0x18>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40007000 	.word	0x40007000

08002380 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800238e:	d130      	bne.n	80023f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002390:	4b23      	ldr	r3, [pc, #140]	@ (8002420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800239c:	d038      	beq.n	8002410 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800239e:	4b20      	ldr	r3, [pc, #128]	@ (8002420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002424 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2232      	movs	r2, #50	@ 0x32
 80023b4:	fb02 f303 	mul.w	r3, r2, r3
 80023b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023ba:	fba2 2303 	umull	r2, r3, r2, r3
 80023be:	0c9b      	lsrs	r3, r3, #18
 80023c0:	3301      	adds	r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023c4:	e002      	b.n	80023cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	3b01      	subs	r3, #1
 80023ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023cc:	4b14      	ldr	r3, [pc, #80]	@ (8002420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023d8:	d102      	bne.n	80023e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f2      	bne.n	80023c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ec:	d110      	bne.n	8002410 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e00f      	b.n	8002412 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023fe:	d007      	beq.n	8002410 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002400:	4b07      	ldr	r3, [pc, #28]	@ (8002420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002408:	4a05      	ldr	r2, [pc, #20]	@ (8002420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800240a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800240e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40007000 	.word	0x40007000
 8002424:	20000004 	.word	0x20000004
 8002428:	431bde83 	.word	0x431bde83

0800242c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e3ca      	b.n	8002bd4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800243e:	4b97      	ldr	r3, [pc, #604]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002448:	4b94      	ldr	r3, [pc, #592]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 80e4 	beq.w	8002628 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d007      	beq.n	8002476 <HAL_RCC_OscConfig+0x4a>
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	2b0c      	cmp	r3, #12
 800246a:	f040 808b 	bne.w	8002584 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2b01      	cmp	r3, #1
 8002472:	f040 8087 	bne.w	8002584 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002476:	4b89      	ldr	r3, [pc, #548]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d005      	beq.n	800248e <HAL_RCC_OscConfig+0x62>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e3a2      	b.n	8002bd4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1a      	ldr	r2, [r3, #32]
 8002492:	4b82      	ldr	r3, [pc, #520]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d004      	beq.n	80024a8 <HAL_RCC_OscConfig+0x7c>
 800249e:	4b7f      	ldr	r3, [pc, #508]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024a6:	e005      	b.n	80024b4 <HAL_RCC_OscConfig+0x88>
 80024a8:	4b7c      	ldr	r3, [pc, #496]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 80024aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ae:	091b      	lsrs	r3, r3, #4
 80024b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d223      	bcs.n	8002500 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 fd55 	bl	8002f6c <RCC_SetFlashLatencyFromMSIRange>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e383      	b.n	8002bd4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024cc:	4b73      	ldr	r3, [pc, #460]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a72      	ldr	r2, [pc, #456]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 80024d2:	f043 0308 	orr.w	r3, r3, #8
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b70      	ldr	r3, [pc, #448]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	496d      	ldr	r1, [pc, #436]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ea:	4b6c      	ldr	r3, [pc, #432]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	4968      	ldr	r1, [pc, #416]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
 80024fe:	e025      	b.n	800254c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002500:	4b66      	ldr	r3, [pc, #408]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a65      	ldr	r2, [pc, #404]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 8002506:	f043 0308 	orr.w	r3, r3, #8
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	4b63      	ldr	r3, [pc, #396]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	4960      	ldr	r1, [pc, #384]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800251e:	4b5f      	ldr	r3, [pc, #380]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	021b      	lsls	r3, r3, #8
 800252c:	495b      	ldr	r1, [pc, #364]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 800252e:	4313      	orrs	r3, r2
 8002530:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d109      	bne.n	800254c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	4618      	mov	r0, r3
 800253e:	f000 fd15 	bl	8002f6c <RCC_SetFlashLatencyFromMSIRange>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e343      	b.n	8002bd4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800254c:	f000 fc4a 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 8002550:	4602      	mov	r2, r0
 8002552:	4b52      	ldr	r3, [pc, #328]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	f003 030f 	and.w	r3, r3, #15
 800255c:	4950      	ldr	r1, [pc, #320]	@ (80026a0 <HAL_RCC_OscConfig+0x274>)
 800255e:	5ccb      	ldrb	r3, [r1, r3]
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
 8002568:	4a4e      	ldr	r2, [pc, #312]	@ (80026a4 <HAL_RCC_OscConfig+0x278>)
 800256a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800256c:	4b4e      	ldr	r3, [pc, #312]	@ (80026a8 <HAL_RCC_OscConfig+0x27c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff f9cf 	bl	8001914 <HAL_InitTick>
 8002576:	4603      	mov	r3, r0
 8002578:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800257a:	7bfb      	ldrb	r3, [r7, #15]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d052      	beq.n	8002626 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	e327      	b.n	8002bd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d032      	beq.n	80025f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800258c:	4b43      	ldr	r3, [pc, #268]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a42      	ldr	r2, [pc, #264]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002598:	f7ff fa0c 	bl	80019b4 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025a0:	f7ff fa08 	bl	80019b4 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e310      	b.n	8002bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025b2:	4b3a      	ldr	r3, [pc, #232]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025be:	4b37      	ldr	r3, [pc, #220]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a36      	ldr	r2, [pc, #216]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 80025c4:	f043 0308 	orr.w	r3, r3, #8
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	4b34      	ldr	r3, [pc, #208]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	4931      	ldr	r1, [pc, #196]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025dc:	4b2f      	ldr	r3, [pc, #188]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	492c      	ldr	r1, [pc, #176]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
 80025f0:	e01a      	b.n	8002628 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025f2:	4b2a      	ldr	r3, [pc, #168]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a29      	ldr	r2, [pc, #164]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025fe:	f7ff f9d9 	bl	80019b4 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002606:	f7ff f9d5 	bl	80019b4 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e2dd      	b.n	8002bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002618:	4b20      	ldr	r3, [pc, #128]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f0      	bne.n	8002606 <HAL_RCC_OscConfig+0x1da>
 8002624:	e000      	b.n	8002628 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002626:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d074      	beq.n	800271e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	2b08      	cmp	r3, #8
 8002638:	d005      	beq.n	8002646 <HAL_RCC_OscConfig+0x21a>
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	2b0c      	cmp	r3, #12
 800263e:	d10e      	bne.n	800265e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	2b03      	cmp	r3, #3
 8002644:	d10b      	bne.n	800265e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002646:	4b15      	ldr	r3, [pc, #84]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d064      	beq.n	800271c <HAL_RCC_OscConfig+0x2f0>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d160      	bne.n	800271c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e2ba      	b.n	8002bd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002666:	d106      	bne.n	8002676 <HAL_RCC_OscConfig+0x24a>
 8002668:	4b0c      	ldr	r3, [pc, #48]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a0b      	ldr	r2, [pc, #44]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 800266e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	e026      	b.n	80026c4 <HAL_RCC_OscConfig+0x298>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800267e:	d115      	bne.n	80026ac <HAL_RCC_OscConfig+0x280>
 8002680:	4b06      	ldr	r3, [pc, #24]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a05      	ldr	r2, [pc, #20]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 8002686:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	4b03      	ldr	r3, [pc, #12]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a02      	ldr	r2, [pc, #8]	@ (800269c <HAL_RCC_OscConfig+0x270>)
 8002692:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	e014      	b.n	80026c4 <HAL_RCC_OscConfig+0x298>
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000
 80026a0:	08008408 	.word	0x08008408
 80026a4:	20000004 	.word	0x20000004
 80026a8:	20000008 	.word	0x20000008
 80026ac:	4ba0      	ldr	r3, [pc, #640]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a9f      	ldr	r2, [pc, #636]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 80026b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	4b9d      	ldr	r3, [pc, #628]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a9c      	ldr	r2, [pc, #624]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 80026be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d013      	beq.n	80026f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026cc:	f7ff f972 	bl	80019b4 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d4:	f7ff f96e 	bl	80019b4 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b64      	cmp	r3, #100	@ 0x64
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e276      	b.n	8002bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026e6:	4b92      	ldr	r3, [pc, #584]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0x2a8>
 80026f2:	e014      	b.n	800271e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7ff f95e 	bl	80019b4 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026fc:	f7ff f95a 	bl	80019b4 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b64      	cmp	r3, #100	@ 0x64
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e262      	b.n	8002bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800270e:	4b88      	ldr	r3, [pc, #544]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x2d0>
 800271a:	e000      	b.n	800271e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800271c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d060      	beq.n	80027ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	2b04      	cmp	r3, #4
 800272e:	d005      	beq.n	800273c <HAL_RCC_OscConfig+0x310>
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	2b0c      	cmp	r3, #12
 8002734:	d119      	bne.n	800276a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2b02      	cmp	r3, #2
 800273a:	d116      	bne.n	800276a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800273c:	4b7c      	ldr	r3, [pc, #496]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_RCC_OscConfig+0x328>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e23f      	b.n	8002bd4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002754:	4b76      	ldr	r3, [pc, #472]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	061b      	lsls	r3, r3, #24
 8002762:	4973      	ldr	r1, [pc, #460]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 8002764:	4313      	orrs	r3, r2
 8002766:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002768:	e040      	b.n	80027ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d023      	beq.n	80027ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002772:	4b6f      	ldr	r3, [pc, #444]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a6e      	ldr	r2, [pc, #440]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 8002778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800277c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277e:	f7ff f919 	bl	80019b4 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002786:	f7ff f915 	bl	80019b4 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e21d      	b.n	8002bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002798:	4b65      	ldr	r3, [pc, #404]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0f0      	beq.n	8002786 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a4:	4b62      	ldr	r3, [pc, #392]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	061b      	lsls	r3, r3, #24
 80027b2:	495f      	ldr	r1, [pc, #380]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
 80027b8:	e018      	b.n	80027ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a5c      	ldr	r2, [pc, #368]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 80027c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c6:	f7ff f8f5 	bl	80019b4 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ce:	f7ff f8f1 	bl	80019b4 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e1f9      	b.n	8002bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027e0:	4b53      	ldr	r3, [pc, #332]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f0      	bne.n	80027ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d03c      	beq.n	8002872 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d01c      	beq.n	800283a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002800:	4b4b      	ldr	r3, [pc, #300]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 8002802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002806:	4a4a      	ldr	r2, [pc, #296]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002810:	f7ff f8d0 	bl	80019b4 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002818:	f7ff f8cc 	bl	80019b4 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e1d4      	b.n	8002bd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800282a:	4b41      	ldr	r3, [pc, #260]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 800282c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0ef      	beq.n	8002818 <HAL_RCC_OscConfig+0x3ec>
 8002838:	e01b      	b.n	8002872 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800283a:	4b3d      	ldr	r3, [pc, #244]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 800283c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002840:	4a3b      	ldr	r2, [pc, #236]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 8002842:	f023 0301 	bic.w	r3, r3, #1
 8002846:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284a:	f7ff f8b3 	bl	80019b4 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002852:	f7ff f8af 	bl	80019b4 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e1b7      	b.n	8002bd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002864:	4b32      	ldr	r3, [pc, #200]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 8002866:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1ef      	bne.n	8002852 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 80a6 	beq.w	80029cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002880:	2300      	movs	r3, #0
 8002882:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002884:	4b2a      	ldr	r3, [pc, #168]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 8002886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10d      	bne.n	80028ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002890:	4b27      	ldr	r3, [pc, #156]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 8002892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002894:	4a26      	ldr	r2, [pc, #152]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 8002896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800289a:	6593      	str	r3, [r2, #88]	@ 0x58
 800289c:	4b24      	ldr	r3, [pc, #144]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 800289e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a8:	2301      	movs	r3, #1
 80028aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ac:	4b21      	ldr	r3, [pc, #132]	@ (8002934 <HAL_RCC_OscConfig+0x508>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d118      	bne.n	80028ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002934 <HAL_RCC_OscConfig+0x508>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002934 <HAL_RCC_OscConfig+0x508>)
 80028be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c4:	f7ff f876 	bl	80019b4 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028cc:	f7ff f872 	bl	80019b4 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e17a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028de:	4b15      	ldr	r3, [pc, #84]	@ (8002934 <HAL_RCC_OscConfig+0x508>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d108      	bne.n	8002904 <HAL_RCC_OscConfig+0x4d8>
 80028f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 80028f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002902:	e029      	b.n	8002958 <HAL_RCC_OscConfig+0x52c>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b05      	cmp	r3, #5
 800290a:	d115      	bne.n	8002938 <HAL_RCC_OscConfig+0x50c>
 800290c:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 800290e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002912:	4a07      	ldr	r2, [pc, #28]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 8002914:	f043 0304 	orr.w	r3, r3, #4
 8002918:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800291c:	4b04      	ldr	r3, [pc, #16]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 800291e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002922:	4a03      	ldr	r2, [pc, #12]	@ (8002930 <HAL_RCC_OscConfig+0x504>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800292c:	e014      	b.n	8002958 <HAL_RCC_OscConfig+0x52c>
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000
 8002934:	40007000 	.word	0x40007000
 8002938:	4b9c      	ldr	r3, [pc, #624]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 800293a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800293e:	4a9b      	ldr	r2, [pc, #620]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 8002940:	f023 0301 	bic.w	r3, r3, #1
 8002944:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002948:	4b98      	ldr	r3, [pc, #608]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800294e:	4a97      	ldr	r2, [pc, #604]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 8002950:	f023 0304 	bic.w	r3, r3, #4
 8002954:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d016      	beq.n	800298e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002960:	f7ff f828 	bl	80019b4 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002966:	e00a      	b.n	800297e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002968:	f7ff f824 	bl	80019b4 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002976:	4293      	cmp	r3, r2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e12a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800297e:	4b8b      	ldr	r3, [pc, #556]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 8002980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0ed      	beq.n	8002968 <HAL_RCC_OscConfig+0x53c>
 800298c:	e015      	b.n	80029ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298e:	f7ff f811 	bl	80019b4 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002994:	e00a      	b.n	80029ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002996:	f7ff f80d 	bl	80019b4 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e113      	b.n	8002bd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029ac:	4b7f      	ldr	r3, [pc, #508]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1ed      	bne.n	8002996 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ba:	7ffb      	ldrb	r3, [r7, #31]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d105      	bne.n	80029cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c0:	4b7a      	ldr	r3, [pc, #488]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 80029c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c4:	4a79      	ldr	r2, [pc, #484]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 80029c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029ca:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 80fe 	beq.w	8002bd2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029da:	2b02      	cmp	r3, #2
 80029dc:	f040 80d0 	bne.w	8002b80 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029e0:	4b72      	ldr	r3, [pc, #456]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f003 0203 	and.w	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d130      	bne.n	8002a56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	3b01      	subs	r3, #1
 8002a00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d127      	bne.n	8002a56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a10:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d11f      	bne.n	8002a56 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a20:	2a07      	cmp	r2, #7
 8002a22:	bf14      	ite	ne
 8002a24:	2201      	movne	r2, #1
 8002a26:	2200      	moveq	r2, #0
 8002a28:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d113      	bne.n	8002a56 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a38:	085b      	lsrs	r3, r3, #1
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d109      	bne.n	8002a56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4c:	085b      	lsrs	r3, r3, #1
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d06e      	beq.n	8002b34 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	2b0c      	cmp	r3, #12
 8002a5a:	d069      	beq.n	8002b30 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a5c:	4b53      	ldr	r3, [pc, #332]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d105      	bne.n	8002a74 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a68:	4b50      	ldr	r3, [pc, #320]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0ad      	b.n	8002bd4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a78:	4b4c      	ldr	r3, [pc, #304]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a4b      	ldr	r2, [pc, #300]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 8002a7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a82:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a84:	f7fe ff96 	bl	80019b4 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe ff92 	bl	80019b4 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e09a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a9e:	4b43      	ldr	r3, [pc, #268]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aaa:	4b40      	ldr	r3, [pc, #256]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	4b40      	ldr	r3, [pc, #256]	@ (8002bb0 <HAL_RCC_OscConfig+0x784>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002aba:	3a01      	subs	r2, #1
 8002abc:	0112      	lsls	r2, r2, #4
 8002abe:	4311      	orrs	r1, r2
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ac4:	0212      	lsls	r2, r2, #8
 8002ac6:	4311      	orrs	r1, r2
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002acc:	0852      	lsrs	r2, r2, #1
 8002ace:	3a01      	subs	r2, #1
 8002ad0:	0552      	lsls	r2, r2, #21
 8002ad2:	4311      	orrs	r1, r2
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ad8:	0852      	lsrs	r2, r2, #1
 8002ada:	3a01      	subs	r2, #1
 8002adc:	0652      	lsls	r2, r2, #25
 8002ade:	4311      	orrs	r1, r2
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ae4:	0912      	lsrs	r2, r2, #4
 8002ae6:	0452      	lsls	r2, r2, #17
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	4930      	ldr	r1, [pc, #192]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002af0:	4b2e      	ldr	r3, [pc, #184]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a2d      	ldr	r2, [pc, #180]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 8002af6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002afa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002afc:	4b2b      	ldr	r3, [pc, #172]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	4a2a      	ldr	r2, [pc, #168]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 8002b02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b08:	f7fe ff54 	bl	80019b4 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b10:	f7fe ff50 	bl	80019b4 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e058      	b.n	8002bd4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b22:	4b22      	ldr	r3, [pc, #136]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b2e:	e050      	b.n	8002bd2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e04f      	b.n	8002bd4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b34:	4b1d      	ldr	r3, [pc, #116]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d148      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b40:	4b1a      	ldr	r3, [pc, #104]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a19      	ldr	r2, [pc, #100]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 8002b46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b4c:	4b17      	ldr	r3, [pc, #92]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4a16      	ldr	r2, [pc, #88]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 8002b52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b58:	f7fe ff2c 	bl	80019b4 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b60:	f7fe ff28 	bl	80019b4 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e030      	b.n	8002bd4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b72:	4b0e      	ldr	r3, [pc, #56]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x734>
 8002b7e:	e028      	b.n	8002bd2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2b0c      	cmp	r3, #12
 8002b84:	d023      	beq.n	8002bce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b86:	4b09      	ldr	r3, [pc, #36]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a08      	ldr	r2, [pc, #32]	@ (8002bac <HAL_RCC_OscConfig+0x780>)
 8002b8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b92:	f7fe ff0f 	bl	80019b4 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b98:	e00c      	b.n	8002bb4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9a:	f7fe ff0b 	bl	80019b4 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d905      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e013      	b.n	8002bd4 <HAL_RCC_OscConfig+0x7a8>
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb4:	4b09      	ldr	r3, [pc, #36]	@ (8002bdc <HAL_RCC_OscConfig+0x7b0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1ec      	bne.n	8002b9a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002bc0:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <HAL_RCC_OscConfig+0x7b0>)
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	4905      	ldr	r1, [pc, #20]	@ (8002bdc <HAL_RCC_OscConfig+0x7b0>)
 8002bc6:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <HAL_RCC_OscConfig+0x7b4>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	60cb      	str	r3, [r1, #12]
 8002bcc:	e001      	b.n	8002bd2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3720      	adds	r7, #32
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	feeefffc 	.word	0xfeeefffc

08002be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0e7      	b.n	8002dc8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b75      	ldr	r3, [pc, #468]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d910      	bls.n	8002c28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b72      	ldr	r3, [pc, #456]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 0207 	bic.w	r2, r3, #7
 8002c0e:	4970      	ldr	r1, [pc, #448]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b6e      	ldr	r3, [pc, #440]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0cf      	b.n	8002dc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d010      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	4b66      	ldr	r3, [pc, #408]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d908      	bls.n	8002c56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c44:	4b63      	ldr	r3, [pc, #396]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	4960      	ldr	r1, [pc, #384]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d04c      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d107      	bne.n	8002c7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c6a:	4b5a      	ldr	r3, [pc, #360]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d121      	bne.n	8002cba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e0a6      	b.n	8002dc8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d107      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c82:	4b54      	ldr	r3, [pc, #336]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d115      	bne.n	8002cba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e09a      	b.n	8002dc8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d107      	bne.n	8002caa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c9a:	4b4e      	ldr	r3, [pc, #312]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d109      	bne.n	8002cba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e08e      	b.n	8002dc8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002caa:	4b4a      	ldr	r3, [pc, #296]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e086      	b.n	8002dc8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cba:	4b46      	ldr	r3, [pc, #280]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f023 0203 	bic.w	r2, r3, #3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	4943      	ldr	r1, [pc, #268]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ccc:	f7fe fe72 	bl	80019b4 <HAL_GetTick>
 8002cd0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd2:	e00a      	b.n	8002cea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd4:	f7fe fe6e 	bl	80019b4 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e06e      	b.n	8002dc8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cea:	4b3a      	ldr	r3, [pc, #232]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 020c 	and.w	r2, r3, #12
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d1eb      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d010      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	4b31      	ldr	r3, [pc, #196]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d208      	bcs.n	8002d2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d18:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	492b      	ldr	r1, [pc, #172]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d2a:	4b29      	ldr	r3, [pc, #164]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d210      	bcs.n	8002d5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d38:	4b25      	ldr	r3, [pc, #148]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f023 0207 	bic.w	r2, r3, #7
 8002d40:	4923      	ldr	r1, [pc, #140]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d48:	4b21      	ldr	r3, [pc, #132]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d001      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e036      	b.n	8002dc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d008      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d66:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	4918      	ldr	r1, [pc, #96]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d009      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d84:	4b13      	ldr	r3, [pc, #76]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4910      	ldr	r1, [pc, #64]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d98:	f000 f824 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	091b      	lsrs	r3, r3, #4
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	490b      	ldr	r1, [pc, #44]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f4>)
 8002daa:	5ccb      	ldrb	r3, [r1, r3]
 8002dac:	f003 031f 	and.w	r3, r3, #31
 8002db0:	fa22 f303 	lsr.w	r3, r2, r3
 8002db4:	4a09      	ldr	r2, [pc, #36]	@ (8002ddc <HAL_RCC_ClockConfig+0x1f8>)
 8002db6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002db8:	4b09      	ldr	r3, [pc, #36]	@ (8002de0 <HAL_RCC_ClockConfig+0x1fc>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fe fda9 	bl	8001914 <HAL_InitTick>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002dc6:	7afb      	ldrb	r3, [r7, #11]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40022000 	.word	0x40022000
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	08008408 	.word	0x08008408
 8002ddc:	20000004 	.word	0x20000004
 8002de0:	20000008 	.word	0x20000008

08002de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b089      	sub	sp, #36	@ 0x24
 8002de8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	2300      	movs	r3, #0
 8002df0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002df2:	4b3e      	ldr	r3, [pc, #248]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x108>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 030c 	and.w	r3, r3, #12
 8002dfa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dfc:	4b3b      	ldr	r3, [pc, #236]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x108>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_GetSysClockFreq+0x34>
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	2b0c      	cmp	r3, #12
 8002e10:	d121      	bne.n	8002e56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d11e      	bne.n	8002e56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e18:	4b34      	ldr	r3, [pc, #208]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x108>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d107      	bne.n	8002e34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e24:	4b31      	ldr	r3, [pc, #196]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x108>)
 8002e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e2a:	0a1b      	lsrs	r3, r3, #8
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	e005      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e34:	4b2d      	ldr	r3, [pc, #180]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x108>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e40:	4a2b      	ldr	r2, [pc, #172]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10d      	bne.n	8002e6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e54:	e00a      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d102      	bne.n	8002e62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e5c:	4b25      	ldr	r3, [pc, #148]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e5e:	61bb      	str	r3, [r7, #24]
 8002e60:	e004      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d101      	bne.n	8002e6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e68:	4b23      	ldr	r3, [pc, #140]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	2b0c      	cmp	r3, #12
 8002e70:	d134      	bne.n	8002edc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e72:	4b1e      	ldr	r3, [pc, #120]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x108>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d003      	beq.n	8002e8a <HAL_RCC_GetSysClockFreq+0xa6>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d003      	beq.n	8002e90 <HAL_RCC_GetSysClockFreq+0xac>
 8002e88:	e005      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e8c:	617b      	str	r3, [r7, #20]
      break;
 8002e8e:	e005      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e90:	4b19      	ldr	r3, [pc, #100]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e92:	617b      	str	r3, [r7, #20]
      break;
 8002e94:	e002      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	617b      	str	r3, [r7, #20]
      break;
 8002e9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e9c:	4b13      	ldr	r3, [pc, #76]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x108>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002eaa:	4b10      	ldr	r3, [pc, #64]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x108>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	0a1b      	lsrs	r3, r3, #8
 8002eb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	fb03 f202 	mul.w	r2, r3, r2
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	0e5b      	lsrs	r3, r3, #25
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	3301      	adds	r3, #1
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002edc:	69bb      	ldr	r3, [r7, #24]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3724      	adds	r7, #36	@ 0x24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	08008420 	.word	0x08008420
 8002ef4:	00f42400 	.word	0x00f42400
 8002ef8:	007a1200 	.word	0x007a1200

08002efc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f00:	4b03      	ldr	r3, [pc, #12]	@ (8002f10 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f02:	681b      	ldr	r3, [r3, #0]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	20000004 	.word	0x20000004

08002f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f18:	f7ff fff0 	bl	8002efc <HAL_RCC_GetHCLKFreq>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b06      	ldr	r3, [pc, #24]	@ (8002f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	0a1b      	lsrs	r3, r3, #8
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	4904      	ldr	r1, [pc, #16]	@ (8002f3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f2a:	5ccb      	ldrb	r3, [r1, r3]
 8002f2c:	f003 031f 	and.w	r3, r3, #31
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	08008418 	.word	0x08008418

08002f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f44:	f7ff ffda 	bl	8002efc <HAL_RCC_GetHCLKFreq>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	0adb      	lsrs	r3, r3, #11
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	4904      	ldr	r1, [pc, #16]	@ (8002f68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f56:	5ccb      	ldrb	r3, [r1, r3]
 8002f58:	f003 031f 	and.w	r3, r3, #31
 8002f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000
 8002f68:	08008418 	.word	0x08008418

08002f6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f74:	2300      	movs	r3, #0
 8002f76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f78:	4b2a      	ldr	r3, [pc, #168]	@ (8003024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f84:	f7ff f9ee 	bl	8002364 <HAL_PWREx_GetVoltageRange>
 8002f88:	6178      	str	r0, [r7, #20]
 8002f8a:	e014      	b.n	8002fb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f8c:	4b25      	ldr	r3, [pc, #148]	@ (8003024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f90:	4a24      	ldr	r2, [pc, #144]	@ (8003024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f96:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f98:	4b22      	ldr	r3, [pc, #136]	@ (8003024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fa4:	f7ff f9de 	bl	8002364 <HAL_PWREx_GetVoltageRange>
 8002fa8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002faa:	4b1e      	ldr	r3, [pc, #120]	@ (8003024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fae:	4a1d      	ldr	r2, [pc, #116]	@ (8003024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fb4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fbc:	d10b      	bne.n	8002fd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b80      	cmp	r3, #128	@ 0x80
 8002fc2:	d919      	bls.n	8002ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2ba0      	cmp	r3, #160	@ 0xa0
 8002fc8:	d902      	bls.n	8002fd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fca:	2302      	movs	r3, #2
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	e013      	b.n	8002ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	613b      	str	r3, [r7, #16]
 8002fd4:	e010      	b.n	8002ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b80      	cmp	r3, #128	@ 0x80
 8002fda:	d902      	bls.n	8002fe2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002fdc:	2303      	movs	r3, #3
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	e00a      	b.n	8002ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b80      	cmp	r3, #128	@ 0x80
 8002fe6:	d102      	bne.n	8002fee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fe8:	2302      	movs	r3, #2
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	e004      	b.n	8002ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b70      	cmp	r3, #112	@ 0x70
 8002ff2:	d101      	bne.n	8002ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8003028 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f023 0207 	bic.w	r2, r3, #7
 8003000:	4909      	ldr	r1, [pc, #36]	@ (8003028 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003008:	4b07      	ldr	r3, [pc, #28]	@ (8003028 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	429a      	cmp	r2, r3
 8003014:	d001      	beq.n	800301a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40021000 	.word	0x40021000
 8003028:	40022000 	.word	0x40022000

0800302c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003034:	2300      	movs	r3, #0
 8003036:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003038:	2300      	movs	r3, #0
 800303a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003044:	2b00      	cmp	r3, #0
 8003046:	d041      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800304c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003050:	d02a      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003052:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003056:	d824      	bhi.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003058:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800305c:	d008      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800305e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003062:	d81e      	bhi.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00a      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003068:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800306c:	d010      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800306e:	e018      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003070:	4b86      	ldr	r3, [pc, #536]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4a85      	ldr	r2, [pc, #532]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003076:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800307a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800307c:	e015      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3304      	adds	r3, #4
 8003082:	2100      	movs	r1, #0
 8003084:	4618      	mov	r0, r3
 8003086:	f000 fabb 	bl	8003600 <RCCEx_PLLSAI1_Config>
 800308a:	4603      	mov	r3, r0
 800308c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800308e:	e00c      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3320      	adds	r3, #32
 8003094:	2100      	movs	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fba6 	bl	80037e8 <RCCEx_PLLSAI2_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030a0:	e003      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	74fb      	strb	r3, [r7, #19]
      break;
 80030a6:	e000      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80030a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030aa:	7cfb      	ldrb	r3, [r7, #19]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10b      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030b0:	4b76      	ldr	r3, [pc, #472]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030be:	4973      	ldr	r1, [pc, #460]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80030c6:	e001      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c8:	7cfb      	ldrb	r3, [r7, #19]
 80030ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d041      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80030e0:	d02a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80030e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80030e6:	d824      	bhi.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030ec:	d008      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80030ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030f2:	d81e      	bhi.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00a      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80030f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030fc:	d010      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030fe:	e018      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003100:	4b62      	ldr	r3, [pc, #392]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	4a61      	ldr	r2, [pc, #388]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003106:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800310a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800310c:	e015      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3304      	adds	r3, #4
 8003112:	2100      	movs	r1, #0
 8003114:	4618      	mov	r0, r3
 8003116:	f000 fa73 	bl	8003600 <RCCEx_PLLSAI1_Config>
 800311a:	4603      	mov	r3, r0
 800311c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800311e:	e00c      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3320      	adds	r3, #32
 8003124:	2100      	movs	r1, #0
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fb5e 	bl	80037e8 <RCCEx_PLLSAI2_Config>
 800312c:	4603      	mov	r3, r0
 800312e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003130:	e003      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	74fb      	strb	r3, [r7, #19]
      break;
 8003136:	e000      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800313a:	7cfb      	ldrb	r3, [r7, #19]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10b      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003140:	4b52      	ldr	r3, [pc, #328]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003146:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800314e:	494f      	ldr	r1, [pc, #316]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003156:	e001      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003158:	7cfb      	ldrb	r3, [r7, #19]
 800315a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 80a0 	beq.w	80032aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800316a:	2300      	movs	r3, #0
 800316c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800316e:	4b47      	ldr	r3, [pc, #284]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800317e:	2300      	movs	r3, #0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00d      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003184:	4b41      	ldr	r3, [pc, #260]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003188:	4a40      	ldr	r2, [pc, #256]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800318e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003190:	4b3e      	ldr	r3, [pc, #248]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800319c:	2301      	movs	r3, #1
 800319e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a3a      	ldr	r2, [pc, #232]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031ac:	f7fe fc02 	bl	80019b4 <HAL_GetTick>
 80031b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031b2:	e009      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b4:	f7fe fbfe 	bl	80019b4 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d902      	bls.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	74fb      	strb	r3, [r7, #19]
        break;
 80031c6:	e005      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031c8:	4b31      	ldr	r3, [pc, #196]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0ef      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80031d4:	7cfb      	ldrb	r3, [r7, #19]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d15c      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031da:	4b2c      	ldr	r3, [pc, #176]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d01f      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d019      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031f8:	4b24      	ldr	r3, [pc, #144]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003202:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003204:	4b21      	ldr	r3, [pc, #132]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800320a:	4a20      	ldr	r2, [pc, #128]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003214:	4b1d      	ldr	r3, [pc, #116]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800321a:	4a1c      	ldr	r2, [pc, #112]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003220:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003224:	4a19      	ldr	r2, [pc, #100]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d016      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003236:	f7fe fbbd 	bl	80019b4 <HAL_GetTick>
 800323a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800323c:	e00b      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323e:	f7fe fbb9 	bl	80019b4 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800324c:	4293      	cmp	r3, r2
 800324e:	d902      	bls.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	74fb      	strb	r3, [r7, #19]
            break;
 8003254:	e006      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003256:	4b0d      	ldr	r3, [pc, #52]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0ec      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003264:	7cfb      	ldrb	r3, [r7, #19]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10c      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800326a:	4b08      	ldr	r3, [pc, #32]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003270:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800327a:	4904      	ldr	r1, [pc, #16]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003282:	e009      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003284:	7cfb      	ldrb	r3, [r7, #19]
 8003286:	74bb      	strb	r3, [r7, #18]
 8003288:	e006      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800328a:	bf00      	nop
 800328c:	40021000 	.word	0x40021000
 8003290:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003294:	7cfb      	ldrb	r3, [r7, #19]
 8003296:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003298:	7c7b      	ldrb	r3, [r7, #17]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d105      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329e:	4b9e      	ldr	r3, [pc, #632]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a2:	4a9d      	ldr	r2, [pc, #628]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032a8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032b6:	4b98      	ldr	r3, [pc, #608]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032bc:	f023 0203 	bic.w	r2, r3, #3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c4:	4994      	ldr	r1, [pc, #592]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032d8:	4b8f      	ldr	r3, [pc, #572]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032de:	f023 020c 	bic.w	r2, r3, #12
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e6:	498c      	ldr	r1, [pc, #560]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032fa:	4b87      	ldr	r3, [pc, #540]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003300:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003308:	4983      	ldr	r1, [pc, #524]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800331c:	4b7e      	ldr	r3, [pc, #504]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003322:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332a:	497b      	ldr	r1, [pc, #492]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0310 	and.w	r3, r3, #16
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800333e:	4b76      	ldr	r3, [pc, #472]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003344:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800334c:	4972      	ldr	r1, [pc, #456]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003360:	4b6d      	ldr	r3, [pc, #436]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003366:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800336e:	496a      	ldr	r1, [pc, #424]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003382:	4b65      	ldr	r3, [pc, #404]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003388:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003390:	4961      	ldr	r1, [pc, #388]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033a4:	4b5c      	ldr	r3, [pc, #368]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b2:	4959      	ldr	r1, [pc, #356]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033c6:	4b54      	ldr	r3, [pc, #336]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033cc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033d4:	4950      	ldr	r1, [pc, #320]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033e8:	4b4b      	ldr	r3, [pc, #300]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f6:	4948      	ldr	r1, [pc, #288]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800340a:	4b43      	ldr	r3, [pc, #268]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003410:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003418:	493f      	ldr	r1, [pc, #252]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d028      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800342c:	4b3a      	ldr	r3, [pc, #232]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003432:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800343a:	4937      	ldr	r1, [pc, #220]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003446:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800344a:	d106      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800344c:	4b32      	ldr	r3, [pc, #200]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	4a31      	ldr	r2, [pc, #196]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003452:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003456:	60d3      	str	r3, [r2, #12]
 8003458:	e011      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800345e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003462:	d10c      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3304      	adds	r3, #4
 8003468:	2101      	movs	r1, #1
 800346a:	4618      	mov	r0, r3
 800346c:	f000 f8c8 	bl	8003600 <RCCEx_PLLSAI1_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003474:	7cfb      	ldrb	r3, [r7, #19]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800347a:	7cfb      	ldrb	r3, [r7, #19]
 800347c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d028      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800348a:	4b23      	ldr	r3, [pc, #140]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003490:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003498:	491f      	ldr	r1, [pc, #124]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034a8:	d106      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034b4:	60d3      	str	r3, [r2, #12]
 80034b6:	e011      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034c0:	d10c      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3304      	adds	r3, #4
 80034c6:	2101      	movs	r1, #1
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 f899 	bl	8003600 <RCCEx_PLLSAI1_Config>
 80034ce:	4603      	mov	r3, r0
 80034d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034d2:	7cfb      	ldrb	r3, [r7, #19]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80034d8:	7cfb      	ldrb	r3, [r7, #19]
 80034da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d02b      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034f6:	4908      	ldr	r1, [pc, #32]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003502:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003506:	d109      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003508:	4b03      	ldr	r3, [pc, #12]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4a02      	ldr	r2, [pc, #8]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003512:	60d3      	str	r3, [r2, #12]
 8003514:	e014      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003520:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003524:	d10c      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3304      	adds	r3, #4
 800352a:	2101      	movs	r1, #1
 800352c:	4618      	mov	r0, r3
 800352e:	f000 f867 	bl	8003600 <RCCEx_PLLSAI1_Config>
 8003532:	4603      	mov	r3, r0
 8003534:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003536:	7cfb      	ldrb	r3, [r7, #19]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800353c:	7cfb      	ldrb	r3, [r7, #19]
 800353e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d02f      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800354c:	4b2b      	ldr	r3, [pc, #172]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003552:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800355a:	4928      	ldr	r1, [pc, #160]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003566:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800356a:	d10d      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3304      	adds	r3, #4
 8003570:	2102      	movs	r1, #2
 8003572:	4618      	mov	r0, r3
 8003574:	f000 f844 	bl	8003600 <RCCEx_PLLSAI1_Config>
 8003578:	4603      	mov	r3, r0
 800357a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800357c:	7cfb      	ldrb	r3, [r7, #19]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d014      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003582:	7cfb      	ldrb	r3, [r7, #19]
 8003584:	74bb      	strb	r3, [r7, #18]
 8003586:	e011      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800358c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003590:	d10c      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3320      	adds	r3, #32
 8003596:	2102      	movs	r1, #2
 8003598:	4618      	mov	r0, r3
 800359a:	f000 f925 	bl	80037e8 <RCCEx_PLLSAI2_Config>
 800359e:	4603      	mov	r3, r0
 80035a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035a2:	7cfb      	ldrb	r3, [r7, #19]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035a8:	7cfb      	ldrb	r3, [r7, #19]
 80035aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035b8:	4b10      	ldr	r3, [pc, #64]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035be:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035c6:	490d      	ldr	r1, [pc, #52]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00b      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035da:	4b08      	ldr	r3, [pc, #32]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035ea:	4904      	ldr	r1, [pc, #16]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40021000 	.word	0x40021000

08003600 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800360e:	4b75      	ldr	r3, [pc, #468]	@ (80037e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d018      	beq.n	800364c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800361a:	4b72      	ldr	r3, [pc, #456]	@ (80037e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f003 0203 	and.w	r2, r3, #3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d10d      	bne.n	8003646 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
       ||
 800362e:	2b00      	cmp	r3, #0
 8003630:	d009      	beq.n	8003646 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003632:	4b6c      	ldr	r3, [pc, #432]	@ (80037e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	091b      	lsrs	r3, r3, #4
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
       ||
 8003642:	429a      	cmp	r2, r3
 8003644:	d047      	beq.n	80036d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	73fb      	strb	r3, [r7, #15]
 800364a:	e044      	b.n	80036d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b03      	cmp	r3, #3
 8003652:	d018      	beq.n	8003686 <RCCEx_PLLSAI1_Config+0x86>
 8003654:	2b03      	cmp	r3, #3
 8003656:	d825      	bhi.n	80036a4 <RCCEx_PLLSAI1_Config+0xa4>
 8003658:	2b01      	cmp	r3, #1
 800365a:	d002      	beq.n	8003662 <RCCEx_PLLSAI1_Config+0x62>
 800365c:	2b02      	cmp	r3, #2
 800365e:	d009      	beq.n	8003674 <RCCEx_PLLSAI1_Config+0x74>
 8003660:	e020      	b.n	80036a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003662:	4b60      	ldr	r3, [pc, #384]	@ (80037e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d11d      	bne.n	80036aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003672:	e01a      	b.n	80036aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003674:	4b5b      	ldr	r3, [pc, #364]	@ (80037e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800367c:	2b00      	cmp	r3, #0
 800367e:	d116      	bne.n	80036ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003684:	e013      	b.n	80036ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003686:	4b57      	ldr	r3, [pc, #348]	@ (80037e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10f      	bne.n	80036b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003692:	4b54      	ldr	r3, [pc, #336]	@ (80037e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d109      	bne.n	80036b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036a2:	e006      	b.n	80036b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
      break;
 80036a8:	e004      	b.n	80036b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036aa:	bf00      	nop
 80036ac:	e002      	b.n	80036b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036ae:	bf00      	nop
 80036b0:	e000      	b.n	80036b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10d      	bne.n	80036d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036ba:	4b4a      	ldr	r3, [pc, #296]	@ (80037e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6819      	ldr	r1, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	430b      	orrs	r3, r1
 80036d0:	4944      	ldr	r1, [pc, #272]	@ (80037e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d17d      	bne.n	80037d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036dc:	4b41      	ldr	r3, [pc, #260]	@ (80037e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a40      	ldr	r2, [pc, #256]	@ (80037e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80036e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036e8:	f7fe f964 	bl	80019b4 <HAL_GetTick>
 80036ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036ee:	e009      	b.n	8003704 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036f0:	f7fe f960 	bl	80019b4 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d902      	bls.n	8003704 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	73fb      	strb	r3, [r7, #15]
        break;
 8003702:	e005      	b.n	8003710 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003704:	4b37      	ldr	r3, [pc, #220]	@ (80037e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1ef      	bne.n	80036f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d160      	bne.n	80037d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d111      	bne.n	8003740 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800371c:	4b31      	ldr	r3, [pc, #196]	@ (80037e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003724:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6892      	ldr	r2, [r2, #8]
 800372c:	0211      	lsls	r1, r2, #8
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	68d2      	ldr	r2, [r2, #12]
 8003732:	0912      	lsrs	r2, r2, #4
 8003734:	0452      	lsls	r2, r2, #17
 8003736:	430a      	orrs	r2, r1
 8003738:	492a      	ldr	r1, [pc, #168]	@ (80037e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800373a:	4313      	orrs	r3, r2
 800373c:	610b      	str	r3, [r1, #16]
 800373e:	e027      	b.n	8003790 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d112      	bne.n	800376c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003746:	4b27      	ldr	r3, [pc, #156]	@ (80037e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800374e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6892      	ldr	r2, [r2, #8]
 8003756:	0211      	lsls	r1, r2, #8
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6912      	ldr	r2, [r2, #16]
 800375c:	0852      	lsrs	r2, r2, #1
 800375e:	3a01      	subs	r2, #1
 8003760:	0552      	lsls	r2, r2, #21
 8003762:	430a      	orrs	r2, r1
 8003764:	491f      	ldr	r1, [pc, #124]	@ (80037e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003766:	4313      	orrs	r3, r2
 8003768:	610b      	str	r3, [r1, #16]
 800376a:	e011      	b.n	8003790 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800376c:	4b1d      	ldr	r3, [pc, #116]	@ (80037e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003774:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6892      	ldr	r2, [r2, #8]
 800377c:	0211      	lsls	r1, r2, #8
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6952      	ldr	r2, [r2, #20]
 8003782:	0852      	lsrs	r2, r2, #1
 8003784:	3a01      	subs	r2, #1
 8003786:	0652      	lsls	r2, r2, #25
 8003788:	430a      	orrs	r2, r1
 800378a:	4916      	ldr	r1, [pc, #88]	@ (80037e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800378c:	4313      	orrs	r3, r2
 800378e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003790:	4b14      	ldr	r3, [pc, #80]	@ (80037e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a13      	ldr	r2, [pc, #76]	@ (80037e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003796:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800379a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379c:	f7fe f90a 	bl	80019b4 <HAL_GetTick>
 80037a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037a2:	e009      	b.n	80037b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037a4:	f7fe f906 	bl	80019b4 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d902      	bls.n	80037b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	73fb      	strb	r3, [r7, #15]
          break;
 80037b6:	e005      	b.n	80037c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037b8:	4b0a      	ldr	r3, [pc, #40]	@ (80037e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0ef      	beq.n	80037a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d106      	bne.n	80037d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037ca:	4b06      	ldr	r3, [pc, #24]	@ (80037e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037cc:	691a      	ldr	r2, [r3, #16]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	4904      	ldr	r1, [pc, #16]	@ (80037e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40021000 	.word	0x40021000

080037e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037f6:	4b6a      	ldr	r3, [pc, #424]	@ (80039a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d018      	beq.n	8003834 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003802:	4b67      	ldr	r3, [pc, #412]	@ (80039a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f003 0203 	and.w	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d10d      	bne.n	800382e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
       ||
 8003816:	2b00      	cmp	r3, #0
 8003818:	d009      	beq.n	800382e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800381a:	4b61      	ldr	r3, [pc, #388]	@ (80039a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	091b      	lsrs	r3, r3, #4
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
       ||
 800382a:	429a      	cmp	r2, r3
 800382c:	d047      	beq.n	80038be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
 8003832:	e044      	b.n	80038be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b03      	cmp	r3, #3
 800383a:	d018      	beq.n	800386e <RCCEx_PLLSAI2_Config+0x86>
 800383c:	2b03      	cmp	r3, #3
 800383e:	d825      	bhi.n	800388c <RCCEx_PLLSAI2_Config+0xa4>
 8003840:	2b01      	cmp	r3, #1
 8003842:	d002      	beq.n	800384a <RCCEx_PLLSAI2_Config+0x62>
 8003844:	2b02      	cmp	r3, #2
 8003846:	d009      	beq.n	800385c <RCCEx_PLLSAI2_Config+0x74>
 8003848:	e020      	b.n	800388c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800384a:	4b55      	ldr	r3, [pc, #340]	@ (80039a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d11d      	bne.n	8003892 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800385a:	e01a      	b.n	8003892 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800385c:	4b50      	ldr	r3, [pc, #320]	@ (80039a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003864:	2b00      	cmp	r3, #0
 8003866:	d116      	bne.n	8003896 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800386c:	e013      	b.n	8003896 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800386e:	4b4c      	ldr	r3, [pc, #304]	@ (80039a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10f      	bne.n	800389a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800387a:	4b49      	ldr	r3, [pc, #292]	@ (80039a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800388a:	e006      	b.n	800389a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	73fb      	strb	r3, [r7, #15]
      break;
 8003890:	e004      	b.n	800389c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003892:	bf00      	nop
 8003894:	e002      	b.n	800389c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003896:	bf00      	nop
 8003898:	e000      	b.n	800389c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800389a:	bf00      	nop
    }

    if(status == HAL_OK)
 800389c:	7bfb      	ldrb	r3, [r7, #15]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10d      	bne.n	80038be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038a2:	4b3f      	ldr	r3, [pc, #252]	@ (80039a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6819      	ldr	r1, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	430b      	orrs	r3, r1
 80038b8:	4939      	ldr	r1, [pc, #228]	@ (80039a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038be:	7bfb      	ldrb	r3, [r7, #15]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d167      	bne.n	8003994 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80038c4:	4b36      	ldr	r3, [pc, #216]	@ (80039a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a35      	ldr	r2, [pc, #212]	@ (80039a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d0:	f7fe f870 	bl	80019b4 <HAL_GetTick>
 80038d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038d6:	e009      	b.n	80038ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038d8:	f7fe f86c 	bl	80019b4 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d902      	bls.n	80038ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	73fb      	strb	r3, [r7, #15]
        break;
 80038ea:	e005      	b.n	80038f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038ec:	4b2c      	ldr	r3, [pc, #176]	@ (80039a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1ef      	bne.n	80038d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d14a      	bne.n	8003994 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d111      	bne.n	8003928 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003904:	4b26      	ldr	r3, [pc, #152]	@ (80039a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800390c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6892      	ldr	r2, [r2, #8]
 8003914:	0211      	lsls	r1, r2, #8
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	68d2      	ldr	r2, [r2, #12]
 800391a:	0912      	lsrs	r2, r2, #4
 800391c:	0452      	lsls	r2, r2, #17
 800391e:	430a      	orrs	r2, r1
 8003920:	491f      	ldr	r1, [pc, #124]	@ (80039a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003922:	4313      	orrs	r3, r2
 8003924:	614b      	str	r3, [r1, #20]
 8003926:	e011      	b.n	800394c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003928:	4b1d      	ldr	r3, [pc, #116]	@ (80039a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003930:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6892      	ldr	r2, [r2, #8]
 8003938:	0211      	lsls	r1, r2, #8
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6912      	ldr	r2, [r2, #16]
 800393e:	0852      	lsrs	r2, r2, #1
 8003940:	3a01      	subs	r2, #1
 8003942:	0652      	lsls	r2, r2, #25
 8003944:	430a      	orrs	r2, r1
 8003946:	4916      	ldr	r1, [pc, #88]	@ (80039a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003948:	4313      	orrs	r3, r2
 800394a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800394c:	4b14      	ldr	r3, [pc, #80]	@ (80039a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a13      	ldr	r2, [pc, #76]	@ (80039a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003952:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003956:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003958:	f7fe f82c 	bl	80019b4 <HAL_GetTick>
 800395c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800395e:	e009      	b.n	8003974 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003960:	f7fe f828 	bl	80019b4 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d902      	bls.n	8003974 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	73fb      	strb	r3, [r7, #15]
          break;
 8003972:	e005      	b.n	8003980 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003974:	4b0a      	ldr	r3, [pc, #40]	@ (80039a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0ef      	beq.n	8003960 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003986:	4b06      	ldr	r3, [pc, #24]	@ (80039a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003988:	695a      	ldr	r2, [r3, #20]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	4904      	ldr	r1, [pc, #16]	@ (80039a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003990:	4313      	orrs	r3, r2
 8003992:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003994:	7bfb      	ldrb	r3, [r7, #15]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40021000 	.word	0x40021000

080039a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e040      	b.n	8003a38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d106      	bne.n	80039cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7fd fdbe 	bl	8001548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2224      	movs	r2, #36	@ 0x24
 80039d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0201 	bic.w	r2, r2, #1
 80039e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fbd6 	bl	800419c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f91b 	bl	8003c2c <UART_SetConfig>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e01b      	b.n	8003a38 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0201 	orr.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fc55 	bl	80042e0 <UART_CheckIdleState>
 8003a36:	4603      	mov	r3, r0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08a      	sub	sp, #40	@ 0x28
 8003a44:	af02      	add	r7, sp, #8
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	d177      	bne.n	8003b48 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <HAL_UART_Transmit+0x24>
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e070      	b.n	8003b4a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2221      	movs	r2, #33	@ 0x21
 8003a74:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a76:	f7fd ff9d 	bl	80019b4 <HAL_GetTick>
 8003a7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	88fa      	ldrh	r2, [r7, #6]
 8003a80:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	88fa      	ldrh	r2, [r7, #6]
 8003a88:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a94:	d108      	bne.n	8003aa8 <HAL_UART_Transmit+0x68>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d104      	bne.n	8003aa8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	e003      	b.n	8003ab0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ab0:	e02f      	b.n	8003b12 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2180      	movs	r1, #128	@ 0x80
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 fcb7 	bl	8004430 <UART_WaitOnFlagUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d004      	beq.n	8003ad2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2220      	movs	r2, #32
 8003acc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e03b      	b.n	8003b4a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10b      	bne.n	8003af0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	881a      	ldrh	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ae4:	b292      	uxth	r2, r2
 8003ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	3302      	adds	r3, #2
 8003aec:	61bb      	str	r3, [r7, #24]
 8003aee:	e007      	b.n	8003b00 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	781a      	ldrb	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	3301      	adds	r3, #1
 8003afe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1c9      	bne.n	8003ab2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2200      	movs	r2, #0
 8003b26:	2140      	movs	r1, #64	@ 0x40
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 fc81 	bl	8004430 <UART_WaitOnFlagUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d004      	beq.n	8003b3e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2220      	movs	r2, #32
 8003b38:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e005      	b.n	8003b4a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2220      	movs	r2, #32
 8003b42:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003b44:	2300      	movs	r3, #0
 8003b46:	e000      	b.n	8003b4a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003b48:	2302      	movs	r3, #2
  }
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3720      	adds	r7, #32
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08a      	sub	sp, #40	@ 0x28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b68:	2b20      	cmp	r3, #32
 8003b6a:	d137      	bne.n	8003bdc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <HAL_UART_Receive_DMA+0x24>
 8003b72:	88fb      	ldrh	r3, [r7, #6]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e030      	b.n	8003bde <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a18      	ldr	r2, [pc, #96]	@ (8003be8 <HAL_UART_Receive_DMA+0x94>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d01f      	beq.n	8003bcc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d018      	beq.n	8003bcc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	e853 3f00 	ldrex	r3, [r3]
 8003ba6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb8:	623b      	str	r3, [r7, #32]
 8003bba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbc:	69f9      	ldr	r1, [r7, #28]
 8003bbe:	6a3a      	ldr	r2, [r7, #32]
 8003bc0:	e841 2300 	strex	r3, r2, [r1]
 8003bc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e6      	bne.n	8003b9a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003bcc:	88fb      	ldrh	r3, [r7, #6]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	68b9      	ldr	r1, [r7, #8]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 fc9a 	bl	800450c <UART_Start_Receive_DMA>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	e000      	b.n	8003bde <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bdc:	2302      	movs	r3, #2
  }
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3728      	adds	r7, #40	@ 0x28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40008000 	.word	0x40008000

08003bec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c30:	b08a      	sub	sp, #40	@ 0x28
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	431a      	orrs	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	4ba4      	ldr	r3, [pc, #656]	@ (8003eec <UART_SetConfig+0x2c0>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	6812      	ldr	r2, [r2, #0]
 8003c62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c64:	430b      	orrs	r3, r1
 8003c66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a99      	ldr	r2, [pc, #612]	@ (8003ef0 <UART_SetConfig+0x2c4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d004      	beq.n	8003c98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c94:	4313      	orrs	r3, r2
 8003c96:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a90      	ldr	r2, [pc, #576]	@ (8003ef4 <UART_SetConfig+0x2c8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d126      	bne.n	8003d04 <UART_SetConfig+0xd8>
 8003cb6:	4b90      	ldr	r3, [pc, #576]	@ (8003ef8 <UART_SetConfig+0x2cc>)
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cbc:	f003 0303 	and.w	r3, r3, #3
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d81b      	bhi.n	8003cfc <UART_SetConfig+0xd0>
 8003cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003ccc <UART_SetConfig+0xa0>)
 8003cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cca:	bf00      	nop
 8003ccc:	08003cdd 	.word	0x08003cdd
 8003cd0:	08003ced 	.word	0x08003ced
 8003cd4:	08003ce5 	.word	0x08003ce5
 8003cd8:	08003cf5 	.word	0x08003cf5
 8003cdc:	2301      	movs	r3, #1
 8003cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ce2:	e116      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cea:	e112      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003cec:	2304      	movs	r3, #4
 8003cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cf2:	e10e      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003cf4:	2308      	movs	r3, #8
 8003cf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cfa:	e10a      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003cfc:	2310      	movs	r3, #16
 8003cfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d02:	e106      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a7c      	ldr	r2, [pc, #496]	@ (8003efc <UART_SetConfig+0x2d0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d138      	bne.n	8003d80 <UART_SetConfig+0x154>
 8003d0e:	4b7a      	ldr	r3, [pc, #488]	@ (8003ef8 <UART_SetConfig+0x2cc>)
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d14:	f003 030c 	and.w	r3, r3, #12
 8003d18:	2b0c      	cmp	r3, #12
 8003d1a:	d82d      	bhi.n	8003d78 <UART_SetConfig+0x14c>
 8003d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d24 <UART_SetConfig+0xf8>)
 8003d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d22:	bf00      	nop
 8003d24:	08003d59 	.word	0x08003d59
 8003d28:	08003d79 	.word	0x08003d79
 8003d2c:	08003d79 	.word	0x08003d79
 8003d30:	08003d79 	.word	0x08003d79
 8003d34:	08003d69 	.word	0x08003d69
 8003d38:	08003d79 	.word	0x08003d79
 8003d3c:	08003d79 	.word	0x08003d79
 8003d40:	08003d79 	.word	0x08003d79
 8003d44:	08003d61 	.word	0x08003d61
 8003d48:	08003d79 	.word	0x08003d79
 8003d4c:	08003d79 	.word	0x08003d79
 8003d50:	08003d79 	.word	0x08003d79
 8003d54:	08003d71 	.word	0x08003d71
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d5e:	e0d8      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003d60:	2302      	movs	r3, #2
 8003d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d66:	e0d4      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003d68:	2304      	movs	r3, #4
 8003d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d6e:	e0d0      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003d70:	2308      	movs	r3, #8
 8003d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d76:	e0cc      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003d78:	2310      	movs	r3, #16
 8003d7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d7e:	e0c8      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a5e      	ldr	r2, [pc, #376]	@ (8003f00 <UART_SetConfig+0x2d4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d125      	bne.n	8003dd6 <UART_SetConfig+0x1aa>
 8003d8a:	4b5b      	ldr	r3, [pc, #364]	@ (8003ef8 <UART_SetConfig+0x2cc>)
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d90:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003d94:	2b30      	cmp	r3, #48	@ 0x30
 8003d96:	d016      	beq.n	8003dc6 <UART_SetConfig+0x19a>
 8003d98:	2b30      	cmp	r3, #48	@ 0x30
 8003d9a:	d818      	bhi.n	8003dce <UART_SetConfig+0x1a2>
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	d00a      	beq.n	8003db6 <UART_SetConfig+0x18a>
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d814      	bhi.n	8003dce <UART_SetConfig+0x1a2>
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <UART_SetConfig+0x182>
 8003da8:	2b10      	cmp	r3, #16
 8003daa:	d008      	beq.n	8003dbe <UART_SetConfig+0x192>
 8003dac:	e00f      	b.n	8003dce <UART_SetConfig+0x1a2>
 8003dae:	2300      	movs	r3, #0
 8003db0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003db4:	e0ad      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003db6:	2302      	movs	r3, #2
 8003db8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dbc:	e0a9      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003dbe:	2304      	movs	r3, #4
 8003dc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dc4:	e0a5      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003dc6:	2308      	movs	r3, #8
 8003dc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dcc:	e0a1      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003dce:	2310      	movs	r3, #16
 8003dd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dd4:	e09d      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a4a      	ldr	r2, [pc, #296]	@ (8003f04 <UART_SetConfig+0x2d8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d125      	bne.n	8003e2c <UART_SetConfig+0x200>
 8003de0:	4b45      	ldr	r3, [pc, #276]	@ (8003ef8 <UART_SetConfig+0x2cc>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003dea:	2bc0      	cmp	r3, #192	@ 0xc0
 8003dec:	d016      	beq.n	8003e1c <UART_SetConfig+0x1f0>
 8003dee:	2bc0      	cmp	r3, #192	@ 0xc0
 8003df0:	d818      	bhi.n	8003e24 <UART_SetConfig+0x1f8>
 8003df2:	2b80      	cmp	r3, #128	@ 0x80
 8003df4:	d00a      	beq.n	8003e0c <UART_SetConfig+0x1e0>
 8003df6:	2b80      	cmp	r3, #128	@ 0x80
 8003df8:	d814      	bhi.n	8003e24 <UART_SetConfig+0x1f8>
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <UART_SetConfig+0x1d8>
 8003dfe:	2b40      	cmp	r3, #64	@ 0x40
 8003e00:	d008      	beq.n	8003e14 <UART_SetConfig+0x1e8>
 8003e02:	e00f      	b.n	8003e24 <UART_SetConfig+0x1f8>
 8003e04:	2300      	movs	r3, #0
 8003e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e0a:	e082      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e12:	e07e      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003e14:	2304      	movs	r3, #4
 8003e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e1a:	e07a      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003e1c:	2308      	movs	r3, #8
 8003e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e22:	e076      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003e24:	2310      	movs	r3, #16
 8003e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e2a:	e072      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a35      	ldr	r2, [pc, #212]	@ (8003f08 <UART_SetConfig+0x2dc>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d12a      	bne.n	8003e8c <UART_SetConfig+0x260>
 8003e36:	4b30      	ldr	r3, [pc, #192]	@ (8003ef8 <UART_SetConfig+0x2cc>)
 8003e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e44:	d01a      	beq.n	8003e7c <UART_SetConfig+0x250>
 8003e46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e4a:	d81b      	bhi.n	8003e84 <UART_SetConfig+0x258>
 8003e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e50:	d00c      	beq.n	8003e6c <UART_SetConfig+0x240>
 8003e52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e56:	d815      	bhi.n	8003e84 <UART_SetConfig+0x258>
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <UART_SetConfig+0x238>
 8003e5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e60:	d008      	beq.n	8003e74 <UART_SetConfig+0x248>
 8003e62:	e00f      	b.n	8003e84 <UART_SetConfig+0x258>
 8003e64:	2300      	movs	r3, #0
 8003e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e6a:	e052      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e72:	e04e      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003e74:	2304      	movs	r3, #4
 8003e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e7a:	e04a      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003e7c:	2308      	movs	r3, #8
 8003e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e82:	e046      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003e84:	2310      	movs	r3, #16
 8003e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e8a:	e042      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a17      	ldr	r2, [pc, #92]	@ (8003ef0 <UART_SetConfig+0x2c4>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d13a      	bne.n	8003f0c <UART_SetConfig+0x2e0>
 8003e96:	4b18      	ldr	r3, [pc, #96]	@ (8003ef8 <UART_SetConfig+0x2cc>)
 8003e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ea0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ea4:	d01a      	beq.n	8003edc <UART_SetConfig+0x2b0>
 8003ea6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003eaa:	d81b      	bhi.n	8003ee4 <UART_SetConfig+0x2b8>
 8003eac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eb0:	d00c      	beq.n	8003ecc <UART_SetConfig+0x2a0>
 8003eb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eb6:	d815      	bhi.n	8003ee4 <UART_SetConfig+0x2b8>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <UART_SetConfig+0x298>
 8003ebc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ec0:	d008      	beq.n	8003ed4 <UART_SetConfig+0x2a8>
 8003ec2:	e00f      	b.n	8003ee4 <UART_SetConfig+0x2b8>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eca:	e022      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ed2:	e01e      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003ed4:	2304      	movs	r3, #4
 8003ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eda:	e01a      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003edc:	2308      	movs	r3, #8
 8003ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ee2:	e016      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003ee4:	2310      	movs	r3, #16
 8003ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eea:	e012      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003eec:	efff69f3 	.word	0xefff69f3
 8003ef0:	40008000 	.word	0x40008000
 8003ef4:	40013800 	.word	0x40013800
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40004400 	.word	0x40004400
 8003f00:	40004800 	.word	0x40004800
 8003f04:	40004c00 	.word	0x40004c00
 8003f08:	40005000 	.word	0x40005000
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a9f      	ldr	r2, [pc, #636]	@ (8004194 <UART_SetConfig+0x568>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d17a      	bne.n	8004012 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d824      	bhi.n	8003f6e <UART_SetConfig+0x342>
 8003f24:	a201      	add	r2, pc, #4	@ (adr r2, 8003f2c <UART_SetConfig+0x300>)
 8003f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2a:	bf00      	nop
 8003f2c:	08003f51 	.word	0x08003f51
 8003f30:	08003f6f 	.word	0x08003f6f
 8003f34:	08003f59 	.word	0x08003f59
 8003f38:	08003f6f 	.word	0x08003f6f
 8003f3c:	08003f5f 	.word	0x08003f5f
 8003f40:	08003f6f 	.word	0x08003f6f
 8003f44:	08003f6f 	.word	0x08003f6f
 8003f48:	08003f6f 	.word	0x08003f6f
 8003f4c:	08003f67 	.word	0x08003f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f50:	f7fe ffe0 	bl	8002f14 <HAL_RCC_GetPCLK1Freq>
 8003f54:	61f8      	str	r0, [r7, #28]
        break;
 8003f56:	e010      	b.n	8003f7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f58:	4b8f      	ldr	r3, [pc, #572]	@ (8004198 <UART_SetConfig+0x56c>)
 8003f5a:	61fb      	str	r3, [r7, #28]
        break;
 8003f5c:	e00d      	b.n	8003f7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f5e:	f7fe ff41 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 8003f62:	61f8      	str	r0, [r7, #28]
        break;
 8003f64:	e009      	b.n	8003f7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f6a:	61fb      	str	r3, [r7, #28]
        break;
 8003f6c:	e005      	b.n	8003f7a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 80fb 	beq.w	8004178 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	4413      	add	r3, r2
 8003f8c:	69fa      	ldr	r2, [r7, #28]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d305      	bcc.n	8003f9e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d903      	bls.n	8003fa6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003fa4:	e0e8      	b.n	8004178 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	461c      	mov	r4, r3
 8003fac:	4615      	mov	r5, r2
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	022b      	lsls	r3, r5, #8
 8003fb8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003fbc:	0222      	lsls	r2, r4, #8
 8003fbe:	68f9      	ldr	r1, [r7, #12]
 8003fc0:	6849      	ldr	r1, [r1, #4]
 8003fc2:	0849      	lsrs	r1, r1, #1
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	4688      	mov	r8, r1
 8003fc8:	4681      	mov	r9, r0
 8003fca:	eb12 0a08 	adds.w	sl, r2, r8
 8003fce:	eb43 0b09 	adc.w	fp, r3, r9
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	603b      	str	r3, [r7, #0]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fe0:	4650      	mov	r0, sl
 8003fe2:	4659      	mov	r1, fp
 8003fe4:	f7fc fe00 	bl	8000be8 <__aeabi_uldivmod>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4613      	mov	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ff6:	d308      	bcc.n	800400a <UART_SetConfig+0x3de>
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ffe:	d204      	bcs.n	800400a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	60da      	str	r2, [r3, #12]
 8004008:	e0b6      	b.n	8004178 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004010:	e0b2      	b.n	8004178 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800401a:	d15e      	bne.n	80040da <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800401c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004020:	2b08      	cmp	r3, #8
 8004022:	d828      	bhi.n	8004076 <UART_SetConfig+0x44a>
 8004024:	a201      	add	r2, pc, #4	@ (adr r2, 800402c <UART_SetConfig+0x400>)
 8004026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402a:	bf00      	nop
 800402c:	08004051 	.word	0x08004051
 8004030:	08004059 	.word	0x08004059
 8004034:	08004061 	.word	0x08004061
 8004038:	08004077 	.word	0x08004077
 800403c:	08004067 	.word	0x08004067
 8004040:	08004077 	.word	0x08004077
 8004044:	08004077 	.word	0x08004077
 8004048:	08004077 	.word	0x08004077
 800404c:	0800406f 	.word	0x0800406f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004050:	f7fe ff60 	bl	8002f14 <HAL_RCC_GetPCLK1Freq>
 8004054:	61f8      	str	r0, [r7, #28]
        break;
 8004056:	e014      	b.n	8004082 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004058:	f7fe ff72 	bl	8002f40 <HAL_RCC_GetPCLK2Freq>
 800405c:	61f8      	str	r0, [r7, #28]
        break;
 800405e:	e010      	b.n	8004082 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004060:	4b4d      	ldr	r3, [pc, #308]	@ (8004198 <UART_SetConfig+0x56c>)
 8004062:	61fb      	str	r3, [r7, #28]
        break;
 8004064:	e00d      	b.n	8004082 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004066:	f7fe febd 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 800406a:	61f8      	str	r0, [r7, #28]
        break;
 800406c:	e009      	b.n	8004082 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800406e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004072:	61fb      	str	r3, [r7, #28]
        break;
 8004074:	e005      	b.n	8004082 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004076:	2300      	movs	r3, #0
 8004078:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004080:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d077      	beq.n	8004178 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	005a      	lsls	r2, r3, #1
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	085b      	lsrs	r3, r3, #1
 8004092:	441a      	add	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	fbb2 f3f3 	udiv	r3, r2, r3
 800409c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	2b0f      	cmp	r3, #15
 80040a2:	d916      	bls.n	80040d2 <UART_SetConfig+0x4a6>
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040aa:	d212      	bcs.n	80040d2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	f023 030f 	bic.w	r3, r3, #15
 80040b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	085b      	lsrs	r3, r3, #1
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	8afb      	ldrh	r3, [r7, #22]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	8afa      	ldrh	r2, [r7, #22]
 80040ce:	60da      	str	r2, [r3, #12]
 80040d0:	e052      	b.n	8004178 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80040d8:	e04e      	b.n	8004178 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d827      	bhi.n	8004132 <UART_SetConfig+0x506>
 80040e2:	a201      	add	r2, pc, #4	@ (adr r2, 80040e8 <UART_SetConfig+0x4bc>)
 80040e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e8:	0800410d 	.word	0x0800410d
 80040ec:	08004115 	.word	0x08004115
 80040f0:	0800411d 	.word	0x0800411d
 80040f4:	08004133 	.word	0x08004133
 80040f8:	08004123 	.word	0x08004123
 80040fc:	08004133 	.word	0x08004133
 8004100:	08004133 	.word	0x08004133
 8004104:	08004133 	.word	0x08004133
 8004108:	0800412b 	.word	0x0800412b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800410c:	f7fe ff02 	bl	8002f14 <HAL_RCC_GetPCLK1Freq>
 8004110:	61f8      	str	r0, [r7, #28]
        break;
 8004112:	e014      	b.n	800413e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004114:	f7fe ff14 	bl	8002f40 <HAL_RCC_GetPCLK2Freq>
 8004118:	61f8      	str	r0, [r7, #28]
        break;
 800411a:	e010      	b.n	800413e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800411c:	4b1e      	ldr	r3, [pc, #120]	@ (8004198 <UART_SetConfig+0x56c>)
 800411e:	61fb      	str	r3, [r7, #28]
        break;
 8004120:	e00d      	b.n	800413e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004122:	f7fe fe5f 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 8004126:	61f8      	str	r0, [r7, #28]
        break;
 8004128:	e009      	b.n	800413e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800412a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800412e:	61fb      	str	r3, [r7, #28]
        break;
 8004130:	e005      	b.n	800413e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004132:	2300      	movs	r3, #0
 8004134:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800413c:	bf00      	nop
    }

    if (pclk != 0U)
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d019      	beq.n	8004178 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	085a      	lsrs	r2, r3, #1
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	441a      	add	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	fbb2 f3f3 	udiv	r3, r2, r3
 8004156:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2b0f      	cmp	r3, #15
 800415c:	d909      	bls.n	8004172 <UART_SetConfig+0x546>
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004164:	d205      	bcs.n	8004172 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60da      	str	r2, [r3, #12]
 8004170:	e002      	b.n	8004178 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004184:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004188:	4618      	mov	r0, r3
 800418a:	3728      	adds	r7, #40	@ 0x28
 800418c:	46bd      	mov	sp, r7
 800418e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004192:	bf00      	nop
 8004194:	40008000 	.word	0x40008000
 8004198:	00f42400 	.word	0x00f42400

0800419c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004278:	2b00      	cmp	r3, #0
 800427a:	d01a      	beq.n	80042b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004296:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800429a:	d10a      	bne.n	80042b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	605a      	str	r2, [r3, #4]
  }
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b098      	sub	sp, #96	@ 0x60
 80042e4:	af02      	add	r7, sp, #8
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042f0:	f7fd fb60 	bl	80019b4 <HAL_GetTick>
 80042f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b08      	cmp	r3, #8
 8004302:	d12e      	bne.n	8004362 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004304:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800430c:	2200      	movs	r2, #0
 800430e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f88c 	bl	8004430 <UART_WaitOnFlagUntilTimeout>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d021      	beq.n	8004362 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004326:	e853 3f00 	ldrex	r3, [r3]
 800432a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800432c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800432e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004332:	653b      	str	r3, [r7, #80]	@ 0x50
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800433c:	647b      	str	r3, [r7, #68]	@ 0x44
 800433e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004340:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004342:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004344:	e841 2300 	strex	r3, r2, [r1]
 8004348:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800434a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1e6      	bne.n	800431e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e062      	b.n	8004428 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b04      	cmp	r3, #4
 800436e:	d149      	bne.n	8004404 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004370:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004378:	2200      	movs	r2, #0
 800437a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f856 	bl	8004430 <UART_WaitOnFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d03c      	beq.n	8004404 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004392:	e853 3f00 	ldrex	r3, [r3]
 8004396:	623b      	str	r3, [r7, #32]
   return(result);
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800439e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80043aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043b0:	e841 2300 	strex	r3, r2, [r1]
 80043b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e6      	bne.n	800438a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3308      	adds	r3, #8
 80043c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	e853 3f00 	ldrex	r3, [r3]
 80043ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0301 	bic.w	r3, r3, #1
 80043d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3308      	adds	r3, #8
 80043da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043dc:	61fa      	str	r2, [r7, #28]
 80043de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e0:	69b9      	ldr	r1, [r7, #24]
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	e841 2300 	strex	r3, r2, [r1]
 80043e8:	617b      	str	r3, [r7, #20]
   return(result);
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e5      	bne.n	80043bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e011      	b.n	8004428 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2220      	movs	r2, #32
 8004408:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2220      	movs	r2, #32
 800440e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3758      	adds	r7, #88	@ 0x58
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	603b      	str	r3, [r7, #0]
 800443c:	4613      	mov	r3, r2
 800443e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004440:	e04f      	b.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004448:	d04b      	beq.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444a:	f7fd fab3 	bl	80019b4 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	429a      	cmp	r2, r3
 8004458:	d302      	bcc.n	8004460 <UART_WaitOnFlagUntilTimeout+0x30>
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e04e      	b.n	8004502 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	d037      	beq.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2b80      	cmp	r3, #128	@ 0x80
 8004476:	d034      	beq.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b40      	cmp	r3, #64	@ 0x40
 800447c:	d031      	beq.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b08      	cmp	r3, #8
 800448a:	d110      	bne.n	80044ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2208      	movs	r2, #8
 8004492:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 f8ff 	bl	8004698 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2208      	movs	r2, #8
 800449e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e029      	b.n	8004502 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044bc:	d111      	bne.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 f8e5 	bl	8004698 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e00f      	b.n	8004502 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69da      	ldr	r2, [r3, #28]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	4013      	ands	r3, r2
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	bf0c      	ite	eq
 80044f2:	2301      	moveq	r3, #1
 80044f4:	2300      	movne	r3, #0
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	461a      	mov	r2, r3
 80044fa:	79fb      	ldrb	r3, [r7, #7]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d0a0      	beq.n	8004442 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
	...

0800450c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b096      	sub	sp, #88	@ 0x58
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	4613      	mov	r3, r2
 8004518:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	88fa      	ldrh	r2, [r7, #6]
 8004524:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2222      	movs	r2, #34	@ 0x22
 8004534:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800453c:	2b00      	cmp	r3, #0
 800453e:	d028      	beq.n	8004592 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004544:	4a3e      	ldr	r2, [pc, #248]	@ (8004640 <UART_Start_Receive_DMA+0x134>)
 8004546:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800454c:	4a3d      	ldr	r2, [pc, #244]	@ (8004644 <UART_Start_Receive_DMA+0x138>)
 800454e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004554:	4a3c      	ldr	r2, [pc, #240]	@ (8004648 <UART_Start_Receive_DMA+0x13c>)
 8004556:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800455c:	2200      	movs	r2, #0
 800455e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3324      	adds	r3, #36	@ 0x24
 800456a:	4619      	mov	r1, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004570:	461a      	mov	r2, r3
 8004572:	88fb      	ldrh	r3, [r7, #6]
 8004574:	f7fd fbf4 	bl	8001d60 <HAL_DMA_Start_IT>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d009      	beq.n	8004592 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2210      	movs	r2, #16
 8004582:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2220      	movs	r2, #32
 800458a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e051      	b.n	8004636 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d018      	beq.n	80045cc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045a2:	e853 3f00 	ldrex	r3, [r3]
 80045a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	461a      	mov	r2, r3
 80045b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045ba:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80045be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045c0:	e841 2300 	strex	r3, r2, [r1]
 80045c4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80045c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1e6      	bne.n	800459a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3308      	adds	r3, #8
 80045d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d6:	e853 3f00 	ldrex	r3, [r3]
 80045da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045de:	f043 0301 	orr.w	r3, r3, #1
 80045e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3308      	adds	r3, #8
 80045ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80045ec:	637a      	str	r2, [r7, #52]	@ 0x34
 80045ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80045f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045f4:	e841 2300 	strex	r3, r2, [r1]
 80045f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80045fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1e5      	bne.n	80045cc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	3308      	adds	r3, #8
 8004606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	e853 3f00 	ldrex	r3, [r3]
 800460e:	613b      	str	r3, [r7, #16]
   return(result);
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004616:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3308      	adds	r3, #8
 800461e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004620:	623a      	str	r2, [r7, #32]
 8004622:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	69f9      	ldr	r1, [r7, #28]
 8004626:	6a3a      	ldr	r2, [r7, #32]
 8004628:	e841 2300 	strex	r3, r2, [r1]
 800462c:	61bb      	str	r3, [r7, #24]
   return(result);
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1e5      	bne.n	8004600 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3758      	adds	r7, #88	@ 0x58
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	08004761 	.word	0x08004761
 8004644:	0800488d 	.word	0x0800488d
 8004648:	080048cb 	.word	0x080048cb

0800464c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800464c:	b480      	push	{r7}
 800464e:	b089      	sub	sp, #36	@ 0x24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	e853 3f00 	ldrex	r3, [r3]
 8004660:	60bb      	str	r3, [r7, #8]
   return(result);
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004668:	61fb      	str	r3, [r7, #28]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	61bb      	str	r3, [r7, #24]
 8004674:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004676:	6979      	ldr	r1, [r7, #20]
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	e841 2300 	strex	r3, r2, [r1]
 800467e:	613b      	str	r3, [r7, #16]
   return(result);
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1e6      	bne.n	8004654 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2220      	movs	r2, #32
 800468a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800468c:	bf00      	nop
 800468e:	3724      	adds	r7, #36	@ 0x24
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004698:	b480      	push	{r7}
 800469a:	b095      	sub	sp, #84	@ 0x54
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a8:	e853 3f00 	ldrex	r3, [r3]
 80046ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046be:	643b      	str	r3, [r7, #64]	@ 0x40
 80046c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046c6:	e841 2300 	strex	r3, r2, [r1]
 80046ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1e6      	bne.n	80046a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3308      	adds	r3, #8
 80046d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	e853 3f00 	ldrex	r3, [r3]
 80046e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	f023 0301 	bic.w	r3, r3, #1
 80046e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3308      	adds	r3, #8
 80046f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046fa:	e841 2300 	strex	r3, r2, [r1]
 80046fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1e5      	bne.n	80046d2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800470a:	2b01      	cmp	r3, #1
 800470c:	d118      	bne.n	8004740 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	e853 3f00 	ldrex	r3, [r3]
 800471a:	60bb      	str	r3, [r7, #8]
   return(result);
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f023 0310 	bic.w	r3, r3, #16
 8004722:	647b      	str	r3, [r7, #68]	@ 0x44
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	461a      	mov	r2, r3
 800472a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800472c:	61bb      	str	r3, [r7, #24]
 800472e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004730:	6979      	ldr	r1, [r7, #20]
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	e841 2300 	strex	r3, r2, [r1]
 8004738:	613b      	str	r3, [r7, #16]
   return(result);
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1e6      	bne.n	800470e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004754:	bf00      	nop
 8004756:	3754      	adds	r7, #84	@ 0x54
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b09c      	sub	sp, #112	@ 0x70
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0320 	and.w	r3, r3, #32
 8004778:	2b00      	cmp	r3, #0
 800477a:	d171      	bne.n	8004860 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800477c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800477e:	2200      	movs	r2, #0
 8004780:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004784:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800478c:	e853 3f00 	ldrex	r3, [r3]
 8004790:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004798:	66bb      	str	r3, [r7, #104]	@ 0x68
 800479a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80047a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80047aa:	e841 2300 	strex	r3, r2, [r1]
 80047ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80047b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1e6      	bne.n	8004784 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3308      	adds	r3, #8
 80047bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c0:	e853 3f00 	ldrex	r3, [r3]
 80047c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047c8:	f023 0301 	bic.w	r3, r3, #1
 80047cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80047ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3308      	adds	r3, #8
 80047d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80047d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80047d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047de:	e841 2300 	strex	r3, r2, [r1]
 80047e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1e5      	bne.n	80047b6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3308      	adds	r3, #8
 80047f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	e853 3f00 	ldrex	r3, [r3]
 80047f8:	623b      	str	r3, [r7, #32]
   return(result);
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004800:	663b      	str	r3, [r7, #96]	@ 0x60
 8004802:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	3308      	adds	r3, #8
 8004808:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800480a:	633a      	str	r2, [r7, #48]	@ 0x30
 800480c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004812:	e841 2300 	strex	r3, r2, [r1]
 8004816:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1e5      	bne.n	80047ea <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800481e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004820:	2220      	movs	r2, #32
 8004822:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004826:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800482a:	2b01      	cmp	r3, #1
 800482c:	d118      	bne.n	8004860 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800482e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	e853 3f00 	ldrex	r3, [r3]
 800483a:	60fb      	str	r3, [r7, #12]
   return(result);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0310 	bic.w	r3, r3, #16
 8004842:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004844:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	461a      	mov	r2, r3
 800484a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800484c:	61fb      	str	r3, [r7, #28]
 800484e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	69b9      	ldr	r1, [r7, #24]
 8004852:	69fa      	ldr	r2, [r7, #28]
 8004854:	e841 2300 	strex	r3, r2, [r1]
 8004858:	617b      	str	r3, [r7, #20]
   return(result);
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e6      	bne.n	800482e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004860:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004862:	2200      	movs	r2, #0
 8004864:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004866:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800486a:	2b01      	cmp	r3, #1
 800486c:	d107      	bne.n	800487e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800486e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004870:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004874:	4619      	mov	r1, r3
 8004876:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004878:	f7ff f9cc 	bl	8003c14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800487c:	e002      	b.n	8004884 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800487e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004880:	f7fc fbae 	bl	8000fe0 <HAL_UART_RxCpltCallback>
}
 8004884:	bf00      	nop
 8004886:	3770      	adds	r7, #112	@ 0x70
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004898:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2201      	movs	r2, #1
 800489e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d109      	bne.n	80048bc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80048ae:	085b      	lsrs	r3, r3, #1
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	4619      	mov	r1, r3
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f7ff f9ad 	bl	8003c14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048ba:	e002      	b.n	80048c2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f7ff f995 	bl	8003bec <HAL_UART_RxHalfCpltCallback>
}
 80048c2:	bf00      	nop
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b086      	sub	sp, #24
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048dc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048e4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048f0:	2b80      	cmp	r3, #128	@ 0x80
 80048f2:	d109      	bne.n	8004908 <UART_DMAError+0x3e>
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	2b21      	cmp	r3, #33	@ 0x21
 80048f8:	d106      	bne.n	8004908 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8004902:	6978      	ldr	r0, [r7, #20]
 8004904:	f7ff fea2 	bl	800464c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004912:	2b40      	cmp	r3, #64	@ 0x40
 8004914:	d109      	bne.n	800492a <UART_DMAError+0x60>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b22      	cmp	r3, #34	@ 0x22
 800491a:	d106      	bne.n	800492a <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	2200      	movs	r2, #0
 8004920:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004924:	6978      	ldr	r0, [r7, #20]
 8004926:	f7ff feb7 	bl	8004698 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004930:	f043 0210 	orr.w	r2, r3, #16
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800493a:	6978      	ldr	r0, [r7, #20]
 800493c:	f7ff f960 	bl	8003c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004940:	bf00      	nop
 8004942:	3718      	adds	r7, #24
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <__cvt>:
 8004948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800494c:	ec57 6b10 	vmov	r6, r7, d0
 8004950:	2f00      	cmp	r7, #0
 8004952:	460c      	mov	r4, r1
 8004954:	4619      	mov	r1, r3
 8004956:	463b      	mov	r3, r7
 8004958:	bfbb      	ittet	lt
 800495a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800495e:	461f      	movlt	r7, r3
 8004960:	2300      	movge	r3, #0
 8004962:	232d      	movlt	r3, #45	@ 0x2d
 8004964:	700b      	strb	r3, [r1, #0]
 8004966:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004968:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800496c:	4691      	mov	r9, r2
 800496e:	f023 0820 	bic.w	r8, r3, #32
 8004972:	bfbc      	itt	lt
 8004974:	4632      	movlt	r2, r6
 8004976:	4616      	movlt	r6, r2
 8004978:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800497c:	d005      	beq.n	800498a <__cvt+0x42>
 800497e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004982:	d100      	bne.n	8004986 <__cvt+0x3e>
 8004984:	3401      	adds	r4, #1
 8004986:	2102      	movs	r1, #2
 8004988:	e000      	b.n	800498c <__cvt+0x44>
 800498a:	2103      	movs	r1, #3
 800498c:	ab03      	add	r3, sp, #12
 800498e:	9301      	str	r3, [sp, #4]
 8004990:	ab02      	add	r3, sp, #8
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	ec47 6b10 	vmov	d0, r6, r7
 8004998:	4653      	mov	r3, sl
 800499a:	4622      	mov	r2, r4
 800499c:	f000 fe88 	bl	80056b0 <_dtoa_r>
 80049a0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80049a4:	4605      	mov	r5, r0
 80049a6:	d119      	bne.n	80049dc <__cvt+0x94>
 80049a8:	f019 0f01 	tst.w	r9, #1
 80049ac:	d00e      	beq.n	80049cc <__cvt+0x84>
 80049ae:	eb00 0904 	add.w	r9, r0, r4
 80049b2:	2200      	movs	r2, #0
 80049b4:	2300      	movs	r3, #0
 80049b6:	4630      	mov	r0, r6
 80049b8:	4639      	mov	r1, r7
 80049ba:	f7fc f885 	bl	8000ac8 <__aeabi_dcmpeq>
 80049be:	b108      	cbz	r0, 80049c4 <__cvt+0x7c>
 80049c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80049c4:	2230      	movs	r2, #48	@ 0x30
 80049c6:	9b03      	ldr	r3, [sp, #12]
 80049c8:	454b      	cmp	r3, r9
 80049ca:	d31e      	bcc.n	8004a0a <__cvt+0xc2>
 80049cc:	9b03      	ldr	r3, [sp, #12]
 80049ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80049d0:	1b5b      	subs	r3, r3, r5
 80049d2:	4628      	mov	r0, r5
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	b004      	add	sp, #16
 80049d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80049e0:	eb00 0904 	add.w	r9, r0, r4
 80049e4:	d1e5      	bne.n	80049b2 <__cvt+0x6a>
 80049e6:	7803      	ldrb	r3, [r0, #0]
 80049e8:	2b30      	cmp	r3, #48	@ 0x30
 80049ea:	d10a      	bne.n	8004a02 <__cvt+0xba>
 80049ec:	2200      	movs	r2, #0
 80049ee:	2300      	movs	r3, #0
 80049f0:	4630      	mov	r0, r6
 80049f2:	4639      	mov	r1, r7
 80049f4:	f7fc f868 	bl	8000ac8 <__aeabi_dcmpeq>
 80049f8:	b918      	cbnz	r0, 8004a02 <__cvt+0xba>
 80049fa:	f1c4 0401 	rsb	r4, r4, #1
 80049fe:	f8ca 4000 	str.w	r4, [sl]
 8004a02:	f8da 3000 	ldr.w	r3, [sl]
 8004a06:	4499      	add	r9, r3
 8004a08:	e7d3      	b.n	80049b2 <__cvt+0x6a>
 8004a0a:	1c59      	adds	r1, r3, #1
 8004a0c:	9103      	str	r1, [sp, #12]
 8004a0e:	701a      	strb	r2, [r3, #0]
 8004a10:	e7d9      	b.n	80049c6 <__cvt+0x7e>

08004a12 <__exponent>:
 8004a12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a14:	2900      	cmp	r1, #0
 8004a16:	bfba      	itte	lt
 8004a18:	4249      	neglt	r1, r1
 8004a1a:	232d      	movlt	r3, #45	@ 0x2d
 8004a1c:	232b      	movge	r3, #43	@ 0x2b
 8004a1e:	2909      	cmp	r1, #9
 8004a20:	7002      	strb	r2, [r0, #0]
 8004a22:	7043      	strb	r3, [r0, #1]
 8004a24:	dd29      	ble.n	8004a7a <__exponent+0x68>
 8004a26:	f10d 0307 	add.w	r3, sp, #7
 8004a2a:	461d      	mov	r5, r3
 8004a2c:	270a      	movs	r7, #10
 8004a2e:	461a      	mov	r2, r3
 8004a30:	fbb1 f6f7 	udiv	r6, r1, r7
 8004a34:	fb07 1416 	mls	r4, r7, r6, r1
 8004a38:	3430      	adds	r4, #48	@ 0x30
 8004a3a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004a3e:	460c      	mov	r4, r1
 8004a40:	2c63      	cmp	r4, #99	@ 0x63
 8004a42:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a46:	4631      	mov	r1, r6
 8004a48:	dcf1      	bgt.n	8004a2e <__exponent+0x1c>
 8004a4a:	3130      	adds	r1, #48	@ 0x30
 8004a4c:	1e94      	subs	r4, r2, #2
 8004a4e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004a52:	1c41      	adds	r1, r0, #1
 8004a54:	4623      	mov	r3, r4
 8004a56:	42ab      	cmp	r3, r5
 8004a58:	d30a      	bcc.n	8004a70 <__exponent+0x5e>
 8004a5a:	f10d 0309 	add.w	r3, sp, #9
 8004a5e:	1a9b      	subs	r3, r3, r2
 8004a60:	42ac      	cmp	r4, r5
 8004a62:	bf88      	it	hi
 8004a64:	2300      	movhi	r3, #0
 8004a66:	3302      	adds	r3, #2
 8004a68:	4403      	add	r3, r0
 8004a6a:	1a18      	subs	r0, r3, r0
 8004a6c:	b003      	add	sp, #12
 8004a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a70:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004a74:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004a78:	e7ed      	b.n	8004a56 <__exponent+0x44>
 8004a7a:	2330      	movs	r3, #48	@ 0x30
 8004a7c:	3130      	adds	r1, #48	@ 0x30
 8004a7e:	7083      	strb	r3, [r0, #2]
 8004a80:	70c1      	strb	r1, [r0, #3]
 8004a82:	1d03      	adds	r3, r0, #4
 8004a84:	e7f1      	b.n	8004a6a <__exponent+0x58>
	...

08004a88 <_printf_float>:
 8004a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a8c:	b08d      	sub	sp, #52	@ 0x34
 8004a8e:	460c      	mov	r4, r1
 8004a90:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004a94:	4616      	mov	r6, r2
 8004a96:	461f      	mov	r7, r3
 8004a98:	4605      	mov	r5, r0
 8004a9a:	f000 fd07 	bl	80054ac <_localeconv_r>
 8004a9e:	6803      	ldr	r3, [r0, #0]
 8004aa0:	9304      	str	r3, [sp, #16]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fb fbe4 	bl	8000270 <strlen>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	930a      	str	r3, [sp, #40]	@ 0x28
 8004aac:	f8d8 3000 	ldr.w	r3, [r8]
 8004ab0:	9005      	str	r0, [sp, #20]
 8004ab2:	3307      	adds	r3, #7
 8004ab4:	f023 0307 	bic.w	r3, r3, #7
 8004ab8:	f103 0208 	add.w	r2, r3, #8
 8004abc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004ac0:	f8d4 b000 	ldr.w	fp, [r4]
 8004ac4:	f8c8 2000 	str.w	r2, [r8]
 8004ac8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004acc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004ad0:	9307      	str	r3, [sp, #28]
 8004ad2:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ad6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004ada:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ade:	4b9c      	ldr	r3, [pc, #624]	@ (8004d50 <_printf_float+0x2c8>)
 8004ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae4:	f7fc f822 	bl	8000b2c <__aeabi_dcmpun>
 8004ae8:	bb70      	cbnz	r0, 8004b48 <_printf_float+0xc0>
 8004aea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004aee:	4b98      	ldr	r3, [pc, #608]	@ (8004d50 <_printf_float+0x2c8>)
 8004af0:	f04f 32ff 	mov.w	r2, #4294967295
 8004af4:	f7fb fffc 	bl	8000af0 <__aeabi_dcmple>
 8004af8:	bb30      	cbnz	r0, 8004b48 <_printf_float+0xc0>
 8004afa:	2200      	movs	r2, #0
 8004afc:	2300      	movs	r3, #0
 8004afe:	4640      	mov	r0, r8
 8004b00:	4649      	mov	r1, r9
 8004b02:	f7fb ffeb 	bl	8000adc <__aeabi_dcmplt>
 8004b06:	b110      	cbz	r0, 8004b0e <_printf_float+0x86>
 8004b08:	232d      	movs	r3, #45	@ 0x2d
 8004b0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b0e:	4a91      	ldr	r2, [pc, #580]	@ (8004d54 <_printf_float+0x2cc>)
 8004b10:	4b91      	ldr	r3, [pc, #580]	@ (8004d58 <_printf_float+0x2d0>)
 8004b12:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004b16:	bf94      	ite	ls
 8004b18:	4690      	movls	r8, r2
 8004b1a:	4698      	movhi	r8, r3
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	6123      	str	r3, [r4, #16]
 8004b20:	f02b 0304 	bic.w	r3, fp, #4
 8004b24:	6023      	str	r3, [r4, #0]
 8004b26:	f04f 0900 	mov.w	r9, #0
 8004b2a:	9700      	str	r7, [sp, #0]
 8004b2c:	4633      	mov	r3, r6
 8004b2e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004b30:	4621      	mov	r1, r4
 8004b32:	4628      	mov	r0, r5
 8004b34:	f000 f9d2 	bl	8004edc <_printf_common>
 8004b38:	3001      	adds	r0, #1
 8004b3a:	f040 808d 	bne.w	8004c58 <_printf_float+0x1d0>
 8004b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b42:	b00d      	add	sp, #52	@ 0x34
 8004b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b48:	4642      	mov	r2, r8
 8004b4a:	464b      	mov	r3, r9
 8004b4c:	4640      	mov	r0, r8
 8004b4e:	4649      	mov	r1, r9
 8004b50:	f7fb ffec 	bl	8000b2c <__aeabi_dcmpun>
 8004b54:	b140      	cbz	r0, 8004b68 <_printf_float+0xe0>
 8004b56:	464b      	mov	r3, r9
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bfbc      	itt	lt
 8004b5c:	232d      	movlt	r3, #45	@ 0x2d
 8004b5e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004b62:	4a7e      	ldr	r2, [pc, #504]	@ (8004d5c <_printf_float+0x2d4>)
 8004b64:	4b7e      	ldr	r3, [pc, #504]	@ (8004d60 <_printf_float+0x2d8>)
 8004b66:	e7d4      	b.n	8004b12 <_printf_float+0x8a>
 8004b68:	6863      	ldr	r3, [r4, #4]
 8004b6a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004b6e:	9206      	str	r2, [sp, #24]
 8004b70:	1c5a      	adds	r2, r3, #1
 8004b72:	d13b      	bne.n	8004bec <_printf_float+0x164>
 8004b74:	2306      	movs	r3, #6
 8004b76:	6063      	str	r3, [r4, #4]
 8004b78:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	6022      	str	r2, [r4, #0]
 8004b80:	9303      	str	r3, [sp, #12]
 8004b82:	ab0a      	add	r3, sp, #40	@ 0x28
 8004b84:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004b88:	ab09      	add	r3, sp, #36	@ 0x24
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	6861      	ldr	r1, [r4, #4]
 8004b8e:	ec49 8b10 	vmov	d0, r8, r9
 8004b92:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004b96:	4628      	mov	r0, r5
 8004b98:	f7ff fed6 	bl	8004948 <__cvt>
 8004b9c:	9b06      	ldr	r3, [sp, #24]
 8004b9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004ba0:	2b47      	cmp	r3, #71	@ 0x47
 8004ba2:	4680      	mov	r8, r0
 8004ba4:	d129      	bne.n	8004bfa <_printf_float+0x172>
 8004ba6:	1cc8      	adds	r0, r1, #3
 8004ba8:	db02      	blt.n	8004bb0 <_printf_float+0x128>
 8004baa:	6863      	ldr	r3, [r4, #4]
 8004bac:	4299      	cmp	r1, r3
 8004bae:	dd41      	ble.n	8004c34 <_printf_float+0x1ac>
 8004bb0:	f1aa 0a02 	sub.w	sl, sl, #2
 8004bb4:	fa5f fa8a 	uxtb.w	sl, sl
 8004bb8:	3901      	subs	r1, #1
 8004bba:	4652      	mov	r2, sl
 8004bbc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004bc0:	9109      	str	r1, [sp, #36]	@ 0x24
 8004bc2:	f7ff ff26 	bl	8004a12 <__exponent>
 8004bc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004bc8:	1813      	adds	r3, r2, r0
 8004bca:	2a01      	cmp	r2, #1
 8004bcc:	4681      	mov	r9, r0
 8004bce:	6123      	str	r3, [r4, #16]
 8004bd0:	dc02      	bgt.n	8004bd8 <_printf_float+0x150>
 8004bd2:	6822      	ldr	r2, [r4, #0]
 8004bd4:	07d2      	lsls	r2, r2, #31
 8004bd6:	d501      	bpl.n	8004bdc <_printf_float+0x154>
 8004bd8:	3301      	adds	r3, #1
 8004bda:	6123      	str	r3, [r4, #16]
 8004bdc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0a2      	beq.n	8004b2a <_printf_float+0xa2>
 8004be4:	232d      	movs	r3, #45	@ 0x2d
 8004be6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bea:	e79e      	b.n	8004b2a <_printf_float+0xa2>
 8004bec:	9a06      	ldr	r2, [sp, #24]
 8004bee:	2a47      	cmp	r2, #71	@ 0x47
 8004bf0:	d1c2      	bne.n	8004b78 <_printf_float+0xf0>
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1c0      	bne.n	8004b78 <_printf_float+0xf0>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e7bd      	b.n	8004b76 <_printf_float+0xee>
 8004bfa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004bfe:	d9db      	bls.n	8004bb8 <_printf_float+0x130>
 8004c00:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004c04:	d118      	bne.n	8004c38 <_printf_float+0x1b0>
 8004c06:	2900      	cmp	r1, #0
 8004c08:	6863      	ldr	r3, [r4, #4]
 8004c0a:	dd0b      	ble.n	8004c24 <_printf_float+0x19c>
 8004c0c:	6121      	str	r1, [r4, #16]
 8004c0e:	b913      	cbnz	r3, 8004c16 <_printf_float+0x18e>
 8004c10:	6822      	ldr	r2, [r4, #0]
 8004c12:	07d0      	lsls	r0, r2, #31
 8004c14:	d502      	bpl.n	8004c1c <_printf_float+0x194>
 8004c16:	3301      	adds	r3, #1
 8004c18:	440b      	add	r3, r1
 8004c1a:	6123      	str	r3, [r4, #16]
 8004c1c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004c1e:	f04f 0900 	mov.w	r9, #0
 8004c22:	e7db      	b.n	8004bdc <_printf_float+0x154>
 8004c24:	b913      	cbnz	r3, 8004c2c <_printf_float+0x1a4>
 8004c26:	6822      	ldr	r2, [r4, #0]
 8004c28:	07d2      	lsls	r2, r2, #31
 8004c2a:	d501      	bpl.n	8004c30 <_printf_float+0x1a8>
 8004c2c:	3302      	adds	r3, #2
 8004c2e:	e7f4      	b.n	8004c1a <_printf_float+0x192>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e7f2      	b.n	8004c1a <_printf_float+0x192>
 8004c34:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004c38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c3a:	4299      	cmp	r1, r3
 8004c3c:	db05      	blt.n	8004c4a <_printf_float+0x1c2>
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	6121      	str	r1, [r4, #16]
 8004c42:	07d8      	lsls	r0, r3, #31
 8004c44:	d5ea      	bpl.n	8004c1c <_printf_float+0x194>
 8004c46:	1c4b      	adds	r3, r1, #1
 8004c48:	e7e7      	b.n	8004c1a <_printf_float+0x192>
 8004c4a:	2900      	cmp	r1, #0
 8004c4c:	bfd4      	ite	le
 8004c4e:	f1c1 0202 	rsble	r2, r1, #2
 8004c52:	2201      	movgt	r2, #1
 8004c54:	4413      	add	r3, r2
 8004c56:	e7e0      	b.n	8004c1a <_printf_float+0x192>
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	055a      	lsls	r2, r3, #21
 8004c5c:	d407      	bmi.n	8004c6e <_printf_float+0x1e6>
 8004c5e:	6923      	ldr	r3, [r4, #16]
 8004c60:	4642      	mov	r2, r8
 8004c62:	4631      	mov	r1, r6
 8004c64:	4628      	mov	r0, r5
 8004c66:	47b8      	blx	r7
 8004c68:	3001      	adds	r0, #1
 8004c6a:	d12b      	bne.n	8004cc4 <_printf_float+0x23c>
 8004c6c:	e767      	b.n	8004b3e <_printf_float+0xb6>
 8004c6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004c72:	f240 80dd 	bls.w	8004e30 <_printf_float+0x3a8>
 8004c76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	f7fb ff23 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c82:	2800      	cmp	r0, #0
 8004c84:	d033      	beq.n	8004cee <_printf_float+0x266>
 8004c86:	4a37      	ldr	r2, [pc, #220]	@ (8004d64 <_printf_float+0x2dc>)
 8004c88:	2301      	movs	r3, #1
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	47b8      	blx	r7
 8004c90:	3001      	adds	r0, #1
 8004c92:	f43f af54 	beq.w	8004b3e <_printf_float+0xb6>
 8004c96:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004c9a:	4543      	cmp	r3, r8
 8004c9c:	db02      	blt.n	8004ca4 <_printf_float+0x21c>
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	07d8      	lsls	r0, r3, #31
 8004ca2:	d50f      	bpl.n	8004cc4 <_printf_float+0x23c>
 8004ca4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ca8:	4631      	mov	r1, r6
 8004caa:	4628      	mov	r0, r5
 8004cac:	47b8      	blx	r7
 8004cae:	3001      	adds	r0, #1
 8004cb0:	f43f af45 	beq.w	8004b3e <_printf_float+0xb6>
 8004cb4:	f04f 0900 	mov.w	r9, #0
 8004cb8:	f108 38ff 	add.w	r8, r8, #4294967295
 8004cbc:	f104 0a1a 	add.w	sl, r4, #26
 8004cc0:	45c8      	cmp	r8, r9
 8004cc2:	dc09      	bgt.n	8004cd8 <_printf_float+0x250>
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	079b      	lsls	r3, r3, #30
 8004cc8:	f100 8103 	bmi.w	8004ed2 <_printf_float+0x44a>
 8004ccc:	68e0      	ldr	r0, [r4, #12]
 8004cce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004cd0:	4298      	cmp	r0, r3
 8004cd2:	bfb8      	it	lt
 8004cd4:	4618      	movlt	r0, r3
 8004cd6:	e734      	b.n	8004b42 <_printf_float+0xba>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	4652      	mov	r2, sl
 8004cdc:	4631      	mov	r1, r6
 8004cde:	4628      	mov	r0, r5
 8004ce0:	47b8      	blx	r7
 8004ce2:	3001      	adds	r0, #1
 8004ce4:	f43f af2b 	beq.w	8004b3e <_printf_float+0xb6>
 8004ce8:	f109 0901 	add.w	r9, r9, #1
 8004cec:	e7e8      	b.n	8004cc0 <_printf_float+0x238>
 8004cee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	dc39      	bgt.n	8004d68 <_printf_float+0x2e0>
 8004cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8004d64 <_printf_float+0x2dc>)
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	4631      	mov	r1, r6
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	47b8      	blx	r7
 8004cfe:	3001      	adds	r0, #1
 8004d00:	f43f af1d 	beq.w	8004b3e <_printf_float+0xb6>
 8004d04:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004d08:	ea59 0303 	orrs.w	r3, r9, r3
 8004d0c:	d102      	bne.n	8004d14 <_printf_float+0x28c>
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	07d9      	lsls	r1, r3, #31
 8004d12:	d5d7      	bpl.n	8004cc4 <_printf_float+0x23c>
 8004d14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d18:	4631      	mov	r1, r6
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	47b8      	blx	r7
 8004d1e:	3001      	adds	r0, #1
 8004d20:	f43f af0d 	beq.w	8004b3e <_printf_float+0xb6>
 8004d24:	f04f 0a00 	mov.w	sl, #0
 8004d28:	f104 0b1a 	add.w	fp, r4, #26
 8004d2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d2e:	425b      	negs	r3, r3
 8004d30:	4553      	cmp	r3, sl
 8004d32:	dc01      	bgt.n	8004d38 <_printf_float+0x2b0>
 8004d34:	464b      	mov	r3, r9
 8004d36:	e793      	b.n	8004c60 <_printf_float+0x1d8>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	465a      	mov	r2, fp
 8004d3c:	4631      	mov	r1, r6
 8004d3e:	4628      	mov	r0, r5
 8004d40:	47b8      	blx	r7
 8004d42:	3001      	adds	r0, #1
 8004d44:	f43f aefb 	beq.w	8004b3e <_printf_float+0xb6>
 8004d48:	f10a 0a01 	add.w	sl, sl, #1
 8004d4c:	e7ee      	b.n	8004d2c <_printf_float+0x2a4>
 8004d4e:	bf00      	nop
 8004d50:	7fefffff 	.word	0x7fefffff
 8004d54:	08008450 	.word	0x08008450
 8004d58:	08008454 	.word	0x08008454
 8004d5c:	08008458 	.word	0x08008458
 8004d60:	0800845c 	.word	0x0800845c
 8004d64:	0800868f 	.word	0x0800868f
 8004d68:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d6a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004d6e:	4553      	cmp	r3, sl
 8004d70:	bfa8      	it	ge
 8004d72:	4653      	movge	r3, sl
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	4699      	mov	r9, r3
 8004d78:	dc36      	bgt.n	8004de8 <_printf_float+0x360>
 8004d7a:	f04f 0b00 	mov.w	fp, #0
 8004d7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d82:	f104 021a 	add.w	r2, r4, #26
 8004d86:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d88:	9306      	str	r3, [sp, #24]
 8004d8a:	eba3 0309 	sub.w	r3, r3, r9
 8004d8e:	455b      	cmp	r3, fp
 8004d90:	dc31      	bgt.n	8004df6 <_printf_float+0x36e>
 8004d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d94:	459a      	cmp	sl, r3
 8004d96:	dc3a      	bgt.n	8004e0e <_printf_float+0x386>
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	07da      	lsls	r2, r3, #31
 8004d9c:	d437      	bmi.n	8004e0e <_printf_float+0x386>
 8004d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004da0:	ebaa 0903 	sub.w	r9, sl, r3
 8004da4:	9b06      	ldr	r3, [sp, #24]
 8004da6:	ebaa 0303 	sub.w	r3, sl, r3
 8004daa:	4599      	cmp	r9, r3
 8004dac:	bfa8      	it	ge
 8004dae:	4699      	movge	r9, r3
 8004db0:	f1b9 0f00 	cmp.w	r9, #0
 8004db4:	dc33      	bgt.n	8004e1e <_printf_float+0x396>
 8004db6:	f04f 0800 	mov.w	r8, #0
 8004dba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dbe:	f104 0b1a 	add.w	fp, r4, #26
 8004dc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dc4:	ebaa 0303 	sub.w	r3, sl, r3
 8004dc8:	eba3 0309 	sub.w	r3, r3, r9
 8004dcc:	4543      	cmp	r3, r8
 8004dce:	f77f af79 	ble.w	8004cc4 <_printf_float+0x23c>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	465a      	mov	r2, fp
 8004dd6:	4631      	mov	r1, r6
 8004dd8:	4628      	mov	r0, r5
 8004dda:	47b8      	blx	r7
 8004ddc:	3001      	adds	r0, #1
 8004dde:	f43f aeae 	beq.w	8004b3e <_printf_float+0xb6>
 8004de2:	f108 0801 	add.w	r8, r8, #1
 8004de6:	e7ec      	b.n	8004dc2 <_printf_float+0x33a>
 8004de8:	4642      	mov	r2, r8
 8004dea:	4631      	mov	r1, r6
 8004dec:	4628      	mov	r0, r5
 8004dee:	47b8      	blx	r7
 8004df0:	3001      	adds	r0, #1
 8004df2:	d1c2      	bne.n	8004d7a <_printf_float+0x2f2>
 8004df4:	e6a3      	b.n	8004b3e <_printf_float+0xb6>
 8004df6:	2301      	movs	r3, #1
 8004df8:	4631      	mov	r1, r6
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	9206      	str	r2, [sp, #24]
 8004dfe:	47b8      	blx	r7
 8004e00:	3001      	adds	r0, #1
 8004e02:	f43f ae9c 	beq.w	8004b3e <_printf_float+0xb6>
 8004e06:	9a06      	ldr	r2, [sp, #24]
 8004e08:	f10b 0b01 	add.w	fp, fp, #1
 8004e0c:	e7bb      	b.n	8004d86 <_printf_float+0x2fe>
 8004e0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e12:	4631      	mov	r1, r6
 8004e14:	4628      	mov	r0, r5
 8004e16:	47b8      	blx	r7
 8004e18:	3001      	adds	r0, #1
 8004e1a:	d1c0      	bne.n	8004d9e <_printf_float+0x316>
 8004e1c:	e68f      	b.n	8004b3e <_printf_float+0xb6>
 8004e1e:	9a06      	ldr	r2, [sp, #24]
 8004e20:	464b      	mov	r3, r9
 8004e22:	4442      	add	r2, r8
 8004e24:	4631      	mov	r1, r6
 8004e26:	4628      	mov	r0, r5
 8004e28:	47b8      	blx	r7
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	d1c3      	bne.n	8004db6 <_printf_float+0x32e>
 8004e2e:	e686      	b.n	8004b3e <_printf_float+0xb6>
 8004e30:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004e34:	f1ba 0f01 	cmp.w	sl, #1
 8004e38:	dc01      	bgt.n	8004e3e <_printf_float+0x3b6>
 8004e3a:	07db      	lsls	r3, r3, #31
 8004e3c:	d536      	bpl.n	8004eac <_printf_float+0x424>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	4642      	mov	r2, r8
 8004e42:	4631      	mov	r1, r6
 8004e44:	4628      	mov	r0, r5
 8004e46:	47b8      	blx	r7
 8004e48:	3001      	adds	r0, #1
 8004e4a:	f43f ae78 	beq.w	8004b3e <_printf_float+0xb6>
 8004e4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e52:	4631      	mov	r1, r6
 8004e54:	4628      	mov	r0, r5
 8004e56:	47b8      	blx	r7
 8004e58:	3001      	adds	r0, #1
 8004e5a:	f43f ae70 	beq.w	8004b3e <_printf_float+0xb6>
 8004e5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004e62:	2200      	movs	r2, #0
 8004e64:	2300      	movs	r3, #0
 8004e66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e6a:	f7fb fe2d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e6e:	b9c0      	cbnz	r0, 8004ea2 <_printf_float+0x41a>
 8004e70:	4653      	mov	r3, sl
 8004e72:	f108 0201 	add.w	r2, r8, #1
 8004e76:	4631      	mov	r1, r6
 8004e78:	4628      	mov	r0, r5
 8004e7a:	47b8      	blx	r7
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	d10c      	bne.n	8004e9a <_printf_float+0x412>
 8004e80:	e65d      	b.n	8004b3e <_printf_float+0xb6>
 8004e82:	2301      	movs	r3, #1
 8004e84:	465a      	mov	r2, fp
 8004e86:	4631      	mov	r1, r6
 8004e88:	4628      	mov	r0, r5
 8004e8a:	47b8      	blx	r7
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	f43f ae56 	beq.w	8004b3e <_printf_float+0xb6>
 8004e92:	f108 0801 	add.w	r8, r8, #1
 8004e96:	45d0      	cmp	r8, sl
 8004e98:	dbf3      	blt.n	8004e82 <_printf_float+0x3fa>
 8004e9a:	464b      	mov	r3, r9
 8004e9c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004ea0:	e6df      	b.n	8004c62 <_printf_float+0x1da>
 8004ea2:	f04f 0800 	mov.w	r8, #0
 8004ea6:	f104 0b1a 	add.w	fp, r4, #26
 8004eaa:	e7f4      	b.n	8004e96 <_printf_float+0x40e>
 8004eac:	2301      	movs	r3, #1
 8004eae:	4642      	mov	r2, r8
 8004eb0:	e7e1      	b.n	8004e76 <_printf_float+0x3ee>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	464a      	mov	r2, r9
 8004eb6:	4631      	mov	r1, r6
 8004eb8:	4628      	mov	r0, r5
 8004eba:	47b8      	blx	r7
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	f43f ae3e 	beq.w	8004b3e <_printf_float+0xb6>
 8004ec2:	f108 0801 	add.w	r8, r8, #1
 8004ec6:	68e3      	ldr	r3, [r4, #12]
 8004ec8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004eca:	1a5b      	subs	r3, r3, r1
 8004ecc:	4543      	cmp	r3, r8
 8004ece:	dcf0      	bgt.n	8004eb2 <_printf_float+0x42a>
 8004ed0:	e6fc      	b.n	8004ccc <_printf_float+0x244>
 8004ed2:	f04f 0800 	mov.w	r8, #0
 8004ed6:	f104 0919 	add.w	r9, r4, #25
 8004eda:	e7f4      	b.n	8004ec6 <_printf_float+0x43e>

08004edc <_printf_common>:
 8004edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee0:	4616      	mov	r6, r2
 8004ee2:	4698      	mov	r8, r3
 8004ee4:	688a      	ldr	r2, [r1, #8]
 8004ee6:	690b      	ldr	r3, [r1, #16]
 8004ee8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004eec:	4293      	cmp	r3, r2
 8004eee:	bfb8      	it	lt
 8004ef0:	4613      	movlt	r3, r2
 8004ef2:	6033      	str	r3, [r6, #0]
 8004ef4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ef8:	4607      	mov	r7, r0
 8004efa:	460c      	mov	r4, r1
 8004efc:	b10a      	cbz	r2, 8004f02 <_printf_common+0x26>
 8004efe:	3301      	adds	r3, #1
 8004f00:	6033      	str	r3, [r6, #0]
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	0699      	lsls	r1, r3, #26
 8004f06:	bf42      	ittt	mi
 8004f08:	6833      	ldrmi	r3, [r6, #0]
 8004f0a:	3302      	addmi	r3, #2
 8004f0c:	6033      	strmi	r3, [r6, #0]
 8004f0e:	6825      	ldr	r5, [r4, #0]
 8004f10:	f015 0506 	ands.w	r5, r5, #6
 8004f14:	d106      	bne.n	8004f24 <_printf_common+0x48>
 8004f16:	f104 0a19 	add.w	sl, r4, #25
 8004f1a:	68e3      	ldr	r3, [r4, #12]
 8004f1c:	6832      	ldr	r2, [r6, #0]
 8004f1e:	1a9b      	subs	r3, r3, r2
 8004f20:	42ab      	cmp	r3, r5
 8004f22:	dc26      	bgt.n	8004f72 <_printf_common+0x96>
 8004f24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f28:	6822      	ldr	r2, [r4, #0]
 8004f2a:	3b00      	subs	r3, #0
 8004f2c:	bf18      	it	ne
 8004f2e:	2301      	movne	r3, #1
 8004f30:	0692      	lsls	r2, r2, #26
 8004f32:	d42b      	bmi.n	8004f8c <_printf_common+0xb0>
 8004f34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f38:	4641      	mov	r1, r8
 8004f3a:	4638      	mov	r0, r7
 8004f3c:	47c8      	blx	r9
 8004f3e:	3001      	adds	r0, #1
 8004f40:	d01e      	beq.n	8004f80 <_printf_common+0xa4>
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	6922      	ldr	r2, [r4, #16]
 8004f46:	f003 0306 	and.w	r3, r3, #6
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	bf02      	ittt	eq
 8004f4e:	68e5      	ldreq	r5, [r4, #12]
 8004f50:	6833      	ldreq	r3, [r6, #0]
 8004f52:	1aed      	subeq	r5, r5, r3
 8004f54:	68a3      	ldr	r3, [r4, #8]
 8004f56:	bf0c      	ite	eq
 8004f58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f5c:	2500      	movne	r5, #0
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	bfc4      	itt	gt
 8004f62:	1a9b      	subgt	r3, r3, r2
 8004f64:	18ed      	addgt	r5, r5, r3
 8004f66:	2600      	movs	r6, #0
 8004f68:	341a      	adds	r4, #26
 8004f6a:	42b5      	cmp	r5, r6
 8004f6c:	d11a      	bne.n	8004fa4 <_printf_common+0xc8>
 8004f6e:	2000      	movs	r0, #0
 8004f70:	e008      	b.n	8004f84 <_printf_common+0xa8>
 8004f72:	2301      	movs	r3, #1
 8004f74:	4652      	mov	r2, sl
 8004f76:	4641      	mov	r1, r8
 8004f78:	4638      	mov	r0, r7
 8004f7a:	47c8      	blx	r9
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	d103      	bne.n	8004f88 <_printf_common+0xac>
 8004f80:	f04f 30ff 	mov.w	r0, #4294967295
 8004f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f88:	3501      	adds	r5, #1
 8004f8a:	e7c6      	b.n	8004f1a <_printf_common+0x3e>
 8004f8c:	18e1      	adds	r1, r4, r3
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	2030      	movs	r0, #48	@ 0x30
 8004f92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f96:	4422      	add	r2, r4
 8004f98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fa0:	3302      	adds	r3, #2
 8004fa2:	e7c7      	b.n	8004f34 <_printf_common+0x58>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	4622      	mov	r2, r4
 8004fa8:	4641      	mov	r1, r8
 8004faa:	4638      	mov	r0, r7
 8004fac:	47c8      	blx	r9
 8004fae:	3001      	adds	r0, #1
 8004fb0:	d0e6      	beq.n	8004f80 <_printf_common+0xa4>
 8004fb2:	3601      	adds	r6, #1
 8004fb4:	e7d9      	b.n	8004f6a <_printf_common+0x8e>
	...

08004fb8 <_printf_i>:
 8004fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fbc:	7e0f      	ldrb	r7, [r1, #24]
 8004fbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004fc0:	2f78      	cmp	r7, #120	@ 0x78
 8004fc2:	4691      	mov	r9, r2
 8004fc4:	4680      	mov	r8, r0
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	469a      	mov	sl, r3
 8004fca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004fce:	d807      	bhi.n	8004fe0 <_printf_i+0x28>
 8004fd0:	2f62      	cmp	r7, #98	@ 0x62
 8004fd2:	d80a      	bhi.n	8004fea <_printf_i+0x32>
 8004fd4:	2f00      	cmp	r7, #0
 8004fd6:	f000 80d2 	beq.w	800517e <_printf_i+0x1c6>
 8004fda:	2f58      	cmp	r7, #88	@ 0x58
 8004fdc:	f000 80b9 	beq.w	8005152 <_printf_i+0x19a>
 8004fe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fe4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004fe8:	e03a      	b.n	8005060 <_printf_i+0xa8>
 8004fea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004fee:	2b15      	cmp	r3, #21
 8004ff0:	d8f6      	bhi.n	8004fe0 <_printf_i+0x28>
 8004ff2:	a101      	add	r1, pc, #4	@ (adr r1, 8004ff8 <_printf_i+0x40>)
 8004ff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ff8:	08005051 	.word	0x08005051
 8004ffc:	08005065 	.word	0x08005065
 8005000:	08004fe1 	.word	0x08004fe1
 8005004:	08004fe1 	.word	0x08004fe1
 8005008:	08004fe1 	.word	0x08004fe1
 800500c:	08004fe1 	.word	0x08004fe1
 8005010:	08005065 	.word	0x08005065
 8005014:	08004fe1 	.word	0x08004fe1
 8005018:	08004fe1 	.word	0x08004fe1
 800501c:	08004fe1 	.word	0x08004fe1
 8005020:	08004fe1 	.word	0x08004fe1
 8005024:	08005165 	.word	0x08005165
 8005028:	0800508f 	.word	0x0800508f
 800502c:	0800511f 	.word	0x0800511f
 8005030:	08004fe1 	.word	0x08004fe1
 8005034:	08004fe1 	.word	0x08004fe1
 8005038:	08005187 	.word	0x08005187
 800503c:	08004fe1 	.word	0x08004fe1
 8005040:	0800508f 	.word	0x0800508f
 8005044:	08004fe1 	.word	0x08004fe1
 8005048:	08004fe1 	.word	0x08004fe1
 800504c:	08005127 	.word	0x08005127
 8005050:	6833      	ldr	r3, [r6, #0]
 8005052:	1d1a      	adds	r2, r3, #4
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6032      	str	r2, [r6, #0]
 8005058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800505c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005060:	2301      	movs	r3, #1
 8005062:	e09d      	b.n	80051a0 <_printf_i+0x1e8>
 8005064:	6833      	ldr	r3, [r6, #0]
 8005066:	6820      	ldr	r0, [r4, #0]
 8005068:	1d19      	adds	r1, r3, #4
 800506a:	6031      	str	r1, [r6, #0]
 800506c:	0606      	lsls	r6, r0, #24
 800506e:	d501      	bpl.n	8005074 <_printf_i+0xbc>
 8005070:	681d      	ldr	r5, [r3, #0]
 8005072:	e003      	b.n	800507c <_printf_i+0xc4>
 8005074:	0645      	lsls	r5, r0, #25
 8005076:	d5fb      	bpl.n	8005070 <_printf_i+0xb8>
 8005078:	f9b3 5000 	ldrsh.w	r5, [r3]
 800507c:	2d00      	cmp	r5, #0
 800507e:	da03      	bge.n	8005088 <_printf_i+0xd0>
 8005080:	232d      	movs	r3, #45	@ 0x2d
 8005082:	426d      	negs	r5, r5
 8005084:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005088:	4859      	ldr	r0, [pc, #356]	@ (80051f0 <_printf_i+0x238>)
 800508a:	230a      	movs	r3, #10
 800508c:	e011      	b.n	80050b2 <_printf_i+0xfa>
 800508e:	6821      	ldr	r1, [r4, #0]
 8005090:	6833      	ldr	r3, [r6, #0]
 8005092:	0608      	lsls	r0, r1, #24
 8005094:	f853 5b04 	ldr.w	r5, [r3], #4
 8005098:	d402      	bmi.n	80050a0 <_printf_i+0xe8>
 800509a:	0649      	lsls	r1, r1, #25
 800509c:	bf48      	it	mi
 800509e:	b2ad      	uxthmi	r5, r5
 80050a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80050a2:	4853      	ldr	r0, [pc, #332]	@ (80051f0 <_printf_i+0x238>)
 80050a4:	6033      	str	r3, [r6, #0]
 80050a6:	bf14      	ite	ne
 80050a8:	230a      	movne	r3, #10
 80050aa:	2308      	moveq	r3, #8
 80050ac:	2100      	movs	r1, #0
 80050ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050b2:	6866      	ldr	r6, [r4, #4]
 80050b4:	60a6      	str	r6, [r4, #8]
 80050b6:	2e00      	cmp	r6, #0
 80050b8:	bfa2      	ittt	ge
 80050ba:	6821      	ldrge	r1, [r4, #0]
 80050bc:	f021 0104 	bicge.w	r1, r1, #4
 80050c0:	6021      	strge	r1, [r4, #0]
 80050c2:	b90d      	cbnz	r5, 80050c8 <_printf_i+0x110>
 80050c4:	2e00      	cmp	r6, #0
 80050c6:	d04b      	beq.n	8005160 <_printf_i+0x1a8>
 80050c8:	4616      	mov	r6, r2
 80050ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80050ce:	fb03 5711 	mls	r7, r3, r1, r5
 80050d2:	5dc7      	ldrb	r7, [r0, r7]
 80050d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050d8:	462f      	mov	r7, r5
 80050da:	42bb      	cmp	r3, r7
 80050dc:	460d      	mov	r5, r1
 80050de:	d9f4      	bls.n	80050ca <_printf_i+0x112>
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d10b      	bne.n	80050fc <_printf_i+0x144>
 80050e4:	6823      	ldr	r3, [r4, #0]
 80050e6:	07df      	lsls	r7, r3, #31
 80050e8:	d508      	bpl.n	80050fc <_printf_i+0x144>
 80050ea:	6923      	ldr	r3, [r4, #16]
 80050ec:	6861      	ldr	r1, [r4, #4]
 80050ee:	4299      	cmp	r1, r3
 80050f0:	bfde      	ittt	le
 80050f2:	2330      	movle	r3, #48	@ 0x30
 80050f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050fc:	1b92      	subs	r2, r2, r6
 80050fe:	6122      	str	r2, [r4, #16]
 8005100:	f8cd a000 	str.w	sl, [sp]
 8005104:	464b      	mov	r3, r9
 8005106:	aa03      	add	r2, sp, #12
 8005108:	4621      	mov	r1, r4
 800510a:	4640      	mov	r0, r8
 800510c:	f7ff fee6 	bl	8004edc <_printf_common>
 8005110:	3001      	adds	r0, #1
 8005112:	d14a      	bne.n	80051aa <_printf_i+0x1f2>
 8005114:	f04f 30ff 	mov.w	r0, #4294967295
 8005118:	b004      	add	sp, #16
 800511a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	f043 0320 	orr.w	r3, r3, #32
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	4833      	ldr	r0, [pc, #204]	@ (80051f4 <_printf_i+0x23c>)
 8005128:	2778      	movs	r7, #120	@ 0x78
 800512a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	6831      	ldr	r1, [r6, #0]
 8005132:	061f      	lsls	r7, r3, #24
 8005134:	f851 5b04 	ldr.w	r5, [r1], #4
 8005138:	d402      	bmi.n	8005140 <_printf_i+0x188>
 800513a:	065f      	lsls	r7, r3, #25
 800513c:	bf48      	it	mi
 800513e:	b2ad      	uxthmi	r5, r5
 8005140:	6031      	str	r1, [r6, #0]
 8005142:	07d9      	lsls	r1, r3, #31
 8005144:	bf44      	itt	mi
 8005146:	f043 0320 	orrmi.w	r3, r3, #32
 800514a:	6023      	strmi	r3, [r4, #0]
 800514c:	b11d      	cbz	r5, 8005156 <_printf_i+0x19e>
 800514e:	2310      	movs	r3, #16
 8005150:	e7ac      	b.n	80050ac <_printf_i+0xf4>
 8005152:	4827      	ldr	r0, [pc, #156]	@ (80051f0 <_printf_i+0x238>)
 8005154:	e7e9      	b.n	800512a <_printf_i+0x172>
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	f023 0320 	bic.w	r3, r3, #32
 800515c:	6023      	str	r3, [r4, #0]
 800515e:	e7f6      	b.n	800514e <_printf_i+0x196>
 8005160:	4616      	mov	r6, r2
 8005162:	e7bd      	b.n	80050e0 <_printf_i+0x128>
 8005164:	6833      	ldr	r3, [r6, #0]
 8005166:	6825      	ldr	r5, [r4, #0]
 8005168:	6961      	ldr	r1, [r4, #20]
 800516a:	1d18      	adds	r0, r3, #4
 800516c:	6030      	str	r0, [r6, #0]
 800516e:	062e      	lsls	r6, r5, #24
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	d501      	bpl.n	8005178 <_printf_i+0x1c0>
 8005174:	6019      	str	r1, [r3, #0]
 8005176:	e002      	b.n	800517e <_printf_i+0x1c6>
 8005178:	0668      	lsls	r0, r5, #25
 800517a:	d5fb      	bpl.n	8005174 <_printf_i+0x1bc>
 800517c:	8019      	strh	r1, [r3, #0]
 800517e:	2300      	movs	r3, #0
 8005180:	6123      	str	r3, [r4, #16]
 8005182:	4616      	mov	r6, r2
 8005184:	e7bc      	b.n	8005100 <_printf_i+0x148>
 8005186:	6833      	ldr	r3, [r6, #0]
 8005188:	1d1a      	adds	r2, r3, #4
 800518a:	6032      	str	r2, [r6, #0]
 800518c:	681e      	ldr	r6, [r3, #0]
 800518e:	6862      	ldr	r2, [r4, #4]
 8005190:	2100      	movs	r1, #0
 8005192:	4630      	mov	r0, r6
 8005194:	f7fb f81c 	bl	80001d0 <memchr>
 8005198:	b108      	cbz	r0, 800519e <_printf_i+0x1e6>
 800519a:	1b80      	subs	r0, r0, r6
 800519c:	6060      	str	r0, [r4, #4]
 800519e:	6863      	ldr	r3, [r4, #4]
 80051a0:	6123      	str	r3, [r4, #16]
 80051a2:	2300      	movs	r3, #0
 80051a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051a8:	e7aa      	b.n	8005100 <_printf_i+0x148>
 80051aa:	6923      	ldr	r3, [r4, #16]
 80051ac:	4632      	mov	r2, r6
 80051ae:	4649      	mov	r1, r9
 80051b0:	4640      	mov	r0, r8
 80051b2:	47d0      	blx	sl
 80051b4:	3001      	adds	r0, #1
 80051b6:	d0ad      	beq.n	8005114 <_printf_i+0x15c>
 80051b8:	6823      	ldr	r3, [r4, #0]
 80051ba:	079b      	lsls	r3, r3, #30
 80051bc:	d413      	bmi.n	80051e6 <_printf_i+0x22e>
 80051be:	68e0      	ldr	r0, [r4, #12]
 80051c0:	9b03      	ldr	r3, [sp, #12]
 80051c2:	4298      	cmp	r0, r3
 80051c4:	bfb8      	it	lt
 80051c6:	4618      	movlt	r0, r3
 80051c8:	e7a6      	b.n	8005118 <_printf_i+0x160>
 80051ca:	2301      	movs	r3, #1
 80051cc:	4632      	mov	r2, r6
 80051ce:	4649      	mov	r1, r9
 80051d0:	4640      	mov	r0, r8
 80051d2:	47d0      	blx	sl
 80051d4:	3001      	adds	r0, #1
 80051d6:	d09d      	beq.n	8005114 <_printf_i+0x15c>
 80051d8:	3501      	adds	r5, #1
 80051da:	68e3      	ldr	r3, [r4, #12]
 80051dc:	9903      	ldr	r1, [sp, #12]
 80051de:	1a5b      	subs	r3, r3, r1
 80051e0:	42ab      	cmp	r3, r5
 80051e2:	dcf2      	bgt.n	80051ca <_printf_i+0x212>
 80051e4:	e7eb      	b.n	80051be <_printf_i+0x206>
 80051e6:	2500      	movs	r5, #0
 80051e8:	f104 0619 	add.w	r6, r4, #25
 80051ec:	e7f5      	b.n	80051da <_printf_i+0x222>
 80051ee:	bf00      	nop
 80051f0:	08008460 	.word	0x08008460
 80051f4:	08008471 	.word	0x08008471

080051f8 <std>:
 80051f8:	2300      	movs	r3, #0
 80051fa:	b510      	push	{r4, lr}
 80051fc:	4604      	mov	r4, r0
 80051fe:	e9c0 3300 	strd	r3, r3, [r0]
 8005202:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005206:	6083      	str	r3, [r0, #8]
 8005208:	8181      	strh	r1, [r0, #12]
 800520a:	6643      	str	r3, [r0, #100]	@ 0x64
 800520c:	81c2      	strh	r2, [r0, #14]
 800520e:	6183      	str	r3, [r0, #24]
 8005210:	4619      	mov	r1, r3
 8005212:	2208      	movs	r2, #8
 8005214:	305c      	adds	r0, #92	@ 0x5c
 8005216:	f000 f940 	bl	800549a <memset>
 800521a:	4b0d      	ldr	r3, [pc, #52]	@ (8005250 <std+0x58>)
 800521c:	6263      	str	r3, [r4, #36]	@ 0x24
 800521e:	4b0d      	ldr	r3, [pc, #52]	@ (8005254 <std+0x5c>)
 8005220:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005222:	4b0d      	ldr	r3, [pc, #52]	@ (8005258 <std+0x60>)
 8005224:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005226:	4b0d      	ldr	r3, [pc, #52]	@ (800525c <std+0x64>)
 8005228:	6323      	str	r3, [r4, #48]	@ 0x30
 800522a:	4b0d      	ldr	r3, [pc, #52]	@ (8005260 <std+0x68>)
 800522c:	6224      	str	r4, [r4, #32]
 800522e:	429c      	cmp	r4, r3
 8005230:	d006      	beq.n	8005240 <std+0x48>
 8005232:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005236:	4294      	cmp	r4, r2
 8005238:	d002      	beq.n	8005240 <std+0x48>
 800523a:	33d0      	adds	r3, #208	@ 0xd0
 800523c:	429c      	cmp	r4, r3
 800523e:	d105      	bne.n	800524c <std+0x54>
 8005240:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005248:	f000 b9a4 	b.w	8005594 <__retarget_lock_init_recursive>
 800524c:	bd10      	pop	{r4, pc}
 800524e:	bf00      	nop
 8005250:	08005411 	.word	0x08005411
 8005254:	08005437 	.word	0x08005437
 8005258:	0800546f 	.word	0x0800546f
 800525c:	08005493 	.word	0x08005493
 8005260:	20003b04 	.word	0x20003b04

08005264 <stdio_exit_handler>:
 8005264:	4a02      	ldr	r2, [pc, #8]	@ (8005270 <stdio_exit_handler+0xc>)
 8005266:	4903      	ldr	r1, [pc, #12]	@ (8005274 <stdio_exit_handler+0x10>)
 8005268:	4803      	ldr	r0, [pc, #12]	@ (8005278 <stdio_exit_handler+0x14>)
 800526a:	f000 b869 	b.w	8005340 <_fwalk_sglue>
 800526e:	bf00      	nop
 8005270:	20000010 	.word	0x20000010
 8005274:	08007529 	.word	0x08007529
 8005278:	20000020 	.word	0x20000020

0800527c <cleanup_stdio>:
 800527c:	6841      	ldr	r1, [r0, #4]
 800527e:	4b0c      	ldr	r3, [pc, #48]	@ (80052b0 <cleanup_stdio+0x34>)
 8005280:	4299      	cmp	r1, r3
 8005282:	b510      	push	{r4, lr}
 8005284:	4604      	mov	r4, r0
 8005286:	d001      	beq.n	800528c <cleanup_stdio+0x10>
 8005288:	f002 f94e 	bl	8007528 <_fflush_r>
 800528c:	68a1      	ldr	r1, [r4, #8]
 800528e:	4b09      	ldr	r3, [pc, #36]	@ (80052b4 <cleanup_stdio+0x38>)
 8005290:	4299      	cmp	r1, r3
 8005292:	d002      	beq.n	800529a <cleanup_stdio+0x1e>
 8005294:	4620      	mov	r0, r4
 8005296:	f002 f947 	bl	8007528 <_fflush_r>
 800529a:	68e1      	ldr	r1, [r4, #12]
 800529c:	4b06      	ldr	r3, [pc, #24]	@ (80052b8 <cleanup_stdio+0x3c>)
 800529e:	4299      	cmp	r1, r3
 80052a0:	d004      	beq.n	80052ac <cleanup_stdio+0x30>
 80052a2:	4620      	mov	r0, r4
 80052a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052a8:	f002 b93e 	b.w	8007528 <_fflush_r>
 80052ac:	bd10      	pop	{r4, pc}
 80052ae:	bf00      	nop
 80052b0:	20003b04 	.word	0x20003b04
 80052b4:	20003b6c 	.word	0x20003b6c
 80052b8:	20003bd4 	.word	0x20003bd4

080052bc <global_stdio_init.part.0>:
 80052bc:	b510      	push	{r4, lr}
 80052be:	4b0b      	ldr	r3, [pc, #44]	@ (80052ec <global_stdio_init.part.0+0x30>)
 80052c0:	4c0b      	ldr	r4, [pc, #44]	@ (80052f0 <global_stdio_init.part.0+0x34>)
 80052c2:	4a0c      	ldr	r2, [pc, #48]	@ (80052f4 <global_stdio_init.part.0+0x38>)
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	4620      	mov	r0, r4
 80052c8:	2200      	movs	r2, #0
 80052ca:	2104      	movs	r1, #4
 80052cc:	f7ff ff94 	bl	80051f8 <std>
 80052d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80052d4:	2201      	movs	r2, #1
 80052d6:	2109      	movs	r1, #9
 80052d8:	f7ff ff8e 	bl	80051f8 <std>
 80052dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80052e0:	2202      	movs	r2, #2
 80052e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052e6:	2112      	movs	r1, #18
 80052e8:	f7ff bf86 	b.w	80051f8 <std>
 80052ec:	20003c3c 	.word	0x20003c3c
 80052f0:	20003b04 	.word	0x20003b04
 80052f4:	08005265 	.word	0x08005265

080052f8 <__sfp_lock_acquire>:
 80052f8:	4801      	ldr	r0, [pc, #4]	@ (8005300 <__sfp_lock_acquire+0x8>)
 80052fa:	f000 b94c 	b.w	8005596 <__retarget_lock_acquire_recursive>
 80052fe:	bf00      	nop
 8005300:	20003c45 	.word	0x20003c45

08005304 <__sfp_lock_release>:
 8005304:	4801      	ldr	r0, [pc, #4]	@ (800530c <__sfp_lock_release+0x8>)
 8005306:	f000 b947 	b.w	8005598 <__retarget_lock_release_recursive>
 800530a:	bf00      	nop
 800530c:	20003c45 	.word	0x20003c45

08005310 <__sinit>:
 8005310:	b510      	push	{r4, lr}
 8005312:	4604      	mov	r4, r0
 8005314:	f7ff fff0 	bl	80052f8 <__sfp_lock_acquire>
 8005318:	6a23      	ldr	r3, [r4, #32]
 800531a:	b11b      	cbz	r3, 8005324 <__sinit+0x14>
 800531c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005320:	f7ff bff0 	b.w	8005304 <__sfp_lock_release>
 8005324:	4b04      	ldr	r3, [pc, #16]	@ (8005338 <__sinit+0x28>)
 8005326:	6223      	str	r3, [r4, #32]
 8005328:	4b04      	ldr	r3, [pc, #16]	@ (800533c <__sinit+0x2c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1f5      	bne.n	800531c <__sinit+0xc>
 8005330:	f7ff ffc4 	bl	80052bc <global_stdio_init.part.0>
 8005334:	e7f2      	b.n	800531c <__sinit+0xc>
 8005336:	bf00      	nop
 8005338:	0800527d 	.word	0x0800527d
 800533c:	20003c3c 	.word	0x20003c3c

08005340 <_fwalk_sglue>:
 8005340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005344:	4607      	mov	r7, r0
 8005346:	4688      	mov	r8, r1
 8005348:	4614      	mov	r4, r2
 800534a:	2600      	movs	r6, #0
 800534c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005350:	f1b9 0901 	subs.w	r9, r9, #1
 8005354:	d505      	bpl.n	8005362 <_fwalk_sglue+0x22>
 8005356:	6824      	ldr	r4, [r4, #0]
 8005358:	2c00      	cmp	r4, #0
 800535a:	d1f7      	bne.n	800534c <_fwalk_sglue+0xc>
 800535c:	4630      	mov	r0, r6
 800535e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005362:	89ab      	ldrh	r3, [r5, #12]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d907      	bls.n	8005378 <_fwalk_sglue+0x38>
 8005368:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800536c:	3301      	adds	r3, #1
 800536e:	d003      	beq.n	8005378 <_fwalk_sglue+0x38>
 8005370:	4629      	mov	r1, r5
 8005372:	4638      	mov	r0, r7
 8005374:	47c0      	blx	r8
 8005376:	4306      	orrs	r6, r0
 8005378:	3568      	adds	r5, #104	@ 0x68
 800537a:	e7e9      	b.n	8005350 <_fwalk_sglue+0x10>

0800537c <siprintf>:
 800537c:	b40e      	push	{r1, r2, r3}
 800537e:	b500      	push	{lr}
 8005380:	b09c      	sub	sp, #112	@ 0x70
 8005382:	ab1d      	add	r3, sp, #116	@ 0x74
 8005384:	9002      	str	r0, [sp, #8]
 8005386:	9006      	str	r0, [sp, #24]
 8005388:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800538c:	4809      	ldr	r0, [pc, #36]	@ (80053b4 <siprintf+0x38>)
 800538e:	9107      	str	r1, [sp, #28]
 8005390:	9104      	str	r1, [sp, #16]
 8005392:	4909      	ldr	r1, [pc, #36]	@ (80053b8 <siprintf+0x3c>)
 8005394:	f853 2b04 	ldr.w	r2, [r3], #4
 8005398:	9105      	str	r1, [sp, #20]
 800539a:	6800      	ldr	r0, [r0, #0]
 800539c:	9301      	str	r3, [sp, #4]
 800539e:	a902      	add	r1, sp, #8
 80053a0:	f001 fc28 	bl	8006bf4 <_svfiprintf_r>
 80053a4:	9b02      	ldr	r3, [sp, #8]
 80053a6:	2200      	movs	r2, #0
 80053a8:	701a      	strb	r2, [r3, #0]
 80053aa:	b01c      	add	sp, #112	@ 0x70
 80053ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80053b0:	b003      	add	sp, #12
 80053b2:	4770      	bx	lr
 80053b4:	2000001c 	.word	0x2000001c
 80053b8:	ffff0208 	.word	0xffff0208

080053bc <siscanf>:
 80053bc:	b40e      	push	{r1, r2, r3}
 80053be:	b530      	push	{r4, r5, lr}
 80053c0:	b09c      	sub	sp, #112	@ 0x70
 80053c2:	ac1f      	add	r4, sp, #124	@ 0x7c
 80053c4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80053c8:	f854 5b04 	ldr.w	r5, [r4], #4
 80053cc:	f8ad 2014 	strh.w	r2, [sp, #20]
 80053d0:	9002      	str	r0, [sp, #8]
 80053d2:	9006      	str	r0, [sp, #24]
 80053d4:	f7fa ff4c 	bl	8000270 <strlen>
 80053d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005408 <siscanf+0x4c>)
 80053da:	9003      	str	r0, [sp, #12]
 80053dc:	9007      	str	r0, [sp, #28]
 80053de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053e0:	480a      	ldr	r0, [pc, #40]	@ (800540c <siscanf+0x50>)
 80053e2:	9401      	str	r4, [sp, #4]
 80053e4:	2300      	movs	r3, #0
 80053e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80053e8:	9314      	str	r3, [sp, #80]	@ 0x50
 80053ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80053ee:	f8ad 3016 	strh.w	r3, [sp, #22]
 80053f2:	462a      	mov	r2, r5
 80053f4:	4623      	mov	r3, r4
 80053f6:	a902      	add	r1, sp, #8
 80053f8:	6800      	ldr	r0, [r0, #0]
 80053fa:	f001 fd4f 	bl	8006e9c <__ssvfiscanf_r>
 80053fe:	b01c      	add	sp, #112	@ 0x70
 8005400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005404:	b003      	add	sp, #12
 8005406:	4770      	bx	lr
 8005408:	08005433 	.word	0x08005433
 800540c:	2000001c 	.word	0x2000001c

08005410 <__sread>:
 8005410:	b510      	push	{r4, lr}
 8005412:	460c      	mov	r4, r1
 8005414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005418:	f000 f86e 	bl	80054f8 <_read_r>
 800541c:	2800      	cmp	r0, #0
 800541e:	bfab      	itete	ge
 8005420:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005422:	89a3      	ldrhlt	r3, [r4, #12]
 8005424:	181b      	addge	r3, r3, r0
 8005426:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800542a:	bfac      	ite	ge
 800542c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800542e:	81a3      	strhlt	r3, [r4, #12]
 8005430:	bd10      	pop	{r4, pc}

08005432 <__seofread>:
 8005432:	2000      	movs	r0, #0
 8005434:	4770      	bx	lr

08005436 <__swrite>:
 8005436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800543a:	461f      	mov	r7, r3
 800543c:	898b      	ldrh	r3, [r1, #12]
 800543e:	05db      	lsls	r3, r3, #23
 8005440:	4605      	mov	r5, r0
 8005442:	460c      	mov	r4, r1
 8005444:	4616      	mov	r6, r2
 8005446:	d505      	bpl.n	8005454 <__swrite+0x1e>
 8005448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800544c:	2302      	movs	r3, #2
 800544e:	2200      	movs	r2, #0
 8005450:	f000 f840 	bl	80054d4 <_lseek_r>
 8005454:	89a3      	ldrh	r3, [r4, #12]
 8005456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800545a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800545e:	81a3      	strh	r3, [r4, #12]
 8005460:	4632      	mov	r2, r6
 8005462:	463b      	mov	r3, r7
 8005464:	4628      	mov	r0, r5
 8005466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800546a:	f000 b857 	b.w	800551c <_write_r>

0800546e <__sseek>:
 800546e:	b510      	push	{r4, lr}
 8005470:	460c      	mov	r4, r1
 8005472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005476:	f000 f82d 	bl	80054d4 <_lseek_r>
 800547a:	1c43      	adds	r3, r0, #1
 800547c:	89a3      	ldrh	r3, [r4, #12]
 800547e:	bf15      	itete	ne
 8005480:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005482:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005486:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800548a:	81a3      	strheq	r3, [r4, #12]
 800548c:	bf18      	it	ne
 800548e:	81a3      	strhne	r3, [r4, #12]
 8005490:	bd10      	pop	{r4, pc}

08005492 <__sclose>:
 8005492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005496:	f000 b80d 	b.w	80054b4 <_close_r>

0800549a <memset>:
 800549a:	4402      	add	r2, r0
 800549c:	4603      	mov	r3, r0
 800549e:	4293      	cmp	r3, r2
 80054a0:	d100      	bne.n	80054a4 <memset+0xa>
 80054a2:	4770      	bx	lr
 80054a4:	f803 1b01 	strb.w	r1, [r3], #1
 80054a8:	e7f9      	b.n	800549e <memset+0x4>
	...

080054ac <_localeconv_r>:
 80054ac:	4800      	ldr	r0, [pc, #0]	@ (80054b0 <_localeconv_r+0x4>)
 80054ae:	4770      	bx	lr
 80054b0:	2000015c 	.word	0x2000015c

080054b4 <_close_r>:
 80054b4:	b538      	push	{r3, r4, r5, lr}
 80054b6:	4d06      	ldr	r5, [pc, #24]	@ (80054d0 <_close_r+0x1c>)
 80054b8:	2300      	movs	r3, #0
 80054ba:	4604      	mov	r4, r0
 80054bc:	4608      	mov	r0, r1
 80054be:	602b      	str	r3, [r5, #0]
 80054c0:	f7fc f962 	bl	8001788 <_close>
 80054c4:	1c43      	adds	r3, r0, #1
 80054c6:	d102      	bne.n	80054ce <_close_r+0x1a>
 80054c8:	682b      	ldr	r3, [r5, #0]
 80054ca:	b103      	cbz	r3, 80054ce <_close_r+0x1a>
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	bd38      	pop	{r3, r4, r5, pc}
 80054d0:	20003c40 	.word	0x20003c40

080054d4 <_lseek_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	4d07      	ldr	r5, [pc, #28]	@ (80054f4 <_lseek_r+0x20>)
 80054d8:	4604      	mov	r4, r0
 80054da:	4608      	mov	r0, r1
 80054dc:	4611      	mov	r1, r2
 80054de:	2200      	movs	r2, #0
 80054e0:	602a      	str	r2, [r5, #0]
 80054e2:	461a      	mov	r2, r3
 80054e4:	f7fc f977 	bl	80017d6 <_lseek>
 80054e8:	1c43      	adds	r3, r0, #1
 80054ea:	d102      	bne.n	80054f2 <_lseek_r+0x1e>
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	b103      	cbz	r3, 80054f2 <_lseek_r+0x1e>
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	bd38      	pop	{r3, r4, r5, pc}
 80054f4:	20003c40 	.word	0x20003c40

080054f8 <_read_r>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	4d07      	ldr	r5, [pc, #28]	@ (8005518 <_read_r+0x20>)
 80054fc:	4604      	mov	r4, r0
 80054fe:	4608      	mov	r0, r1
 8005500:	4611      	mov	r1, r2
 8005502:	2200      	movs	r2, #0
 8005504:	602a      	str	r2, [r5, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	f7fc f905 	bl	8001716 <_read>
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d102      	bne.n	8005516 <_read_r+0x1e>
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	b103      	cbz	r3, 8005516 <_read_r+0x1e>
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	bd38      	pop	{r3, r4, r5, pc}
 8005518:	20003c40 	.word	0x20003c40

0800551c <_write_r>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	4d07      	ldr	r5, [pc, #28]	@ (800553c <_write_r+0x20>)
 8005520:	4604      	mov	r4, r0
 8005522:	4608      	mov	r0, r1
 8005524:	4611      	mov	r1, r2
 8005526:	2200      	movs	r2, #0
 8005528:	602a      	str	r2, [r5, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	f7fc f910 	bl	8001750 <_write>
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	d102      	bne.n	800553a <_write_r+0x1e>
 8005534:	682b      	ldr	r3, [r5, #0]
 8005536:	b103      	cbz	r3, 800553a <_write_r+0x1e>
 8005538:	6023      	str	r3, [r4, #0]
 800553a:	bd38      	pop	{r3, r4, r5, pc}
 800553c:	20003c40 	.word	0x20003c40

08005540 <__errno>:
 8005540:	4b01      	ldr	r3, [pc, #4]	@ (8005548 <__errno+0x8>)
 8005542:	6818      	ldr	r0, [r3, #0]
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	2000001c 	.word	0x2000001c

0800554c <__libc_init_array>:
 800554c:	b570      	push	{r4, r5, r6, lr}
 800554e:	4d0d      	ldr	r5, [pc, #52]	@ (8005584 <__libc_init_array+0x38>)
 8005550:	4c0d      	ldr	r4, [pc, #52]	@ (8005588 <__libc_init_array+0x3c>)
 8005552:	1b64      	subs	r4, r4, r5
 8005554:	10a4      	asrs	r4, r4, #2
 8005556:	2600      	movs	r6, #0
 8005558:	42a6      	cmp	r6, r4
 800555a:	d109      	bne.n	8005570 <__libc_init_array+0x24>
 800555c:	4d0b      	ldr	r5, [pc, #44]	@ (800558c <__libc_init_array+0x40>)
 800555e:	4c0c      	ldr	r4, [pc, #48]	@ (8005590 <__libc_init_array+0x44>)
 8005560:	f002 fee0 	bl	8008324 <_init>
 8005564:	1b64      	subs	r4, r4, r5
 8005566:	10a4      	asrs	r4, r4, #2
 8005568:	2600      	movs	r6, #0
 800556a:	42a6      	cmp	r6, r4
 800556c:	d105      	bne.n	800557a <__libc_init_array+0x2e>
 800556e:	bd70      	pop	{r4, r5, r6, pc}
 8005570:	f855 3b04 	ldr.w	r3, [r5], #4
 8005574:	4798      	blx	r3
 8005576:	3601      	adds	r6, #1
 8005578:	e7ee      	b.n	8005558 <__libc_init_array+0xc>
 800557a:	f855 3b04 	ldr.w	r3, [r5], #4
 800557e:	4798      	blx	r3
 8005580:	3601      	adds	r6, #1
 8005582:	e7f2      	b.n	800556a <__libc_init_array+0x1e>
 8005584:	080087e4 	.word	0x080087e4
 8005588:	080087e4 	.word	0x080087e4
 800558c:	080087e4 	.word	0x080087e4
 8005590:	080087e8 	.word	0x080087e8

08005594 <__retarget_lock_init_recursive>:
 8005594:	4770      	bx	lr

08005596 <__retarget_lock_acquire_recursive>:
 8005596:	4770      	bx	lr

08005598 <__retarget_lock_release_recursive>:
 8005598:	4770      	bx	lr

0800559a <quorem>:
 800559a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559e:	6903      	ldr	r3, [r0, #16]
 80055a0:	690c      	ldr	r4, [r1, #16]
 80055a2:	42a3      	cmp	r3, r4
 80055a4:	4607      	mov	r7, r0
 80055a6:	db7e      	blt.n	80056a6 <quorem+0x10c>
 80055a8:	3c01      	subs	r4, #1
 80055aa:	f101 0814 	add.w	r8, r1, #20
 80055ae:	00a3      	lsls	r3, r4, #2
 80055b0:	f100 0514 	add.w	r5, r0, #20
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055ba:	9301      	str	r3, [sp, #4]
 80055bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80055c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055c4:	3301      	adds	r3, #1
 80055c6:	429a      	cmp	r2, r3
 80055c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80055d0:	d32e      	bcc.n	8005630 <quorem+0x96>
 80055d2:	f04f 0a00 	mov.w	sl, #0
 80055d6:	46c4      	mov	ip, r8
 80055d8:	46ae      	mov	lr, r5
 80055da:	46d3      	mov	fp, sl
 80055dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80055e0:	b298      	uxth	r0, r3
 80055e2:	fb06 a000 	mla	r0, r6, r0, sl
 80055e6:	0c02      	lsrs	r2, r0, #16
 80055e8:	0c1b      	lsrs	r3, r3, #16
 80055ea:	fb06 2303 	mla	r3, r6, r3, r2
 80055ee:	f8de 2000 	ldr.w	r2, [lr]
 80055f2:	b280      	uxth	r0, r0
 80055f4:	b292      	uxth	r2, r2
 80055f6:	1a12      	subs	r2, r2, r0
 80055f8:	445a      	add	r2, fp
 80055fa:	f8de 0000 	ldr.w	r0, [lr]
 80055fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005602:	b29b      	uxth	r3, r3
 8005604:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005608:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800560c:	b292      	uxth	r2, r2
 800560e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005612:	45e1      	cmp	r9, ip
 8005614:	f84e 2b04 	str.w	r2, [lr], #4
 8005618:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800561c:	d2de      	bcs.n	80055dc <quorem+0x42>
 800561e:	9b00      	ldr	r3, [sp, #0]
 8005620:	58eb      	ldr	r3, [r5, r3]
 8005622:	b92b      	cbnz	r3, 8005630 <quorem+0x96>
 8005624:	9b01      	ldr	r3, [sp, #4]
 8005626:	3b04      	subs	r3, #4
 8005628:	429d      	cmp	r5, r3
 800562a:	461a      	mov	r2, r3
 800562c:	d32f      	bcc.n	800568e <quorem+0xf4>
 800562e:	613c      	str	r4, [r7, #16]
 8005630:	4638      	mov	r0, r7
 8005632:	f001 f97b 	bl	800692c <__mcmp>
 8005636:	2800      	cmp	r0, #0
 8005638:	db25      	blt.n	8005686 <quorem+0xec>
 800563a:	4629      	mov	r1, r5
 800563c:	2000      	movs	r0, #0
 800563e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005642:	f8d1 c000 	ldr.w	ip, [r1]
 8005646:	fa1f fe82 	uxth.w	lr, r2
 800564a:	fa1f f38c 	uxth.w	r3, ip
 800564e:	eba3 030e 	sub.w	r3, r3, lr
 8005652:	4403      	add	r3, r0
 8005654:	0c12      	lsrs	r2, r2, #16
 8005656:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800565a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800565e:	b29b      	uxth	r3, r3
 8005660:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005664:	45c1      	cmp	r9, r8
 8005666:	f841 3b04 	str.w	r3, [r1], #4
 800566a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800566e:	d2e6      	bcs.n	800563e <quorem+0xa4>
 8005670:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005674:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005678:	b922      	cbnz	r2, 8005684 <quorem+0xea>
 800567a:	3b04      	subs	r3, #4
 800567c:	429d      	cmp	r5, r3
 800567e:	461a      	mov	r2, r3
 8005680:	d30b      	bcc.n	800569a <quorem+0x100>
 8005682:	613c      	str	r4, [r7, #16]
 8005684:	3601      	adds	r6, #1
 8005686:	4630      	mov	r0, r6
 8005688:	b003      	add	sp, #12
 800568a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800568e:	6812      	ldr	r2, [r2, #0]
 8005690:	3b04      	subs	r3, #4
 8005692:	2a00      	cmp	r2, #0
 8005694:	d1cb      	bne.n	800562e <quorem+0x94>
 8005696:	3c01      	subs	r4, #1
 8005698:	e7c6      	b.n	8005628 <quorem+0x8e>
 800569a:	6812      	ldr	r2, [r2, #0]
 800569c:	3b04      	subs	r3, #4
 800569e:	2a00      	cmp	r2, #0
 80056a0:	d1ef      	bne.n	8005682 <quorem+0xe8>
 80056a2:	3c01      	subs	r4, #1
 80056a4:	e7ea      	b.n	800567c <quorem+0xe2>
 80056a6:	2000      	movs	r0, #0
 80056a8:	e7ee      	b.n	8005688 <quorem+0xee>
 80056aa:	0000      	movs	r0, r0
 80056ac:	0000      	movs	r0, r0
	...

080056b0 <_dtoa_r>:
 80056b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b4:	69c7      	ldr	r7, [r0, #28]
 80056b6:	b099      	sub	sp, #100	@ 0x64
 80056b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80056bc:	ec55 4b10 	vmov	r4, r5, d0
 80056c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80056c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80056c4:	4683      	mov	fp, r0
 80056c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80056c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80056ca:	b97f      	cbnz	r7, 80056ec <_dtoa_r+0x3c>
 80056cc:	2010      	movs	r0, #16
 80056ce:	f000 fdfd 	bl	80062cc <malloc>
 80056d2:	4602      	mov	r2, r0
 80056d4:	f8cb 001c 	str.w	r0, [fp, #28]
 80056d8:	b920      	cbnz	r0, 80056e4 <_dtoa_r+0x34>
 80056da:	4ba7      	ldr	r3, [pc, #668]	@ (8005978 <_dtoa_r+0x2c8>)
 80056dc:	21ef      	movs	r1, #239	@ 0xef
 80056de:	48a7      	ldr	r0, [pc, #668]	@ (800597c <_dtoa_r+0x2cc>)
 80056e0:	f001 fff6 	bl	80076d0 <__assert_func>
 80056e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80056e8:	6007      	str	r7, [r0, #0]
 80056ea:	60c7      	str	r7, [r0, #12]
 80056ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056f0:	6819      	ldr	r1, [r3, #0]
 80056f2:	b159      	cbz	r1, 800570c <_dtoa_r+0x5c>
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	604a      	str	r2, [r1, #4]
 80056f8:	2301      	movs	r3, #1
 80056fa:	4093      	lsls	r3, r2
 80056fc:	608b      	str	r3, [r1, #8]
 80056fe:	4658      	mov	r0, fp
 8005700:	f000 feda 	bl	80064b8 <_Bfree>
 8005704:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	1e2b      	subs	r3, r5, #0
 800570e:	bfb9      	ittee	lt
 8005710:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005714:	9303      	strlt	r3, [sp, #12]
 8005716:	2300      	movge	r3, #0
 8005718:	6033      	strge	r3, [r6, #0]
 800571a:	9f03      	ldr	r7, [sp, #12]
 800571c:	4b98      	ldr	r3, [pc, #608]	@ (8005980 <_dtoa_r+0x2d0>)
 800571e:	bfbc      	itt	lt
 8005720:	2201      	movlt	r2, #1
 8005722:	6032      	strlt	r2, [r6, #0]
 8005724:	43bb      	bics	r3, r7
 8005726:	d112      	bne.n	800574e <_dtoa_r+0x9e>
 8005728:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800572a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005734:	4323      	orrs	r3, r4
 8005736:	f000 854d 	beq.w	80061d4 <_dtoa_r+0xb24>
 800573a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800573c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005994 <_dtoa_r+0x2e4>
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 854f 	beq.w	80061e4 <_dtoa_r+0xb34>
 8005746:	f10a 0303 	add.w	r3, sl, #3
 800574a:	f000 bd49 	b.w	80061e0 <_dtoa_r+0xb30>
 800574e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005752:	2200      	movs	r2, #0
 8005754:	ec51 0b17 	vmov	r0, r1, d7
 8005758:	2300      	movs	r3, #0
 800575a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800575e:	f7fb f9b3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005762:	4680      	mov	r8, r0
 8005764:	b158      	cbz	r0, 800577e <_dtoa_r+0xce>
 8005766:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005768:	2301      	movs	r3, #1
 800576a:	6013      	str	r3, [r2, #0]
 800576c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800576e:	b113      	cbz	r3, 8005776 <_dtoa_r+0xc6>
 8005770:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005772:	4b84      	ldr	r3, [pc, #528]	@ (8005984 <_dtoa_r+0x2d4>)
 8005774:	6013      	str	r3, [r2, #0]
 8005776:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005998 <_dtoa_r+0x2e8>
 800577a:	f000 bd33 	b.w	80061e4 <_dtoa_r+0xb34>
 800577e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005782:	aa16      	add	r2, sp, #88	@ 0x58
 8005784:	a917      	add	r1, sp, #92	@ 0x5c
 8005786:	4658      	mov	r0, fp
 8005788:	f001 f980 	bl	8006a8c <__d2b>
 800578c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005790:	4681      	mov	r9, r0
 8005792:	2e00      	cmp	r6, #0
 8005794:	d077      	beq.n	8005886 <_dtoa_r+0x1d6>
 8005796:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005798:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800579c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80057a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80057ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80057b0:	4619      	mov	r1, r3
 80057b2:	2200      	movs	r2, #0
 80057b4:	4b74      	ldr	r3, [pc, #464]	@ (8005988 <_dtoa_r+0x2d8>)
 80057b6:	f7fa fd67 	bl	8000288 <__aeabi_dsub>
 80057ba:	a369      	add	r3, pc, #420	@ (adr r3, 8005960 <_dtoa_r+0x2b0>)
 80057bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c0:	f7fa ff1a 	bl	80005f8 <__aeabi_dmul>
 80057c4:	a368      	add	r3, pc, #416	@ (adr r3, 8005968 <_dtoa_r+0x2b8>)
 80057c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ca:	f7fa fd5f 	bl	800028c <__adddf3>
 80057ce:	4604      	mov	r4, r0
 80057d0:	4630      	mov	r0, r6
 80057d2:	460d      	mov	r5, r1
 80057d4:	f7fa fea6 	bl	8000524 <__aeabi_i2d>
 80057d8:	a365      	add	r3, pc, #404	@ (adr r3, 8005970 <_dtoa_r+0x2c0>)
 80057da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057de:	f7fa ff0b 	bl	80005f8 <__aeabi_dmul>
 80057e2:	4602      	mov	r2, r0
 80057e4:	460b      	mov	r3, r1
 80057e6:	4620      	mov	r0, r4
 80057e8:	4629      	mov	r1, r5
 80057ea:	f7fa fd4f 	bl	800028c <__adddf3>
 80057ee:	4604      	mov	r4, r0
 80057f0:	460d      	mov	r5, r1
 80057f2:	f7fb f9b1 	bl	8000b58 <__aeabi_d2iz>
 80057f6:	2200      	movs	r2, #0
 80057f8:	4607      	mov	r7, r0
 80057fa:	2300      	movs	r3, #0
 80057fc:	4620      	mov	r0, r4
 80057fe:	4629      	mov	r1, r5
 8005800:	f7fb f96c 	bl	8000adc <__aeabi_dcmplt>
 8005804:	b140      	cbz	r0, 8005818 <_dtoa_r+0x168>
 8005806:	4638      	mov	r0, r7
 8005808:	f7fa fe8c 	bl	8000524 <__aeabi_i2d>
 800580c:	4622      	mov	r2, r4
 800580e:	462b      	mov	r3, r5
 8005810:	f7fb f95a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005814:	b900      	cbnz	r0, 8005818 <_dtoa_r+0x168>
 8005816:	3f01      	subs	r7, #1
 8005818:	2f16      	cmp	r7, #22
 800581a:	d851      	bhi.n	80058c0 <_dtoa_r+0x210>
 800581c:	4b5b      	ldr	r3, [pc, #364]	@ (800598c <_dtoa_r+0x2dc>)
 800581e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005826:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800582a:	f7fb f957 	bl	8000adc <__aeabi_dcmplt>
 800582e:	2800      	cmp	r0, #0
 8005830:	d048      	beq.n	80058c4 <_dtoa_r+0x214>
 8005832:	3f01      	subs	r7, #1
 8005834:	2300      	movs	r3, #0
 8005836:	9312      	str	r3, [sp, #72]	@ 0x48
 8005838:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800583a:	1b9b      	subs	r3, r3, r6
 800583c:	1e5a      	subs	r2, r3, #1
 800583e:	bf44      	itt	mi
 8005840:	f1c3 0801 	rsbmi	r8, r3, #1
 8005844:	2300      	movmi	r3, #0
 8005846:	9208      	str	r2, [sp, #32]
 8005848:	bf54      	ite	pl
 800584a:	f04f 0800 	movpl.w	r8, #0
 800584e:	9308      	strmi	r3, [sp, #32]
 8005850:	2f00      	cmp	r7, #0
 8005852:	db39      	blt.n	80058c8 <_dtoa_r+0x218>
 8005854:	9b08      	ldr	r3, [sp, #32]
 8005856:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005858:	443b      	add	r3, r7
 800585a:	9308      	str	r3, [sp, #32]
 800585c:	2300      	movs	r3, #0
 800585e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005862:	2b09      	cmp	r3, #9
 8005864:	d864      	bhi.n	8005930 <_dtoa_r+0x280>
 8005866:	2b05      	cmp	r3, #5
 8005868:	bfc4      	itt	gt
 800586a:	3b04      	subgt	r3, #4
 800586c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800586e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005870:	f1a3 0302 	sub.w	r3, r3, #2
 8005874:	bfcc      	ite	gt
 8005876:	2400      	movgt	r4, #0
 8005878:	2401      	movle	r4, #1
 800587a:	2b03      	cmp	r3, #3
 800587c:	d863      	bhi.n	8005946 <_dtoa_r+0x296>
 800587e:	e8df f003 	tbb	[pc, r3]
 8005882:	372a      	.short	0x372a
 8005884:	5535      	.short	0x5535
 8005886:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800588a:	441e      	add	r6, r3
 800588c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005890:	2b20      	cmp	r3, #32
 8005892:	bfc1      	itttt	gt
 8005894:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005898:	409f      	lslgt	r7, r3
 800589a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800589e:	fa24 f303 	lsrgt.w	r3, r4, r3
 80058a2:	bfd6      	itet	le
 80058a4:	f1c3 0320 	rsble	r3, r3, #32
 80058a8:	ea47 0003 	orrgt.w	r0, r7, r3
 80058ac:	fa04 f003 	lslle.w	r0, r4, r3
 80058b0:	f7fa fe28 	bl	8000504 <__aeabi_ui2d>
 80058b4:	2201      	movs	r2, #1
 80058b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80058ba:	3e01      	subs	r6, #1
 80058bc:	9214      	str	r2, [sp, #80]	@ 0x50
 80058be:	e777      	b.n	80057b0 <_dtoa_r+0x100>
 80058c0:	2301      	movs	r3, #1
 80058c2:	e7b8      	b.n	8005836 <_dtoa_r+0x186>
 80058c4:	9012      	str	r0, [sp, #72]	@ 0x48
 80058c6:	e7b7      	b.n	8005838 <_dtoa_r+0x188>
 80058c8:	427b      	negs	r3, r7
 80058ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80058cc:	2300      	movs	r3, #0
 80058ce:	eba8 0807 	sub.w	r8, r8, r7
 80058d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80058d4:	e7c4      	b.n	8005860 <_dtoa_r+0x1b0>
 80058d6:	2300      	movs	r3, #0
 80058d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058dc:	2b00      	cmp	r3, #0
 80058de:	dc35      	bgt.n	800594c <_dtoa_r+0x29c>
 80058e0:	2301      	movs	r3, #1
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	9307      	str	r3, [sp, #28]
 80058e6:	461a      	mov	r2, r3
 80058e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80058ea:	e00b      	b.n	8005904 <_dtoa_r+0x254>
 80058ec:	2301      	movs	r3, #1
 80058ee:	e7f3      	b.n	80058d8 <_dtoa_r+0x228>
 80058f0:	2300      	movs	r3, #0
 80058f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058f6:	18fb      	adds	r3, r7, r3
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	3301      	adds	r3, #1
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	9307      	str	r3, [sp, #28]
 8005900:	bfb8      	it	lt
 8005902:	2301      	movlt	r3, #1
 8005904:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005908:	2100      	movs	r1, #0
 800590a:	2204      	movs	r2, #4
 800590c:	f102 0514 	add.w	r5, r2, #20
 8005910:	429d      	cmp	r5, r3
 8005912:	d91f      	bls.n	8005954 <_dtoa_r+0x2a4>
 8005914:	6041      	str	r1, [r0, #4]
 8005916:	4658      	mov	r0, fp
 8005918:	f000 fd8e 	bl	8006438 <_Balloc>
 800591c:	4682      	mov	sl, r0
 800591e:	2800      	cmp	r0, #0
 8005920:	d13c      	bne.n	800599c <_dtoa_r+0x2ec>
 8005922:	4b1b      	ldr	r3, [pc, #108]	@ (8005990 <_dtoa_r+0x2e0>)
 8005924:	4602      	mov	r2, r0
 8005926:	f240 11af 	movw	r1, #431	@ 0x1af
 800592a:	e6d8      	b.n	80056de <_dtoa_r+0x2e>
 800592c:	2301      	movs	r3, #1
 800592e:	e7e0      	b.n	80058f2 <_dtoa_r+0x242>
 8005930:	2401      	movs	r4, #1
 8005932:	2300      	movs	r3, #0
 8005934:	9309      	str	r3, [sp, #36]	@ 0x24
 8005936:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005938:	f04f 33ff 	mov.w	r3, #4294967295
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	9307      	str	r3, [sp, #28]
 8005940:	2200      	movs	r2, #0
 8005942:	2312      	movs	r3, #18
 8005944:	e7d0      	b.n	80058e8 <_dtoa_r+0x238>
 8005946:	2301      	movs	r3, #1
 8005948:	930b      	str	r3, [sp, #44]	@ 0x2c
 800594a:	e7f5      	b.n	8005938 <_dtoa_r+0x288>
 800594c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	9307      	str	r3, [sp, #28]
 8005952:	e7d7      	b.n	8005904 <_dtoa_r+0x254>
 8005954:	3101      	adds	r1, #1
 8005956:	0052      	lsls	r2, r2, #1
 8005958:	e7d8      	b.n	800590c <_dtoa_r+0x25c>
 800595a:	bf00      	nop
 800595c:	f3af 8000 	nop.w
 8005960:	636f4361 	.word	0x636f4361
 8005964:	3fd287a7 	.word	0x3fd287a7
 8005968:	8b60c8b3 	.word	0x8b60c8b3
 800596c:	3fc68a28 	.word	0x3fc68a28
 8005970:	509f79fb 	.word	0x509f79fb
 8005974:	3fd34413 	.word	0x3fd34413
 8005978:	0800848f 	.word	0x0800848f
 800597c:	080084a6 	.word	0x080084a6
 8005980:	7ff00000 	.word	0x7ff00000
 8005984:	08008690 	.word	0x08008690
 8005988:	3ff80000 	.word	0x3ff80000
 800598c:	080085a0 	.word	0x080085a0
 8005990:	080084fe 	.word	0x080084fe
 8005994:	0800848b 	.word	0x0800848b
 8005998:	0800868f 	.word	0x0800868f
 800599c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80059a0:	6018      	str	r0, [r3, #0]
 80059a2:	9b07      	ldr	r3, [sp, #28]
 80059a4:	2b0e      	cmp	r3, #14
 80059a6:	f200 80a4 	bhi.w	8005af2 <_dtoa_r+0x442>
 80059aa:	2c00      	cmp	r4, #0
 80059ac:	f000 80a1 	beq.w	8005af2 <_dtoa_r+0x442>
 80059b0:	2f00      	cmp	r7, #0
 80059b2:	dd33      	ble.n	8005a1c <_dtoa_r+0x36c>
 80059b4:	4bad      	ldr	r3, [pc, #692]	@ (8005c6c <_dtoa_r+0x5bc>)
 80059b6:	f007 020f 	and.w	r2, r7, #15
 80059ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059be:	ed93 7b00 	vldr	d7, [r3]
 80059c2:	05f8      	lsls	r0, r7, #23
 80059c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80059c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80059cc:	d516      	bpl.n	80059fc <_dtoa_r+0x34c>
 80059ce:	4ba8      	ldr	r3, [pc, #672]	@ (8005c70 <_dtoa_r+0x5c0>)
 80059d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059d8:	f7fa ff38 	bl	800084c <__aeabi_ddiv>
 80059dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059e0:	f004 040f 	and.w	r4, r4, #15
 80059e4:	2603      	movs	r6, #3
 80059e6:	4da2      	ldr	r5, [pc, #648]	@ (8005c70 <_dtoa_r+0x5c0>)
 80059e8:	b954      	cbnz	r4, 8005a00 <_dtoa_r+0x350>
 80059ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059f2:	f7fa ff2b 	bl	800084c <__aeabi_ddiv>
 80059f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059fa:	e028      	b.n	8005a4e <_dtoa_r+0x39e>
 80059fc:	2602      	movs	r6, #2
 80059fe:	e7f2      	b.n	80059e6 <_dtoa_r+0x336>
 8005a00:	07e1      	lsls	r1, r4, #31
 8005a02:	d508      	bpl.n	8005a16 <_dtoa_r+0x366>
 8005a04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a0c:	f7fa fdf4 	bl	80005f8 <__aeabi_dmul>
 8005a10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a14:	3601      	adds	r6, #1
 8005a16:	1064      	asrs	r4, r4, #1
 8005a18:	3508      	adds	r5, #8
 8005a1a:	e7e5      	b.n	80059e8 <_dtoa_r+0x338>
 8005a1c:	f000 80d2 	beq.w	8005bc4 <_dtoa_r+0x514>
 8005a20:	427c      	negs	r4, r7
 8005a22:	4b92      	ldr	r3, [pc, #584]	@ (8005c6c <_dtoa_r+0x5bc>)
 8005a24:	4d92      	ldr	r5, [pc, #584]	@ (8005c70 <_dtoa_r+0x5c0>)
 8005a26:	f004 020f 	and.w	r2, r4, #15
 8005a2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a36:	f7fa fddf 	bl	80005f8 <__aeabi_dmul>
 8005a3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a3e:	1124      	asrs	r4, r4, #4
 8005a40:	2300      	movs	r3, #0
 8005a42:	2602      	movs	r6, #2
 8005a44:	2c00      	cmp	r4, #0
 8005a46:	f040 80b2 	bne.w	8005bae <_dtoa_r+0x4fe>
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1d3      	bne.n	80059f6 <_dtoa_r+0x346>
 8005a4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005a50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 80b7 	beq.w	8005bc8 <_dtoa_r+0x518>
 8005a5a:	4b86      	ldr	r3, [pc, #536]	@ (8005c74 <_dtoa_r+0x5c4>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	4620      	mov	r0, r4
 8005a60:	4629      	mov	r1, r5
 8005a62:	f7fb f83b 	bl	8000adc <__aeabi_dcmplt>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	f000 80ae 	beq.w	8005bc8 <_dtoa_r+0x518>
 8005a6c:	9b07      	ldr	r3, [sp, #28]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 80aa 	beq.w	8005bc8 <_dtoa_r+0x518>
 8005a74:	9b00      	ldr	r3, [sp, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	dd37      	ble.n	8005aea <_dtoa_r+0x43a>
 8005a7a:	1e7b      	subs	r3, r7, #1
 8005a7c:	9304      	str	r3, [sp, #16]
 8005a7e:	4620      	mov	r0, r4
 8005a80:	4b7d      	ldr	r3, [pc, #500]	@ (8005c78 <_dtoa_r+0x5c8>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	4629      	mov	r1, r5
 8005a86:	f7fa fdb7 	bl	80005f8 <__aeabi_dmul>
 8005a8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a8e:	9c00      	ldr	r4, [sp, #0]
 8005a90:	3601      	adds	r6, #1
 8005a92:	4630      	mov	r0, r6
 8005a94:	f7fa fd46 	bl	8000524 <__aeabi_i2d>
 8005a98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a9c:	f7fa fdac 	bl	80005f8 <__aeabi_dmul>
 8005aa0:	4b76      	ldr	r3, [pc, #472]	@ (8005c7c <_dtoa_r+0x5cc>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f7fa fbf2 	bl	800028c <__adddf3>
 8005aa8:	4605      	mov	r5, r0
 8005aaa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005aae:	2c00      	cmp	r4, #0
 8005ab0:	f040 808d 	bne.w	8005bce <_dtoa_r+0x51e>
 8005ab4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ab8:	4b71      	ldr	r3, [pc, #452]	@ (8005c80 <_dtoa_r+0x5d0>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	f7fa fbe4 	bl	8000288 <__aeabi_dsub>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ac8:	462a      	mov	r2, r5
 8005aca:	4633      	mov	r3, r6
 8005acc:	f7fb f824 	bl	8000b18 <__aeabi_dcmpgt>
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	f040 828b 	bne.w	8005fec <_dtoa_r+0x93c>
 8005ad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ada:	462a      	mov	r2, r5
 8005adc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005ae0:	f7fa fffc 	bl	8000adc <__aeabi_dcmplt>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	f040 8128 	bne.w	8005d3a <_dtoa_r+0x68a>
 8005aea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005aee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005af2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f2c0 815a 	blt.w	8005dae <_dtoa_r+0x6fe>
 8005afa:	2f0e      	cmp	r7, #14
 8005afc:	f300 8157 	bgt.w	8005dae <_dtoa_r+0x6fe>
 8005b00:	4b5a      	ldr	r3, [pc, #360]	@ (8005c6c <_dtoa_r+0x5bc>)
 8005b02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b06:	ed93 7b00 	vldr	d7, [r3]
 8005b0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	ed8d 7b00 	vstr	d7, [sp]
 8005b12:	da03      	bge.n	8005b1c <_dtoa_r+0x46c>
 8005b14:	9b07      	ldr	r3, [sp, #28]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f340 8101 	ble.w	8005d1e <_dtoa_r+0x66e>
 8005b1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005b20:	4656      	mov	r6, sl
 8005b22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b26:	4620      	mov	r0, r4
 8005b28:	4629      	mov	r1, r5
 8005b2a:	f7fa fe8f 	bl	800084c <__aeabi_ddiv>
 8005b2e:	f7fb f813 	bl	8000b58 <__aeabi_d2iz>
 8005b32:	4680      	mov	r8, r0
 8005b34:	f7fa fcf6 	bl	8000524 <__aeabi_i2d>
 8005b38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b3c:	f7fa fd5c 	bl	80005f8 <__aeabi_dmul>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4620      	mov	r0, r4
 8005b46:	4629      	mov	r1, r5
 8005b48:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005b4c:	f7fa fb9c 	bl	8000288 <__aeabi_dsub>
 8005b50:	f806 4b01 	strb.w	r4, [r6], #1
 8005b54:	9d07      	ldr	r5, [sp, #28]
 8005b56:	eba6 040a 	sub.w	r4, r6, sl
 8005b5a:	42a5      	cmp	r5, r4
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	f040 8117 	bne.w	8005d92 <_dtoa_r+0x6e2>
 8005b64:	f7fa fb92 	bl	800028c <__adddf3>
 8005b68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b6c:	4604      	mov	r4, r0
 8005b6e:	460d      	mov	r5, r1
 8005b70:	f7fa ffd2 	bl	8000b18 <__aeabi_dcmpgt>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	f040 80f9 	bne.w	8005d6c <_dtoa_r+0x6bc>
 8005b7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b7e:	4620      	mov	r0, r4
 8005b80:	4629      	mov	r1, r5
 8005b82:	f7fa ffa1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b86:	b118      	cbz	r0, 8005b90 <_dtoa_r+0x4e0>
 8005b88:	f018 0f01 	tst.w	r8, #1
 8005b8c:	f040 80ee 	bne.w	8005d6c <_dtoa_r+0x6bc>
 8005b90:	4649      	mov	r1, r9
 8005b92:	4658      	mov	r0, fp
 8005b94:	f000 fc90 	bl	80064b8 <_Bfree>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	7033      	strb	r3, [r6, #0]
 8005b9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005b9e:	3701      	adds	r7, #1
 8005ba0:	601f      	str	r7, [r3, #0]
 8005ba2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 831d 	beq.w	80061e4 <_dtoa_r+0xb34>
 8005baa:	601e      	str	r6, [r3, #0]
 8005bac:	e31a      	b.n	80061e4 <_dtoa_r+0xb34>
 8005bae:	07e2      	lsls	r2, r4, #31
 8005bb0:	d505      	bpl.n	8005bbe <_dtoa_r+0x50e>
 8005bb2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005bb6:	f7fa fd1f 	bl	80005f8 <__aeabi_dmul>
 8005bba:	3601      	adds	r6, #1
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	1064      	asrs	r4, r4, #1
 8005bc0:	3508      	adds	r5, #8
 8005bc2:	e73f      	b.n	8005a44 <_dtoa_r+0x394>
 8005bc4:	2602      	movs	r6, #2
 8005bc6:	e742      	b.n	8005a4e <_dtoa_r+0x39e>
 8005bc8:	9c07      	ldr	r4, [sp, #28]
 8005bca:	9704      	str	r7, [sp, #16]
 8005bcc:	e761      	b.n	8005a92 <_dtoa_r+0x3e2>
 8005bce:	4b27      	ldr	r3, [pc, #156]	@ (8005c6c <_dtoa_r+0x5bc>)
 8005bd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005bd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005bd6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005bda:	4454      	add	r4, sl
 8005bdc:	2900      	cmp	r1, #0
 8005bde:	d053      	beq.n	8005c88 <_dtoa_r+0x5d8>
 8005be0:	4928      	ldr	r1, [pc, #160]	@ (8005c84 <_dtoa_r+0x5d4>)
 8005be2:	2000      	movs	r0, #0
 8005be4:	f7fa fe32 	bl	800084c <__aeabi_ddiv>
 8005be8:	4633      	mov	r3, r6
 8005bea:	462a      	mov	r2, r5
 8005bec:	f7fa fb4c 	bl	8000288 <__aeabi_dsub>
 8005bf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005bf4:	4656      	mov	r6, sl
 8005bf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bfa:	f7fa ffad 	bl	8000b58 <__aeabi_d2iz>
 8005bfe:	4605      	mov	r5, r0
 8005c00:	f7fa fc90 	bl	8000524 <__aeabi_i2d>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c0c:	f7fa fb3c 	bl	8000288 <__aeabi_dsub>
 8005c10:	3530      	adds	r5, #48	@ 0x30
 8005c12:	4602      	mov	r2, r0
 8005c14:	460b      	mov	r3, r1
 8005c16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c1a:	f806 5b01 	strb.w	r5, [r6], #1
 8005c1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c22:	f7fa ff5b 	bl	8000adc <__aeabi_dcmplt>
 8005c26:	2800      	cmp	r0, #0
 8005c28:	d171      	bne.n	8005d0e <_dtoa_r+0x65e>
 8005c2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c2e:	4911      	ldr	r1, [pc, #68]	@ (8005c74 <_dtoa_r+0x5c4>)
 8005c30:	2000      	movs	r0, #0
 8005c32:	f7fa fb29 	bl	8000288 <__aeabi_dsub>
 8005c36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c3a:	f7fa ff4f 	bl	8000adc <__aeabi_dcmplt>
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	f040 8095 	bne.w	8005d6e <_dtoa_r+0x6be>
 8005c44:	42a6      	cmp	r6, r4
 8005c46:	f43f af50 	beq.w	8005aea <_dtoa_r+0x43a>
 8005c4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c78 <_dtoa_r+0x5c8>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	f7fa fcd1 	bl	80005f8 <__aeabi_dmul>
 8005c56:	4b08      	ldr	r3, [pc, #32]	@ (8005c78 <_dtoa_r+0x5c8>)
 8005c58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c62:	f7fa fcc9 	bl	80005f8 <__aeabi_dmul>
 8005c66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c6a:	e7c4      	b.n	8005bf6 <_dtoa_r+0x546>
 8005c6c:	080085a0 	.word	0x080085a0
 8005c70:	08008578 	.word	0x08008578
 8005c74:	3ff00000 	.word	0x3ff00000
 8005c78:	40240000 	.word	0x40240000
 8005c7c:	401c0000 	.word	0x401c0000
 8005c80:	40140000 	.word	0x40140000
 8005c84:	3fe00000 	.word	0x3fe00000
 8005c88:	4631      	mov	r1, r6
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	f7fa fcb4 	bl	80005f8 <__aeabi_dmul>
 8005c90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c94:	9415      	str	r4, [sp, #84]	@ 0x54
 8005c96:	4656      	mov	r6, sl
 8005c98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c9c:	f7fa ff5c 	bl	8000b58 <__aeabi_d2iz>
 8005ca0:	4605      	mov	r5, r0
 8005ca2:	f7fa fc3f 	bl	8000524 <__aeabi_i2d>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	460b      	mov	r3, r1
 8005caa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cae:	f7fa faeb 	bl	8000288 <__aeabi_dsub>
 8005cb2:	3530      	adds	r5, #48	@ 0x30
 8005cb4:	f806 5b01 	strb.w	r5, [r6], #1
 8005cb8:	4602      	mov	r2, r0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	42a6      	cmp	r6, r4
 8005cbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005cc2:	f04f 0200 	mov.w	r2, #0
 8005cc6:	d124      	bne.n	8005d12 <_dtoa_r+0x662>
 8005cc8:	4bac      	ldr	r3, [pc, #688]	@ (8005f7c <_dtoa_r+0x8cc>)
 8005cca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005cce:	f7fa fadd 	bl	800028c <__adddf3>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cda:	f7fa ff1d 	bl	8000b18 <__aeabi_dcmpgt>
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	d145      	bne.n	8005d6e <_dtoa_r+0x6be>
 8005ce2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005ce6:	49a5      	ldr	r1, [pc, #660]	@ (8005f7c <_dtoa_r+0x8cc>)
 8005ce8:	2000      	movs	r0, #0
 8005cea:	f7fa facd 	bl	8000288 <__aeabi_dsub>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cf6:	f7fa fef1 	bl	8000adc <__aeabi_dcmplt>
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	f43f aef5 	beq.w	8005aea <_dtoa_r+0x43a>
 8005d00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005d02:	1e73      	subs	r3, r6, #1
 8005d04:	9315      	str	r3, [sp, #84]	@ 0x54
 8005d06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005d0a:	2b30      	cmp	r3, #48	@ 0x30
 8005d0c:	d0f8      	beq.n	8005d00 <_dtoa_r+0x650>
 8005d0e:	9f04      	ldr	r7, [sp, #16]
 8005d10:	e73e      	b.n	8005b90 <_dtoa_r+0x4e0>
 8005d12:	4b9b      	ldr	r3, [pc, #620]	@ (8005f80 <_dtoa_r+0x8d0>)
 8005d14:	f7fa fc70 	bl	80005f8 <__aeabi_dmul>
 8005d18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d1c:	e7bc      	b.n	8005c98 <_dtoa_r+0x5e8>
 8005d1e:	d10c      	bne.n	8005d3a <_dtoa_r+0x68a>
 8005d20:	4b98      	ldr	r3, [pc, #608]	@ (8005f84 <_dtoa_r+0x8d4>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d28:	f7fa fc66 	bl	80005f8 <__aeabi_dmul>
 8005d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d30:	f7fa fee8 	bl	8000b04 <__aeabi_dcmpge>
 8005d34:	2800      	cmp	r0, #0
 8005d36:	f000 8157 	beq.w	8005fe8 <_dtoa_r+0x938>
 8005d3a:	2400      	movs	r4, #0
 8005d3c:	4625      	mov	r5, r4
 8005d3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d40:	43db      	mvns	r3, r3
 8005d42:	9304      	str	r3, [sp, #16]
 8005d44:	4656      	mov	r6, sl
 8005d46:	2700      	movs	r7, #0
 8005d48:	4621      	mov	r1, r4
 8005d4a:	4658      	mov	r0, fp
 8005d4c:	f000 fbb4 	bl	80064b8 <_Bfree>
 8005d50:	2d00      	cmp	r5, #0
 8005d52:	d0dc      	beq.n	8005d0e <_dtoa_r+0x65e>
 8005d54:	b12f      	cbz	r7, 8005d62 <_dtoa_r+0x6b2>
 8005d56:	42af      	cmp	r7, r5
 8005d58:	d003      	beq.n	8005d62 <_dtoa_r+0x6b2>
 8005d5a:	4639      	mov	r1, r7
 8005d5c:	4658      	mov	r0, fp
 8005d5e:	f000 fbab 	bl	80064b8 <_Bfree>
 8005d62:	4629      	mov	r1, r5
 8005d64:	4658      	mov	r0, fp
 8005d66:	f000 fba7 	bl	80064b8 <_Bfree>
 8005d6a:	e7d0      	b.n	8005d0e <_dtoa_r+0x65e>
 8005d6c:	9704      	str	r7, [sp, #16]
 8005d6e:	4633      	mov	r3, r6
 8005d70:	461e      	mov	r6, r3
 8005d72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d76:	2a39      	cmp	r2, #57	@ 0x39
 8005d78:	d107      	bne.n	8005d8a <_dtoa_r+0x6da>
 8005d7a:	459a      	cmp	sl, r3
 8005d7c:	d1f8      	bne.n	8005d70 <_dtoa_r+0x6c0>
 8005d7e:	9a04      	ldr	r2, [sp, #16]
 8005d80:	3201      	adds	r2, #1
 8005d82:	9204      	str	r2, [sp, #16]
 8005d84:	2230      	movs	r2, #48	@ 0x30
 8005d86:	f88a 2000 	strb.w	r2, [sl]
 8005d8a:	781a      	ldrb	r2, [r3, #0]
 8005d8c:	3201      	adds	r2, #1
 8005d8e:	701a      	strb	r2, [r3, #0]
 8005d90:	e7bd      	b.n	8005d0e <_dtoa_r+0x65e>
 8005d92:	4b7b      	ldr	r3, [pc, #492]	@ (8005f80 <_dtoa_r+0x8d0>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	f7fa fc2f 	bl	80005f8 <__aeabi_dmul>
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	4604      	mov	r4, r0
 8005da0:	460d      	mov	r5, r1
 8005da2:	f7fa fe91 	bl	8000ac8 <__aeabi_dcmpeq>
 8005da6:	2800      	cmp	r0, #0
 8005da8:	f43f aebb 	beq.w	8005b22 <_dtoa_r+0x472>
 8005dac:	e6f0      	b.n	8005b90 <_dtoa_r+0x4e0>
 8005dae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005db0:	2a00      	cmp	r2, #0
 8005db2:	f000 80db 	beq.w	8005f6c <_dtoa_r+0x8bc>
 8005db6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005db8:	2a01      	cmp	r2, #1
 8005dba:	f300 80bf 	bgt.w	8005f3c <_dtoa_r+0x88c>
 8005dbe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005dc0:	2a00      	cmp	r2, #0
 8005dc2:	f000 80b7 	beq.w	8005f34 <_dtoa_r+0x884>
 8005dc6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005dca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005dcc:	4646      	mov	r6, r8
 8005dce:	9a08      	ldr	r2, [sp, #32]
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	441a      	add	r2, r3
 8005dd4:	4658      	mov	r0, fp
 8005dd6:	4498      	add	r8, r3
 8005dd8:	9208      	str	r2, [sp, #32]
 8005dda:	f000 fc21 	bl	8006620 <__i2b>
 8005dde:	4605      	mov	r5, r0
 8005de0:	b15e      	cbz	r6, 8005dfa <_dtoa_r+0x74a>
 8005de2:	9b08      	ldr	r3, [sp, #32]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	dd08      	ble.n	8005dfa <_dtoa_r+0x74a>
 8005de8:	42b3      	cmp	r3, r6
 8005dea:	9a08      	ldr	r2, [sp, #32]
 8005dec:	bfa8      	it	ge
 8005dee:	4633      	movge	r3, r6
 8005df0:	eba8 0803 	sub.w	r8, r8, r3
 8005df4:	1af6      	subs	r6, r6, r3
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	9308      	str	r3, [sp, #32]
 8005dfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dfc:	b1f3      	cbz	r3, 8005e3c <_dtoa_r+0x78c>
 8005dfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 80b7 	beq.w	8005f74 <_dtoa_r+0x8c4>
 8005e06:	b18c      	cbz	r4, 8005e2c <_dtoa_r+0x77c>
 8005e08:	4629      	mov	r1, r5
 8005e0a:	4622      	mov	r2, r4
 8005e0c:	4658      	mov	r0, fp
 8005e0e:	f000 fcc7 	bl	80067a0 <__pow5mult>
 8005e12:	464a      	mov	r2, r9
 8005e14:	4601      	mov	r1, r0
 8005e16:	4605      	mov	r5, r0
 8005e18:	4658      	mov	r0, fp
 8005e1a:	f000 fc17 	bl	800664c <__multiply>
 8005e1e:	4649      	mov	r1, r9
 8005e20:	9004      	str	r0, [sp, #16]
 8005e22:	4658      	mov	r0, fp
 8005e24:	f000 fb48 	bl	80064b8 <_Bfree>
 8005e28:	9b04      	ldr	r3, [sp, #16]
 8005e2a:	4699      	mov	r9, r3
 8005e2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e2e:	1b1a      	subs	r2, r3, r4
 8005e30:	d004      	beq.n	8005e3c <_dtoa_r+0x78c>
 8005e32:	4649      	mov	r1, r9
 8005e34:	4658      	mov	r0, fp
 8005e36:	f000 fcb3 	bl	80067a0 <__pow5mult>
 8005e3a:	4681      	mov	r9, r0
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	4658      	mov	r0, fp
 8005e40:	f000 fbee 	bl	8006620 <__i2b>
 8005e44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e46:	4604      	mov	r4, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 81cf 	beq.w	80061ec <_dtoa_r+0xb3c>
 8005e4e:	461a      	mov	r2, r3
 8005e50:	4601      	mov	r1, r0
 8005e52:	4658      	mov	r0, fp
 8005e54:	f000 fca4 	bl	80067a0 <__pow5mult>
 8005e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	4604      	mov	r4, r0
 8005e5e:	f300 8095 	bgt.w	8005f8c <_dtoa_r+0x8dc>
 8005e62:	9b02      	ldr	r3, [sp, #8]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f040 8087 	bne.w	8005f78 <_dtoa_r+0x8c8>
 8005e6a:	9b03      	ldr	r3, [sp, #12]
 8005e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f040 8089 	bne.w	8005f88 <_dtoa_r+0x8d8>
 8005e76:	9b03      	ldr	r3, [sp, #12]
 8005e78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e7c:	0d1b      	lsrs	r3, r3, #20
 8005e7e:	051b      	lsls	r3, r3, #20
 8005e80:	b12b      	cbz	r3, 8005e8e <_dtoa_r+0x7de>
 8005e82:	9b08      	ldr	r3, [sp, #32]
 8005e84:	3301      	adds	r3, #1
 8005e86:	9308      	str	r3, [sp, #32]
 8005e88:	f108 0801 	add.w	r8, r8, #1
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 81b0 	beq.w	80061f8 <_dtoa_r+0xb48>
 8005e98:	6923      	ldr	r3, [r4, #16]
 8005e9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e9e:	6918      	ldr	r0, [r3, #16]
 8005ea0:	f000 fb72 	bl	8006588 <__hi0bits>
 8005ea4:	f1c0 0020 	rsb	r0, r0, #32
 8005ea8:	9b08      	ldr	r3, [sp, #32]
 8005eaa:	4418      	add	r0, r3
 8005eac:	f010 001f 	ands.w	r0, r0, #31
 8005eb0:	d077      	beq.n	8005fa2 <_dtoa_r+0x8f2>
 8005eb2:	f1c0 0320 	rsb	r3, r0, #32
 8005eb6:	2b04      	cmp	r3, #4
 8005eb8:	dd6b      	ble.n	8005f92 <_dtoa_r+0x8e2>
 8005eba:	9b08      	ldr	r3, [sp, #32]
 8005ebc:	f1c0 001c 	rsb	r0, r0, #28
 8005ec0:	4403      	add	r3, r0
 8005ec2:	4480      	add	r8, r0
 8005ec4:	4406      	add	r6, r0
 8005ec6:	9308      	str	r3, [sp, #32]
 8005ec8:	f1b8 0f00 	cmp.w	r8, #0
 8005ecc:	dd05      	ble.n	8005eda <_dtoa_r+0x82a>
 8005ece:	4649      	mov	r1, r9
 8005ed0:	4642      	mov	r2, r8
 8005ed2:	4658      	mov	r0, fp
 8005ed4:	f000 fcbe 	bl	8006854 <__lshift>
 8005ed8:	4681      	mov	r9, r0
 8005eda:	9b08      	ldr	r3, [sp, #32]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	dd05      	ble.n	8005eec <_dtoa_r+0x83c>
 8005ee0:	4621      	mov	r1, r4
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	4658      	mov	r0, fp
 8005ee6:	f000 fcb5 	bl	8006854 <__lshift>
 8005eea:	4604      	mov	r4, r0
 8005eec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d059      	beq.n	8005fa6 <_dtoa_r+0x8f6>
 8005ef2:	4621      	mov	r1, r4
 8005ef4:	4648      	mov	r0, r9
 8005ef6:	f000 fd19 	bl	800692c <__mcmp>
 8005efa:	2800      	cmp	r0, #0
 8005efc:	da53      	bge.n	8005fa6 <_dtoa_r+0x8f6>
 8005efe:	1e7b      	subs	r3, r7, #1
 8005f00:	9304      	str	r3, [sp, #16]
 8005f02:	4649      	mov	r1, r9
 8005f04:	2300      	movs	r3, #0
 8005f06:	220a      	movs	r2, #10
 8005f08:	4658      	mov	r0, fp
 8005f0a:	f000 faf7 	bl	80064fc <__multadd>
 8005f0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f10:	4681      	mov	r9, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 8172 	beq.w	80061fc <_dtoa_r+0xb4c>
 8005f18:	2300      	movs	r3, #0
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	220a      	movs	r2, #10
 8005f1e:	4658      	mov	r0, fp
 8005f20:	f000 faec 	bl	80064fc <__multadd>
 8005f24:	9b00      	ldr	r3, [sp, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	4605      	mov	r5, r0
 8005f2a:	dc67      	bgt.n	8005ffc <_dtoa_r+0x94c>
 8005f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	dc41      	bgt.n	8005fb6 <_dtoa_r+0x906>
 8005f32:	e063      	b.n	8005ffc <_dtoa_r+0x94c>
 8005f34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005f36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005f3a:	e746      	b.n	8005dca <_dtoa_r+0x71a>
 8005f3c:	9b07      	ldr	r3, [sp, #28]
 8005f3e:	1e5c      	subs	r4, r3, #1
 8005f40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f42:	42a3      	cmp	r3, r4
 8005f44:	bfbf      	itttt	lt
 8005f46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005f48:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005f4a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005f4c:	1ae3      	sublt	r3, r4, r3
 8005f4e:	bfb4      	ite	lt
 8005f50:	18d2      	addlt	r2, r2, r3
 8005f52:	1b1c      	subge	r4, r3, r4
 8005f54:	9b07      	ldr	r3, [sp, #28]
 8005f56:	bfbc      	itt	lt
 8005f58:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005f5a:	2400      	movlt	r4, #0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	bfb5      	itete	lt
 8005f60:	eba8 0603 	sublt.w	r6, r8, r3
 8005f64:	9b07      	ldrge	r3, [sp, #28]
 8005f66:	2300      	movlt	r3, #0
 8005f68:	4646      	movge	r6, r8
 8005f6a:	e730      	b.n	8005dce <_dtoa_r+0x71e>
 8005f6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f6e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005f70:	4646      	mov	r6, r8
 8005f72:	e735      	b.n	8005de0 <_dtoa_r+0x730>
 8005f74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f76:	e75c      	b.n	8005e32 <_dtoa_r+0x782>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	e788      	b.n	8005e8e <_dtoa_r+0x7de>
 8005f7c:	3fe00000 	.word	0x3fe00000
 8005f80:	40240000 	.word	0x40240000
 8005f84:	40140000 	.word	0x40140000
 8005f88:	9b02      	ldr	r3, [sp, #8]
 8005f8a:	e780      	b.n	8005e8e <_dtoa_r+0x7de>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f90:	e782      	b.n	8005e98 <_dtoa_r+0x7e8>
 8005f92:	d099      	beq.n	8005ec8 <_dtoa_r+0x818>
 8005f94:	9a08      	ldr	r2, [sp, #32]
 8005f96:	331c      	adds	r3, #28
 8005f98:	441a      	add	r2, r3
 8005f9a:	4498      	add	r8, r3
 8005f9c:	441e      	add	r6, r3
 8005f9e:	9208      	str	r2, [sp, #32]
 8005fa0:	e792      	b.n	8005ec8 <_dtoa_r+0x818>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	e7f6      	b.n	8005f94 <_dtoa_r+0x8e4>
 8005fa6:	9b07      	ldr	r3, [sp, #28]
 8005fa8:	9704      	str	r7, [sp, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	dc20      	bgt.n	8005ff0 <_dtoa_r+0x940>
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	dd1e      	ble.n	8005ff4 <_dtoa_r+0x944>
 8005fb6:	9b00      	ldr	r3, [sp, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f47f aec0 	bne.w	8005d3e <_dtoa_r+0x68e>
 8005fbe:	4621      	mov	r1, r4
 8005fc0:	2205      	movs	r2, #5
 8005fc2:	4658      	mov	r0, fp
 8005fc4:	f000 fa9a 	bl	80064fc <__multadd>
 8005fc8:	4601      	mov	r1, r0
 8005fca:	4604      	mov	r4, r0
 8005fcc:	4648      	mov	r0, r9
 8005fce:	f000 fcad 	bl	800692c <__mcmp>
 8005fd2:	2800      	cmp	r0, #0
 8005fd4:	f77f aeb3 	ble.w	8005d3e <_dtoa_r+0x68e>
 8005fd8:	4656      	mov	r6, sl
 8005fda:	2331      	movs	r3, #49	@ 0x31
 8005fdc:	f806 3b01 	strb.w	r3, [r6], #1
 8005fe0:	9b04      	ldr	r3, [sp, #16]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	9304      	str	r3, [sp, #16]
 8005fe6:	e6ae      	b.n	8005d46 <_dtoa_r+0x696>
 8005fe8:	9c07      	ldr	r4, [sp, #28]
 8005fea:	9704      	str	r7, [sp, #16]
 8005fec:	4625      	mov	r5, r4
 8005fee:	e7f3      	b.n	8005fd8 <_dtoa_r+0x928>
 8005ff0:	9b07      	ldr	r3, [sp, #28]
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 8104 	beq.w	8006204 <_dtoa_r+0xb54>
 8005ffc:	2e00      	cmp	r6, #0
 8005ffe:	dd05      	ble.n	800600c <_dtoa_r+0x95c>
 8006000:	4629      	mov	r1, r5
 8006002:	4632      	mov	r2, r6
 8006004:	4658      	mov	r0, fp
 8006006:	f000 fc25 	bl	8006854 <__lshift>
 800600a:	4605      	mov	r5, r0
 800600c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800600e:	2b00      	cmp	r3, #0
 8006010:	d05a      	beq.n	80060c8 <_dtoa_r+0xa18>
 8006012:	6869      	ldr	r1, [r5, #4]
 8006014:	4658      	mov	r0, fp
 8006016:	f000 fa0f 	bl	8006438 <_Balloc>
 800601a:	4606      	mov	r6, r0
 800601c:	b928      	cbnz	r0, 800602a <_dtoa_r+0x97a>
 800601e:	4b84      	ldr	r3, [pc, #528]	@ (8006230 <_dtoa_r+0xb80>)
 8006020:	4602      	mov	r2, r0
 8006022:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006026:	f7ff bb5a 	b.w	80056de <_dtoa_r+0x2e>
 800602a:	692a      	ldr	r2, [r5, #16]
 800602c:	3202      	adds	r2, #2
 800602e:	0092      	lsls	r2, r2, #2
 8006030:	f105 010c 	add.w	r1, r5, #12
 8006034:	300c      	adds	r0, #12
 8006036:	f001 fb3d 	bl	80076b4 <memcpy>
 800603a:	2201      	movs	r2, #1
 800603c:	4631      	mov	r1, r6
 800603e:	4658      	mov	r0, fp
 8006040:	f000 fc08 	bl	8006854 <__lshift>
 8006044:	f10a 0301 	add.w	r3, sl, #1
 8006048:	9307      	str	r3, [sp, #28]
 800604a:	9b00      	ldr	r3, [sp, #0]
 800604c:	4453      	add	r3, sl
 800604e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006050:	9b02      	ldr	r3, [sp, #8]
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	462f      	mov	r7, r5
 8006058:	930a      	str	r3, [sp, #40]	@ 0x28
 800605a:	4605      	mov	r5, r0
 800605c:	9b07      	ldr	r3, [sp, #28]
 800605e:	4621      	mov	r1, r4
 8006060:	3b01      	subs	r3, #1
 8006062:	4648      	mov	r0, r9
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	f7ff fa98 	bl	800559a <quorem>
 800606a:	4639      	mov	r1, r7
 800606c:	9002      	str	r0, [sp, #8]
 800606e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006072:	4648      	mov	r0, r9
 8006074:	f000 fc5a 	bl	800692c <__mcmp>
 8006078:	462a      	mov	r2, r5
 800607a:	9008      	str	r0, [sp, #32]
 800607c:	4621      	mov	r1, r4
 800607e:	4658      	mov	r0, fp
 8006080:	f000 fc70 	bl	8006964 <__mdiff>
 8006084:	68c2      	ldr	r2, [r0, #12]
 8006086:	4606      	mov	r6, r0
 8006088:	bb02      	cbnz	r2, 80060cc <_dtoa_r+0xa1c>
 800608a:	4601      	mov	r1, r0
 800608c:	4648      	mov	r0, r9
 800608e:	f000 fc4d 	bl	800692c <__mcmp>
 8006092:	4602      	mov	r2, r0
 8006094:	4631      	mov	r1, r6
 8006096:	4658      	mov	r0, fp
 8006098:	920e      	str	r2, [sp, #56]	@ 0x38
 800609a:	f000 fa0d 	bl	80064b8 <_Bfree>
 800609e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80060a2:	9e07      	ldr	r6, [sp, #28]
 80060a4:	ea43 0102 	orr.w	r1, r3, r2
 80060a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060aa:	4319      	orrs	r1, r3
 80060ac:	d110      	bne.n	80060d0 <_dtoa_r+0xa20>
 80060ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060b2:	d029      	beq.n	8006108 <_dtoa_r+0xa58>
 80060b4:	9b08      	ldr	r3, [sp, #32]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	dd02      	ble.n	80060c0 <_dtoa_r+0xa10>
 80060ba:	9b02      	ldr	r3, [sp, #8]
 80060bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80060c0:	9b00      	ldr	r3, [sp, #0]
 80060c2:	f883 8000 	strb.w	r8, [r3]
 80060c6:	e63f      	b.n	8005d48 <_dtoa_r+0x698>
 80060c8:	4628      	mov	r0, r5
 80060ca:	e7bb      	b.n	8006044 <_dtoa_r+0x994>
 80060cc:	2201      	movs	r2, #1
 80060ce:	e7e1      	b.n	8006094 <_dtoa_r+0x9e4>
 80060d0:	9b08      	ldr	r3, [sp, #32]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	db04      	blt.n	80060e0 <_dtoa_r+0xa30>
 80060d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80060d8:	430b      	orrs	r3, r1
 80060da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060dc:	430b      	orrs	r3, r1
 80060de:	d120      	bne.n	8006122 <_dtoa_r+0xa72>
 80060e0:	2a00      	cmp	r2, #0
 80060e2:	dded      	ble.n	80060c0 <_dtoa_r+0xa10>
 80060e4:	4649      	mov	r1, r9
 80060e6:	2201      	movs	r2, #1
 80060e8:	4658      	mov	r0, fp
 80060ea:	f000 fbb3 	bl	8006854 <__lshift>
 80060ee:	4621      	mov	r1, r4
 80060f0:	4681      	mov	r9, r0
 80060f2:	f000 fc1b 	bl	800692c <__mcmp>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	dc03      	bgt.n	8006102 <_dtoa_r+0xa52>
 80060fa:	d1e1      	bne.n	80060c0 <_dtoa_r+0xa10>
 80060fc:	f018 0f01 	tst.w	r8, #1
 8006100:	d0de      	beq.n	80060c0 <_dtoa_r+0xa10>
 8006102:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006106:	d1d8      	bne.n	80060ba <_dtoa_r+0xa0a>
 8006108:	9a00      	ldr	r2, [sp, #0]
 800610a:	2339      	movs	r3, #57	@ 0x39
 800610c:	7013      	strb	r3, [r2, #0]
 800610e:	4633      	mov	r3, r6
 8006110:	461e      	mov	r6, r3
 8006112:	3b01      	subs	r3, #1
 8006114:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006118:	2a39      	cmp	r2, #57	@ 0x39
 800611a:	d052      	beq.n	80061c2 <_dtoa_r+0xb12>
 800611c:	3201      	adds	r2, #1
 800611e:	701a      	strb	r2, [r3, #0]
 8006120:	e612      	b.n	8005d48 <_dtoa_r+0x698>
 8006122:	2a00      	cmp	r2, #0
 8006124:	dd07      	ble.n	8006136 <_dtoa_r+0xa86>
 8006126:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800612a:	d0ed      	beq.n	8006108 <_dtoa_r+0xa58>
 800612c:	9a00      	ldr	r2, [sp, #0]
 800612e:	f108 0301 	add.w	r3, r8, #1
 8006132:	7013      	strb	r3, [r2, #0]
 8006134:	e608      	b.n	8005d48 <_dtoa_r+0x698>
 8006136:	9b07      	ldr	r3, [sp, #28]
 8006138:	9a07      	ldr	r2, [sp, #28]
 800613a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800613e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006140:	4293      	cmp	r3, r2
 8006142:	d028      	beq.n	8006196 <_dtoa_r+0xae6>
 8006144:	4649      	mov	r1, r9
 8006146:	2300      	movs	r3, #0
 8006148:	220a      	movs	r2, #10
 800614a:	4658      	mov	r0, fp
 800614c:	f000 f9d6 	bl	80064fc <__multadd>
 8006150:	42af      	cmp	r7, r5
 8006152:	4681      	mov	r9, r0
 8006154:	f04f 0300 	mov.w	r3, #0
 8006158:	f04f 020a 	mov.w	r2, #10
 800615c:	4639      	mov	r1, r7
 800615e:	4658      	mov	r0, fp
 8006160:	d107      	bne.n	8006172 <_dtoa_r+0xac2>
 8006162:	f000 f9cb 	bl	80064fc <__multadd>
 8006166:	4607      	mov	r7, r0
 8006168:	4605      	mov	r5, r0
 800616a:	9b07      	ldr	r3, [sp, #28]
 800616c:	3301      	adds	r3, #1
 800616e:	9307      	str	r3, [sp, #28]
 8006170:	e774      	b.n	800605c <_dtoa_r+0x9ac>
 8006172:	f000 f9c3 	bl	80064fc <__multadd>
 8006176:	4629      	mov	r1, r5
 8006178:	4607      	mov	r7, r0
 800617a:	2300      	movs	r3, #0
 800617c:	220a      	movs	r2, #10
 800617e:	4658      	mov	r0, fp
 8006180:	f000 f9bc 	bl	80064fc <__multadd>
 8006184:	4605      	mov	r5, r0
 8006186:	e7f0      	b.n	800616a <_dtoa_r+0xaba>
 8006188:	9b00      	ldr	r3, [sp, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	bfcc      	ite	gt
 800618e:	461e      	movgt	r6, r3
 8006190:	2601      	movle	r6, #1
 8006192:	4456      	add	r6, sl
 8006194:	2700      	movs	r7, #0
 8006196:	4649      	mov	r1, r9
 8006198:	2201      	movs	r2, #1
 800619a:	4658      	mov	r0, fp
 800619c:	f000 fb5a 	bl	8006854 <__lshift>
 80061a0:	4621      	mov	r1, r4
 80061a2:	4681      	mov	r9, r0
 80061a4:	f000 fbc2 	bl	800692c <__mcmp>
 80061a8:	2800      	cmp	r0, #0
 80061aa:	dcb0      	bgt.n	800610e <_dtoa_r+0xa5e>
 80061ac:	d102      	bne.n	80061b4 <_dtoa_r+0xb04>
 80061ae:	f018 0f01 	tst.w	r8, #1
 80061b2:	d1ac      	bne.n	800610e <_dtoa_r+0xa5e>
 80061b4:	4633      	mov	r3, r6
 80061b6:	461e      	mov	r6, r3
 80061b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061bc:	2a30      	cmp	r2, #48	@ 0x30
 80061be:	d0fa      	beq.n	80061b6 <_dtoa_r+0xb06>
 80061c0:	e5c2      	b.n	8005d48 <_dtoa_r+0x698>
 80061c2:	459a      	cmp	sl, r3
 80061c4:	d1a4      	bne.n	8006110 <_dtoa_r+0xa60>
 80061c6:	9b04      	ldr	r3, [sp, #16]
 80061c8:	3301      	adds	r3, #1
 80061ca:	9304      	str	r3, [sp, #16]
 80061cc:	2331      	movs	r3, #49	@ 0x31
 80061ce:	f88a 3000 	strb.w	r3, [sl]
 80061d2:	e5b9      	b.n	8005d48 <_dtoa_r+0x698>
 80061d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80061d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006234 <_dtoa_r+0xb84>
 80061da:	b11b      	cbz	r3, 80061e4 <_dtoa_r+0xb34>
 80061dc:	f10a 0308 	add.w	r3, sl, #8
 80061e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80061e2:	6013      	str	r3, [r2, #0]
 80061e4:	4650      	mov	r0, sl
 80061e6:	b019      	add	sp, #100	@ 0x64
 80061e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	f77f ae37 	ble.w	8005e62 <_dtoa_r+0x7b2>
 80061f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80061f8:	2001      	movs	r0, #1
 80061fa:	e655      	b.n	8005ea8 <_dtoa_r+0x7f8>
 80061fc:	9b00      	ldr	r3, [sp, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f77f aed6 	ble.w	8005fb0 <_dtoa_r+0x900>
 8006204:	4656      	mov	r6, sl
 8006206:	4621      	mov	r1, r4
 8006208:	4648      	mov	r0, r9
 800620a:	f7ff f9c6 	bl	800559a <quorem>
 800620e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006212:	f806 8b01 	strb.w	r8, [r6], #1
 8006216:	9b00      	ldr	r3, [sp, #0]
 8006218:	eba6 020a 	sub.w	r2, r6, sl
 800621c:	4293      	cmp	r3, r2
 800621e:	ddb3      	ble.n	8006188 <_dtoa_r+0xad8>
 8006220:	4649      	mov	r1, r9
 8006222:	2300      	movs	r3, #0
 8006224:	220a      	movs	r2, #10
 8006226:	4658      	mov	r0, fp
 8006228:	f000 f968 	bl	80064fc <__multadd>
 800622c:	4681      	mov	r9, r0
 800622e:	e7ea      	b.n	8006206 <_dtoa_r+0xb56>
 8006230:	080084fe 	.word	0x080084fe
 8006234:	08008482 	.word	0x08008482

08006238 <_free_r>:
 8006238:	b538      	push	{r3, r4, r5, lr}
 800623a:	4605      	mov	r5, r0
 800623c:	2900      	cmp	r1, #0
 800623e:	d041      	beq.n	80062c4 <_free_r+0x8c>
 8006240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006244:	1f0c      	subs	r4, r1, #4
 8006246:	2b00      	cmp	r3, #0
 8006248:	bfb8      	it	lt
 800624a:	18e4      	addlt	r4, r4, r3
 800624c:	f000 f8e8 	bl	8006420 <__malloc_lock>
 8006250:	4a1d      	ldr	r2, [pc, #116]	@ (80062c8 <_free_r+0x90>)
 8006252:	6813      	ldr	r3, [r2, #0]
 8006254:	b933      	cbnz	r3, 8006264 <_free_r+0x2c>
 8006256:	6063      	str	r3, [r4, #4]
 8006258:	6014      	str	r4, [r2, #0]
 800625a:	4628      	mov	r0, r5
 800625c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006260:	f000 b8e4 	b.w	800642c <__malloc_unlock>
 8006264:	42a3      	cmp	r3, r4
 8006266:	d908      	bls.n	800627a <_free_r+0x42>
 8006268:	6820      	ldr	r0, [r4, #0]
 800626a:	1821      	adds	r1, r4, r0
 800626c:	428b      	cmp	r3, r1
 800626e:	bf01      	itttt	eq
 8006270:	6819      	ldreq	r1, [r3, #0]
 8006272:	685b      	ldreq	r3, [r3, #4]
 8006274:	1809      	addeq	r1, r1, r0
 8006276:	6021      	streq	r1, [r4, #0]
 8006278:	e7ed      	b.n	8006256 <_free_r+0x1e>
 800627a:	461a      	mov	r2, r3
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	b10b      	cbz	r3, 8006284 <_free_r+0x4c>
 8006280:	42a3      	cmp	r3, r4
 8006282:	d9fa      	bls.n	800627a <_free_r+0x42>
 8006284:	6811      	ldr	r1, [r2, #0]
 8006286:	1850      	adds	r0, r2, r1
 8006288:	42a0      	cmp	r0, r4
 800628a:	d10b      	bne.n	80062a4 <_free_r+0x6c>
 800628c:	6820      	ldr	r0, [r4, #0]
 800628e:	4401      	add	r1, r0
 8006290:	1850      	adds	r0, r2, r1
 8006292:	4283      	cmp	r3, r0
 8006294:	6011      	str	r1, [r2, #0]
 8006296:	d1e0      	bne.n	800625a <_free_r+0x22>
 8006298:	6818      	ldr	r0, [r3, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	6053      	str	r3, [r2, #4]
 800629e:	4408      	add	r0, r1
 80062a0:	6010      	str	r0, [r2, #0]
 80062a2:	e7da      	b.n	800625a <_free_r+0x22>
 80062a4:	d902      	bls.n	80062ac <_free_r+0x74>
 80062a6:	230c      	movs	r3, #12
 80062a8:	602b      	str	r3, [r5, #0]
 80062aa:	e7d6      	b.n	800625a <_free_r+0x22>
 80062ac:	6820      	ldr	r0, [r4, #0]
 80062ae:	1821      	adds	r1, r4, r0
 80062b0:	428b      	cmp	r3, r1
 80062b2:	bf04      	itt	eq
 80062b4:	6819      	ldreq	r1, [r3, #0]
 80062b6:	685b      	ldreq	r3, [r3, #4]
 80062b8:	6063      	str	r3, [r4, #4]
 80062ba:	bf04      	itt	eq
 80062bc:	1809      	addeq	r1, r1, r0
 80062be:	6021      	streq	r1, [r4, #0]
 80062c0:	6054      	str	r4, [r2, #4]
 80062c2:	e7ca      	b.n	800625a <_free_r+0x22>
 80062c4:	bd38      	pop	{r3, r4, r5, pc}
 80062c6:	bf00      	nop
 80062c8:	20003c4c 	.word	0x20003c4c

080062cc <malloc>:
 80062cc:	4b02      	ldr	r3, [pc, #8]	@ (80062d8 <malloc+0xc>)
 80062ce:	4601      	mov	r1, r0
 80062d0:	6818      	ldr	r0, [r3, #0]
 80062d2:	f000 b825 	b.w	8006320 <_malloc_r>
 80062d6:	bf00      	nop
 80062d8:	2000001c 	.word	0x2000001c

080062dc <sbrk_aligned>:
 80062dc:	b570      	push	{r4, r5, r6, lr}
 80062de:	4e0f      	ldr	r6, [pc, #60]	@ (800631c <sbrk_aligned+0x40>)
 80062e0:	460c      	mov	r4, r1
 80062e2:	6831      	ldr	r1, [r6, #0]
 80062e4:	4605      	mov	r5, r0
 80062e6:	b911      	cbnz	r1, 80062ee <sbrk_aligned+0x12>
 80062e8:	f001 f9d4 	bl	8007694 <_sbrk_r>
 80062ec:	6030      	str	r0, [r6, #0]
 80062ee:	4621      	mov	r1, r4
 80062f0:	4628      	mov	r0, r5
 80062f2:	f001 f9cf 	bl	8007694 <_sbrk_r>
 80062f6:	1c43      	adds	r3, r0, #1
 80062f8:	d103      	bne.n	8006302 <sbrk_aligned+0x26>
 80062fa:	f04f 34ff 	mov.w	r4, #4294967295
 80062fe:	4620      	mov	r0, r4
 8006300:	bd70      	pop	{r4, r5, r6, pc}
 8006302:	1cc4      	adds	r4, r0, #3
 8006304:	f024 0403 	bic.w	r4, r4, #3
 8006308:	42a0      	cmp	r0, r4
 800630a:	d0f8      	beq.n	80062fe <sbrk_aligned+0x22>
 800630c:	1a21      	subs	r1, r4, r0
 800630e:	4628      	mov	r0, r5
 8006310:	f001 f9c0 	bl	8007694 <_sbrk_r>
 8006314:	3001      	adds	r0, #1
 8006316:	d1f2      	bne.n	80062fe <sbrk_aligned+0x22>
 8006318:	e7ef      	b.n	80062fa <sbrk_aligned+0x1e>
 800631a:	bf00      	nop
 800631c:	20003c48 	.word	0x20003c48

08006320 <_malloc_r>:
 8006320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006324:	1ccd      	adds	r5, r1, #3
 8006326:	f025 0503 	bic.w	r5, r5, #3
 800632a:	3508      	adds	r5, #8
 800632c:	2d0c      	cmp	r5, #12
 800632e:	bf38      	it	cc
 8006330:	250c      	movcc	r5, #12
 8006332:	2d00      	cmp	r5, #0
 8006334:	4606      	mov	r6, r0
 8006336:	db01      	blt.n	800633c <_malloc_r+0x1c>
 8006338:	42a9      	cmp	r1, r5
 800633a:	d904      	bls.n	8006346 <_malloc_r+0x26>
 800633c:	230c      	movs	r3, #12
 800633e:	6033      	str	r3, [r6, #0]
 8006340:	2000      	movs	r0, #0
 8006342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006346:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800641c <_malloc_r+0xfc>
 800634a:	f000 f869 	bl	8006420 <__malloc_lock>
 800634e:	f8d8 3000 	ldr.w	r3, [r8]
 8006352:	461c      	mov	r4, r3
 8006354:	bb44      	cbnz	r4, 80063a8 <_malloc_r+0x88>
 8006356:	4629      	mov	r1, r5
 8006358:	4630      	mov	r0, r6
 800635a:	f7ff ffbf 	bl	80062dc <sbrk_aligned>
 800635e:	1c43      	adds	r3, r0, #1
 8006360:	4604      	mov	r4, r0
 8006362:	d158      	bne.n	8006416 <_malloc_r+0xf6>
 8006364:	f8d8 4000 	ldr.w	r4, [r8]
 8006368:	4627      	mov	r7, r4
 800636a:	2f00      	cmp	r7, #0
 800636c:	d143      	bne.n	80063f6 <_malloc_r+0xd6>
 800636e:	2c00      	cmp	r4, #0
 8006370:	d04b      	beq.n	800640a <_malloc_r+0xea>
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	4639      	mov	r1, r7
 8006376:	4630      	mov	r0, r6
 8006378:	eb04 0903 	add.w	r9, r4, r3
 800637c:	f001 f98a 	bl	8007694 <_sbrk_r>
 8006380:	4581      	cmp	r9, r0
 8006382:	d142      	bne.n	800640a <_malloc_r+0xea>
 8006384:	6821      	ldr	r1, [r4, #0]
 8006386:	1a6d      	subs	r5, r5, r1
 8006388:	4629      	mov	r1, r5
 800638a:	4630      	mov	r0, r6
 800638c:	f7ff ffa6 	bl	80062dc <sbrk_aligned>
 8006390:	3001      	adds	r0, #1
 8006392:	d03a      	beq.n	800640a <_malloc_r+0xea>
 8006394:	6823      	ldr	r3, [r4, #0]
 8006396:	442b      	add	r3, r5
 8006398:	6023      	str	r3, [r4, #0]
 800639a:	f8d8 3000 	ldr.w	r3, [r8]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	bb62      	cbnz	r2, 80063fc <_malloc_r+0xdc>
 80063a2:	f8c8 7000 	str.w	r7, [r8]
 80063a6:	e00f      	b.n	80063c8 <_malloc_r+0xa8>
 80063a8:	6822      	ldr	r2, [r4, #0]
 80063aa:	1b52      	subs	r2, r2, r5
 80063ac:	d420      	bmi.n	80063f0 <_malloc_r+0xd0>
 80063ae:	2a0b      	cmp	r2, #11
 80063b0:	d917      	bls.n	80063e2 <_malloc_r+0xc2>
 80063b2:	1961      	adds	r1, r4, r5
 80063b4:	42a3      	cmp	r3, r4
 80063b6:	6025      	str	r5, [r4, #0]
 80063b8:	bf18      	it	ne
 80063ba:	6059      	strne	r1, [r3, #4]
 80063bc:	6863      	ldr	r3, [r4, #4]
 80063be:	bf08      	it	eq
 80063c0:	f8c8 1000 	streq.w	r1, [r8]
 80063c4:	5162      	str	r2, [r4, r5]
 80063c6:	604b      	str	r3, [r1, #4]
 80063c8:	4630      	mov	r0, r6
 80063ca:	f000 f82f 	bl	800642c <__malloc_unlock>
 80063ce:	f104 000b 	add.w	r0, r4, #11
 80063d2:	1d23      	adds	r3, r4, #4
 80063d4:	f020 0007 	bic.w	r0, r0, #7
 80063d8:	1ac2      	subs	r2, r0, r3
 80063da:	bf1c      	itt	ne
 80063dc:	1a1b      	subne	r3, r3, r0
 80063de:	50a3      	strne	r3, [r4, r2]
 80063e0:	e7af      	b.n	8006342 <_malloc_r+0x22>
 80063e2:	6862      	ldr	r2, [r4, #4]
 80063e4:	42a3      	cmp	r3, r4
 80063e6:	bf0c      	ite	eq
 80063e8:	f8c8 2000 	streq.w	r2, [r8]
 80063ec:	605a      	strne	r2, [r3, #4]
 80063ee:	e7eb      	b.n	80063c8 <_malloc_r+0xa8>
 80063f0:	4623      	mov	r3, r4
 80063f2:	6864      	ldr	r4, [r4, #4]
 80063f4:	e7ae      	b.n	8006354 <_malloc_r+0x34>
 80063f6:	463c      	mov	r4, r7
 80063f8:	687f      	ldr	r7, [r7, #4]
 80063fa:	e7b6      	b.n	800636a <_malloc_r+0x4a>
 80063fc:	461a      	mov	r2, r3
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	42a3      	cmp	r3, r4
 8006402:	d1fb      	bne.n	80063fc <_malloc_r+0xdc>
 8006404:	2300      	movs	r3, #0
 8006406:	6053      	str	r3, [r2, #4]
 8006408:	e7de      	b.n	80063c8 <_malloc_r+0xa8>
 800640a:	230c      	movs	r3, #12
 800640c:	6033      	str	r3, [r6, #0]
 800640e:	4630      	mov	r0, r6
 8006410:	f000 f80c 	bl	800642c <__malloc_unlock>
 8006414:	e794      	b.n	8006340 <_malloc_r+0x20>
 8006416:	6005      	str	r5, [r0, #0]
 8006418:	e7d6      	b.n	80063c8 <_malloc_r+0xa8>
 800641a:	bf00      	nop
 800641c:	20003c4c 	.word	0x20003c4c

08006420 <__malloc_lock>:
 8006420:	4801      	ldr	r0, [pc, #4]	@ (8006428 <__malloc_lock+0x8>)
 8006422:	f7ff b8b8 	b.w	8005596 <__retarget_lock_acquire_recursive>
 8006426:	bf00      	nop
 8006428:	20003c44 	.word	0x20003c44

0800642c <__malloc_unlock>:
 800642c:	4801      	ldr	r0, [pc, #4]	@ (8006434 <__malloc_unlock+0x8>)
 800642e:	f7ff b8b3 	b.w	8005598 <__retarget_lock_release_recursive>
 8006432:	bf00      	nop
 8006434:	20003c44 	.word	0x20003c44

08006438 <_Balloc>:
 8006438:	b570      	push	{r4, r5, r6, lr}
 800643a:	69c6      	ldr	r6, [r0, #28]
 800643c:	4604      	mov	r4, r0
 800643e:	460d      	mov	r5, r1
 8006440:	b976      	cbnz	r6, 8006460 <_Balloc+0x28>
 8006442:	2010      	movs	r0, #16
 8006444:	f7ff ff42 	bl	80062cc <malloc>
 8006448:	4602      	mov	r2, r0
 800644a:	61e0      	str	r0, [r4, #28]
 800644c:	b920      	cbnz	r0, 8006458 <_Balloc+0x20>
 800644e:	4b18      	ldr	r3, [pc, #96]	@ (80064b0 <_Balloc+0x78>)
 8006450:	4818      	ldr	r0, [pc, #96]	@ (80064b4 <_Balloc+0x7c>)
 8006452:	216b      	movs	r1, #107	@ 0x6b
 8006454:	f001 f93c 	bl	80076d0 <__assert_func>
 8006458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800645c:	6006      	str	r6, [r0, #0]
 800645e:	60c6      	str	r6, [r0, #12]
 8006460:	69e6      	ldr	r6, [r4, #28]
 8006462:	68f3      	ldr	r3, [r6, #12]
 8006464:	b183      	cbz	r3, 8006488 <_Balloc+0x50>
 8006466:	69e3      	ldr	r3, [r4, #28]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800646e:	b9b8      	cbnz	r0, 80064a0 <_Balloc+0x68>
 8006470:	2101      	movs	r1, #1
 8006472:	fa01 f605 	lsl.w	r6, r1, r5
 8006476:	1d72      	adds	r2, r6, #5
 8006478:	0092      	lsls	r2, r2, #2
 800647a:	4620      	mov	r0, r4
 800647c:	f001 f946 	bl	800770c <_calloc_r>
 8006480:	b160      	cbz	r0, 800649c <_Balloc+0x64>
 8006482:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006486:	e00e      	b.n	80064a6 <_Balloc+0x6e>
 8006488:	2221      	movs	r2, #33	@ 0x21
 800648a:	2104      	movs	r1, #4
 800648c:	4620      	mov	r0, r4
 800648e:	f001 f93d 	bl	800770c <_calloc_r>
 8006492:	69e3      	ldr	r3, [r4, #28]
 8006494:	60f0      	str	r0, [r6, #12]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1e4      	bne.n	8006466 <_Balloc+0x2e>
 800649c:	2000      	movs	r0, #0
 800649e:	bd70      	pop	{r4, r5, r6, pc}
 80064a0:	6802      	ldr	r2, [r0, #0]
 80064a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064a6:	2300      	movs	r3, #0
 80064a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064ac:	e7f7      	b.n	800649e <_Balloc+0x66>
 80064ae:	bf00      	nop
 80064b0:	0800848f 	.word	0x0800848f
 80064b4:	0800850f 	.word	0x0800850f

080064b8 <_Bfree>:
 80064b8:	b570      	push	{r4, r5, r6, lr}
 80064ba:	69c6      	ldr	r6, [r0, #28]
 80064bc:	4605      	mov	r5, r0
 80064be:	460c      	mov	r4, r1
 80064c0:	b976      	cbnz	r6, 80064e0 <_Bfree+0x28>
 80064c2:	2010      	movs	r0, #16
 80064c4:	f7ff ff02 	bl	80062cc <malloc>
 80064c8:	4602      	mov	r2, r0
 80064ca:	61e8      	str	r0, [r5, #28]
 80064cc:	b920      	cbnz	r0, 80064d8 <_Bfree+0x20>
 80064ce:	4b09      	ldr	r3, [pc, #36]	@ (80064f4 <_Bfree+0x3c>)
 80064d0:	4809      	ldr	r0, [pc, #36]	@ (80064f8 <_Bfree+0x40>)
 80064d2:	218f      	movs	r1, #143	@ 0x8f
 80064d4:	f001 f8fc 	bl	80076d0 <__assert_func>
 80064d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064dc:	6006      	str	r6, [r0, #0]
 80064de:	60c6      	str	r6, [r0, #12]
 80064e0:	b13c      	cbz	r4, 80064f2 <_Bfree+0x3a>
 80064e2:	69eb      	ldr	r3, [r5, #28]
 80064e4:	6862      	ldr	r2, [r4, #4]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064ec:	6021      	str	r1, [r4, #0]
 80064ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064f2:	bd70      	pop	{r4, r5, r6, pc}
 80064f4:	0800848f 	.word	0x0800848f
 80064f8:	0800850f 	.word	0x0800850f

080064fc <__multadd>:
 80064fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006500:	690d      	ldr	r5, [r1, #16]
 8006502:	4607      	mov	r7, r0
 8006504:	460c      	mov	r4, r1
 8006506:	461e      	mov	r6, r3
 8006508:	f101 0c14 	add.w	ip, r1, #20
 800650c:	2000      	movs	r0, #0
 800650e:	f8dc 3000 	ldr.w	r3, [ip]
 8006512:	b299      	uxth	r1, r3
 8006514:	fb02 6101 	mla	r1, r2, r1, r6
 8006518:	0c1e      	lsrs	r6, r3, #16
 800651a:	0c0b      	lsrs	r3, r1, #16
 800651c:	fb02 3306 	mla	r3, r2, r6, r3
 8006520:	b289      	uxth	r1, r1
 8006522:	3001      	adds	r0, #1
 8006524:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006528:	4285      	cmp	r5, r0
 800652a:	f84c 1b04 	str.w	r1, [ip], #4
 800652e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006532:	dcec      	bgt.n	800650e <__multadd+0x12>
 8006534:	b30e      	cbz	r6, 800657a <__multadd+0x7e>
 8006536:	68a3      	ldr	r3, [r4, #8]
 8006538:	42ab      	cmp	r3, r5
 800653a:	dc19      	bgt.n	8006570 <__multadd+0x74>
 800653c:	6861      	ldr	r1, [r4, #4]
 800653e:	4638      	mov	r0, r7
 8006540:	3101      	adds	r1, #1
 8006542:	f7ff ff79 	bl	8006438 <_Balloc>
 8006546:	4680      	mov	r8, r0
 8006548:	b928      	cbnz	r0, 8006556 <__multadd+0x5a>
 800654a:	4602      	mov	r2, r0
 800654c:	4b0c      	ldr	r3, [pc, #48]	@ (8006580 <__multadd+0x84>)
 800654e:	480d      	ldr	r0, [pc, #52]	@ (8006584 <__multadd+0x88>)
 8006550:	21ba      	movs	r1, #186	@ 0xba
 8006552:	f001 f8bd 	bl	80076d0 <__assert_func>
 8006556:	6922      	ldr	r2, [r4, #16]
 8006558:	3202      	adds	r2, #2
 800655a:	f104 010c 	add.w	r1, r4, #12
 800655e:	0092      	lsls	r2, r2, #2
 8006560:	300c      	adds	r0, #12
 8006562:	f001 f8a7 	bl	80076b4 <memcpy>
 8006566:	4621      	mov	r1, r4
 8006568:	4638      	mov	r0, r7
 800656a:	f7ff ffa5 	bl	80064b8 <_Bfree>
 800656e:	4644      	mov	r4, r8
 8006570:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006574:	3501      	adds	r5, #1
 8006576:	615e      	str	r6, [r3, #20]
 8006578:	6125      	str	r5, [r4, #16]
 800657a:	4620      	mov	r0, r4
 800657c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006580:	080084fe 	.word	0x080084fe
 8006584:	0800850f 	.word	0x0800850f

08006588 <__hi0bits>:
 8006588:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800658c:	4603      	mov	r3, r0
 800658e:	bf36      	itet	cc
 8006590:	0403      	lslcc	r3, r0, #16
 8006592:	2000      	movcs	r0, #0
 8006594:	2010      	movcc	r0, #16
 8006596:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800659a:	bf3c      	itt	cc
 800659c:	021b      	lslcc	r3, r3, #8
 800659e:	3008      	addcc	r0, #8
 80065a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065a4:	bf3c      	itt	cc
 80065a6:	011b      	lslcc	r3, r3, #4
 80065a8:	3004      	addcc	r0, #4
 80065aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ae:	bf3c      	itt	cc
 80065b0:	009b      	lslcc	r3, r3, #2
 80065b2:	3002      	addcc	r0, #2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	db05      	blt.n	80065c4 <__hi0bits+0x3c>
 80065b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80065bc:	f100 0001 	add.w	r0, r0, #1
 80065c0:	bf08      	it	eq
 80065c2:	2020      	moveq	r0, #32
 80065c4:	4770      	bx	lr

080065c6 <__lo0bits>:
 80065c6:	6803      	ldr	r3, [r0, #0]
 80065c8:	4602      	mov	r2, r0
 80065ca:	f013 0007 	ands.w	r0, r3, #7
 80065ce:	d00b      	beq.n	80065e8 <__lo0bits+0x22>
 80065d0:	07d9      	lsls	r1, r3, #31
 80065d2:	d421      	bmi.n	8006618 <__lo0bits+0x52>
 80065d4:	0798      	lsls	r0, r3, #30
 80065d6:	bf49      	itett	mi
 80065d8:	085b      	lsrmi	r3, r3, #1
 80065da:	089b      	lsrpl	r3, r3, #2
 80065dc:	2001      	movmi	r0, #1
 80065de:	6013      	strmi	r3, [r2, #0]
 80065e0:	bf5c      	itt	pl
 80065e2:	6013      	strpl	r3, [r2, #0]
 80065e4:	2002      	movpl	r0, #2
 80065e6:	4770      	bx	lr
 80065e8:	b299      	uxth	r1, r3
 80065ea:	b909      	cbnz	r1, 80065f0 <__lo0bits+0x2a>
 80065ec:	0c1b      	lsrs	r3, r3, #16
 80065ee:	2010      	movs	r0, #16
 80065f0:	b2d9      	uxtb	r1, r3
 80065f2:	b909      	cbnz	r1, 80065f8 <__lo0bits+0x32>
 80065f4:	3008      	adds	r0, #8
 80065f6:	0a1b      	lsrs	r3, r3, #8
 80065f8:	0719      	lsls	r1, r3, #28
 80065fa:	bf04      	itt	eq
 80065fc:	091b      	lsreq	r3, r3, #4
 80065fe:	3004      	addeq	r0, #4
 8006600:	0799      	lsls	r1, r3, #30
 8006602:	bf04      	itt	eq
 8006604:	089b      	lsreq	r3, r3, #2
 8006606:	3002      	addeq	r0, #2
 8006608:	07d9      	lsls	r1, r3, #31
 800660a:	d403      	bmi.n	8006614 <__lo0bits+0x4e>
 800660c:	085b      	lsrs	r3, r3, #1
 800660e:	f100 0001 	add.w	r0, r0, #1
 8006612:	d003      	beq.n	800661c <__lo0bits+0x56>
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	4770      	bx	lr
 8006618:	2000      	movs	r0, #0
 800661a:	4770      	bx	lr
 800661c:	2020      	movs	r0, #32
 800661e:	4770      	bx	lr

08006620 <__i2b>:
 8006620:	b510      	push	{r4, lr}
 8006622:	460c      	mov	r4, r1
 8006624:	2101      	movs	r1, #1
 8006626:	f7ff ff07 	bl	8006438 <_Balloc>
 800662a:	4602      	mov	r2, r0
 800662c:	b928      	cbnz	r0, 800663a <__i2b+0x1a>
 800662e:	4b05      	ldr	r3, [pc, #20]	@ (8006644 <__i2b+0x24>)
 8006630:	4805      	ldr	r0, [pc, #20]	@ (8006648 <__i2b+0x28>)
 8006632:	f240 1145 	movw	r1, #325	@ 0x145
 8006636:	f001 f84b 	bl	80076d0 <__assert_func>
 800663a:	2301      	movs	r3, #1
 800663c:	6144      	str	r4, [r0, #20]
 800663e:	6103      	str	r3, [r0, #16]
 8006640:	bd10      	pop	{r4, pc}
 8006642:	bf00      	nop
 8006644:	080084fe 	.word	0x080084fe
 8006648:	0800850f 	.word	0x0800850f

0800664c <__multiply>:
 800664c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006650:	4614      	mov	r4, r2
 8006652:	690a      	ldr	r2, [r1, #16]
 8006654:	6923      	ldr	r3, [r4, #16]
 8006656:	429a      	cmp	r2, r3
 8006658:	bfa8      	it	ge
 800665a:	4623      	movge	r3, r4
 800665c:	460f      	mov	r7, r1
 800665e:	bfa4      	itt	ge
 8006660:	460c      	movge	r4, r1
 8006662:	461f      	movge	r7, r3
 8006664:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006668:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800666c:	68a3      	ldr	r3, [r4, #8]
 800666e:	6861      	ldr	r1, [r4, #4]
 8006670:	eb0a 0609 	add.w	r6, sl, r9
 8006674:	42b3      	cmp	r3, r6
 8006676:	b085      	sub	sp, #20
 8006678:	bfb8      	it	lt
 800667a:	3101      	addlt	r1, #1
 800667c:	f7ff fedc 	bl	8006438 <_Balloc>
 8006680:	b930      	cbnz	r0, 8006690 <__multiply+0x44>
 8006682:	4602      	mov	r2, r0
 8006684:	4b44      	ldr	r3, [pc, #272]	@ (8006798 <__multiply+0x14c>)
 8006686:	4845      	ldr	r0, [pc, #276]	@ (800679c <__multiply+0x150>)
 8006688:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800668c:	f001 f820 	bl	80076d0 <__assert_func>
 8006690:	f100 0514 	add.w	r5, r0, #20
 8006694:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006698:	462b      	mov	r3, r5
 800669a:	2200      	movs	r2, #0
 800669c:	4543      	cmp	r3, r8
 800669e:	d321      	bcc.n	80066e4 <__multiply+0x98>
 80066a0:	f107 0114 	add.w	r1, r7, #20
 80066a4:	f104 0214 	add.w	r2, r4, #20
 80066a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80066ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80066b0:	9302      	str	r3, [sp, #8]
 80066b2:	1b13      	subs	r3, r2, r4
 80066b4:	3b15      	subs	r3, #21
 80066b6:	f023 0303 	bic.w	r3, r3, #3
 80066ba:	3304      	adds	r3, #4
 80066bc:	f104 0715 	add.w	r7, r4, #21
 80066c0:	42ba      	cmp	r2, r7
 80066c2:	bf38      	it	cc
 80066c4:	2304      	movcc	r3, #4
 80066c6:	9301      	str	r3, [sp, #4]
 80066c8:	9b02      	ldr	r3, [sp, #8]
 80066ca:	9103      	str	r1, [sp, #12]
 80066cc:	428b      	cmp	r3, r1
 80066ce:	d80c      	bhi.n	80066ea <__multiply+0x9e>
 80066d0:	2e00      	cmp	r6, #0
 80066d2:	dd03      	ble.n	80066dc <__multiply+0x90>
 80066d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d05b      	beq.n	8006794 <__multiply+0x148>
 80066dc:	6106      	str	r6, [r0, #16]
 80066de:	b005      	add	sp, #20
 80066e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e4:	f843 2b04 	str.w	r2, [r3], #4
 80066e8:	e7d8      	b.n	800669c <__multiply+0x50>
 80066ea:	f8b1 a000 	ldrh.w	sl, [r1]
 80066ee:	f1ba 0f00 	cmp.w	sl, #0
 80066f2:	d024      	beq.n	800673e <__multiply+0xf2>
 80066f4:	f104 0e14 	add.w	lr, r4, #20
 80066f8:	46a9      	mov	r9, r5
 80066fa:	f04f 0c00 	mov.w	ip, #0
 80066fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006702:	f8d9 3000 	ldr.w	r3, [r9]
 8006706:	fa1f fb87 	uxth.w	fp, r7
 800670a:	b29b      	uxth	r3, r3
 800670c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006710:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006714:	f8d9 7000 	ldr.w	r7, [r9]
 8006718:	4463      	add	r3, ip
 800671a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800671e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006722:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006726:	b29b      	uxth	r3, r3
 8006728:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800672c:	4572      	cmp	r2, lr
 800672e:	f849 3b04 	str.w	r3, [r9], #4
 8006732:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006736:	d8e2      	bhi.n	80066fe <__multiply+0xb2>
 8006738:	9b01      	ldr	r3, [sp, #4]
 800673a:	f845 c003 	str.w	ip, [r5, r3]
 800673e:	9b03      	ldr	r3, [sp, #12]
 8006740:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006744:	3104      	adds	r1, #4
 8006746:	f1b9 0f00 	cmp.w	r9, #0
 800674a:	d021      	beq.n	8006790 <__multiply+0x144>
 800674c:	682b      	ldr	r3, [r5, #0]
 800674e:	f104 0c14 	add.w	ip, r4, #20
 8006752:	46ae      	mov	lr, r5
 8006754:	f04f 0a00 	mov.w	sl, #0
 8006758:	f8bc b000 	ldrh.w	fp, [ip]
 800675c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006760:	fb09 770b 	mla	r7, r9, fp, r7
 8006764:	4457      	add	r7, sl
 8006766:	b29b      	uxth	r3, r3
 8006768:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800676c:	f84e 3b04 	str.w	r3, [lr], #4
 8006770:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006774:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006778:	f8be 3000 	ldrh.w	r3, [lr]
 800677c:	fb09 330a 	mla	r3, r9, sl, r3
 8006780:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006784:	4562      	cmp	r2, ip
 8006786:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800678a:	d8e5      	bhi.n	8006758 <__multiply+0x10c>
 800678c:	9f01      	ldr	r7, [sp, #4]
 800678e:	51eb      	str	r3, [r5, r7]
 8006790:	3504      	adds	r5, #4
 8006792:	e799      	b.n	80066c8 <__multiply+0x7c>
 8006794:	3e01      	subs	r6, #1
 8006796:	e79b      	b.n	80066d0 <__multiply+0x84>
 8006798:	080084fe 	.word	0x080084fe
 800679c:	0800850f 	.word	0x0800850f

080067a0 <__pow5mult>:
 80067a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067a4:	4615      	mov	r5, r2
 80067a6:	f012 0203 	ands.w	r2, r2, #3
 80067aa:	4607      	mov	r7, r0
 80067ac:	460e      	mov	r6, r1
 80067ae:	d007      	beq.n	80067c0 <__pow5mult+0x20>
 80067b0:	4c25      	ldr	r4, [pc, #148]	@ (8006848 <__pow5mult+0xa8>)
 80067b2:	3a01      	subs	r2, #1
 80067b4:	2300      	movs	r3, #0
 80067b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067ba:	f7ff fe9f 	bl	80064fc <__multadd>
 80067be:	4606      	mov	r6, r0
 80067c0:	10ad      	asrs	r5, r5, #2
 80067c2:	d03d      	beq.n	8006840 <__pow5mult+0xa0>
 80067c4:	69fc      	ldr	r4, [r7, #28]
 80067c6:	b97c      	cbnz	r4, 80067e8 <__pow5mult+0x48>
 80067c8:	2010      	movs	r0, #16
 80067ca:	f7ff fd7f 	bl	80062cc <malloc>
 80067ce:	4602      	mov	r2, r0
 80067d0:	61f8      	str	r0, [r7, #28]
 80067d2:	b928      	cbnz	r0, 80067e0 <__pow5mult+0x40>
 80067d4:	4b1d      	ldr	r3, [pc, #116]	@ (800684c <__pow5mult+0xac>)
 80067d6:	481e      	ldr	r0, [pc, #120]	@ (8006850 <__pow5mult+0xb0>)
 80067d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80067dc:	f000 ff78 	bl	80076d0 <__assert_func>
 80067e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067e4:	6004      	str	r4, [r0, #0]
 80067e6:	60c4      	str	r4, [r0, #12]
 80067e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80067ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067f0:	b94c      	cbnz	r4, 8006806 <__pow5mult+0x66>
 80067f2:	f240 2171 	movw	r1, #625	@ 0x271
 80067f6:	4638      	mov	r0, r7
 80067f8:	f7ff ff12 	bl	8006620 <__i2b>
 80067fc:	2300      	movs	r3, #0
 80067fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8006802:	4604      	mov	r4, r0
 8006804:	6003      	str	r3, [r0, #0]
 8006806:	f04f 0900 	mov.w	r9, #0
 800680a:	07eb      	lsls	r3, r5, #31
 800680c:	d50a      	bpl.n	8006824 <__pow5mult+0x84>
 800680e:	4631      	mov	r1, r6
 8006810:	4622      	mov	r2, r4
 8006812:	4638      	mov	r0, r7
 8006814:	f7ff ff1a 	bl	800664c <__multiply>
 8006818:	4631      	mov	r1, r6
 800681a:	4680      	mov	r8, r0
 800681c:	4638      	mov	r0, r7
 800681e:	f7ff fe4b 	bl	80064b8 <_Bfree>
 8006822:	4646      	mov	r6, r8
 8006824:	106d      	asrs	r5, r5, #1
 8006826:	d00b      	beq.n	8006840 <__pow5mult+0xa0>
 8006828:	6820      	ldr	r0, [r4, #0]
 800682a:	b938      	cbnz	r0, 800683c <__pow5mult+0x9c>
 800682c:	4622      	mov	r2, r4
 800682e:	4621      	mov	r1, r4
 8006830:	4638      	mov	r0, r7
 8006832:	f7ff ff0b 	bl	800664c <__multiply>
 8006836:	6020      	str	r0, [r4, #0]
 8006838:	f8c0 9000 	str.w	r9, [r0]
 800683c:	4604      	mov	r4, r0
 800683e:	e7e4      	b.n	800680a <__pow5mult+0x6a>
 8006840:	4630      	mov	r0, r6
 8006842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006846:	bf00      	nop
 8006848:	08008568 	.word	0x08008568
 800684c:	0800848f 	.word	0x0800848f
 8006850:	0800850f 	.word	0x0800850f

08006854 <__lshift>:
 8006854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006858:	460c      	mov	r4, r1
 800685a:	6849      	ldr	r1, [r1, #4]
 800685c:	6923      	ldr	r3, [r4, #16]
 800685e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006862:	68a3      	ldr	r3, [r4, #8]
 8006864:	4607      	mov	r7, r0
 8006866:	4691      	mov	r9, r2
 8006868:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800686c:	f108 0601 	add.w	r6, r8, #1
 8006870:	42b3      	cmp	r3, r6
 8006872:	db0b      	blt.n	800688c <__lshift+0x38>
 8006874:	4638      	mov	r0, r7
 8006876:	f7ff fddf 	bl	8006438 <_Balloc>
 800687a:	4605      	mov	r5, r0
 800687c:	b948      	cbnz	r0, 8006892 <__lshift+0x3e>
 800687e:	4602      	mov	r2, r0
 8006880:	4b28      	ldr	r3, [pc, #160]	@ (8006924 <__lshift+0xd0>)
 8006882:	4829      	ldr	r0, [pc, #164]	@ (8006928 <__lshift+0xd4>)
 8006884:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006888:	f000 ff22 	bl	80076d0 <__assert_func>
 800688c:	3101      	adds	r1, #1
 800688e:	005b      	lsls	r3, r3, #1
 8006890:	e7ee      	b.n	8006870 <__lshift+0x1c>
 8006892:	2300      	movs	r3, #0
 8006894:	f100 0114 	add.w	r1, r0, #20
 8006898:	f100 0210 	add.w	r2, r0, #16
 800689c:	4618      	mov	r0, r3
 800689e:	4553      	cmp	r3, sl
 80068a0:	db33      	blt.n	800690a <__lshift+0xb6>
 80068a2:	6920      	ldr	r0, [r4, #16]
 80068a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068a8:	f104 0314 	add.w	r3, r4, #20
 80068ac:	f019 091f 	ands.w	r9, r9, #31
 80068b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80068b8:	d02b      	beq.n	8006912 <__lshift+0xbe>
 80068ba:	f1c9 0e20 	rsb	lr, r9, #32
 80068be:	468a      	mov	sl, r1
 80068c0:	2200      	movs	r2, #0
 80068c2:	6818      	ldr	r0, [r3, #0]
 80068c4:	fa00 f009 	lsl.w	r0, r0, r9
 80068c8:	4310      	orrs	r0, r2
 80068ca:	f84a 0b04 	str.w	r0, [sl], #4
 80068ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80068d2:	459c      	cmp	ip, r3
 80068d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80068d8:	d8f3      	bhi.n	80068c2 <__lshift+0x6e>
 80068da:	ebac 0304 	sub.w	r3, ip, r4
 80068de:	3b15      	subs	r3, #21
 80068e0:	f023 0303 	bic.w	r3, r3, #3
 80068e4:	3304      	adds	r3, #4
 80068e6:	f104 0015 	add.w	r0, r4, #21
 80068ea:	4584      	cmp	ip, r0
 80068ec:	bf38      	it	cc
 80068ee:	2304      	movcc	r3, #4
 80068f0:	50ca      	str	r2, [r1, r3]
 80068f2:	b10a      	cbz	r2, 80068f8 <__lshift+0xa4>
 80068f4:	f108 0602 	add.w	r6, r8, #2
 80068f8:	3e01      	subs	r6, #1
 80068fa:	4638      	mov	r0, r7
 80068fc:	612e      	str	r6, [r5, #16]
 80068fe:	4621      	mov	r1, r4
 8006900:	f7ff fdda 	bl	80064b8 <_Bfree>
 8006904:	4628      	mov	r0, r5
 8006906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800690a:	f842 0f04 	str.w	r0, [r2, #4]!
 800690e:	3301      	adds	r3, #1
 8006910:	e7c5      	b.n	800689e <__lshift+0x4a>
 8006912:	3904      	subs	r1, #4
 8006914:	f853 2b04 	ldr.w	r2, [r3], #4
 8006918:	f841 2f04 	str.w	r2, [r1, #4]!
 800691c:	459c      	cmp	ip, r3
 800691e:	d8f9      	bhi.n	8006914 <__lshift+0xc0>
 8006920:	e7ea      	b.n	80068f8 <__lshift+0xa4>
 8006922:	bf00      	nop
 8006924:	080084fe 	.word	0x080084fe
 8006928:	0800850f 	.word	0x0800850f

0800692c <__mcmp>:
 800692c:	690a      	ldr	r2, [r1, #16]
 800692e:	4603      	mov	r3, r0
 8006930:	6900      	ldr	r0, [r0, #16]
 8006932:	1a80      	subs	r0, r0, r2
 8006934:	b530      	push	{r4, r5, lr}
 8006936:	d10e      	bne.n	8006956 <__mcmp+0x2a>
 8006938:	3314      	adds	r3, #20
 800693a:	3114      	adds	r1, #20
 800693c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006940:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006944:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006948:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800694c:	4295      	cmp	r5, r2
 800694e:	d003      	beq.n	8006958 <__mcmp+0x2c>
 8006950:	d205      	bcs.n	800695e <__mcmp+0x32>
 8006952:	f04f 30ff 	mov.w	r0, #4294967295
 8006956:	bd30      	pop	{r4, r5, pc}
 8006958:	42a3      	cmp	r3, r4
 800695a:	d3f3      	bcc.n	8006944 <__mcmp+0x18>
 800695c:	e7fb      	b.n	8006956 <__mcmp+0x2a>
 800695e:	2001      	movs	r0, #1
 8006960:	e7f9      	b.n	8006956 <__mcmp+0x2a>
	...

08006964 <__mdiff>:
 8006964:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006968:	4689      	mov	r9, r1
 800696a:	4606      	mov	r6, r0
 800696c:	4611      	mov	r1, r2
 800696e:	4648      	mov	r0, r9
 8006970:	4614      	mov	r4, r2
 8006972:	f7ff ffdb 	bl	800692c <__mcmp>
 8006976:	1e05      	subs	r5, r0, #0
 8006978:	d112      	bne.n	80069a0 <__mdiff+0x3c>
 800697a:	4629      	mov	r1, r5
 800697c:	4630      	mov	r0, r6
 800697e:	f7ff fd5b 	bl	8006438 <_Balloc>
 8006982:	4602      	mov	r2, r0
 8006984:	b928      	cbnz	r0, 8006992 <__mdiff+0x2e>
 8006986:	4b3f      	ldr	r3, [pc, #252]	@ (8006a84 <__mdiff+0x120>)
 8006988:	f240 2137 	movw	r1, #567	@ 0x237
 800698c:	483e      	ldr	r0, [pc, #248]	@ (8006a88 <__mdiff+0x124>)
 800698e:	f000 fe9f 	bl	80076d0 <__assert_func>
 8006992:	2301      	movs	r3, #1
 8006994:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006998:	4610      	mov	r0, r2
 800699a:	b003      	add	sp, #12
 800699c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a0:	bfbc      	itt	lt
 80069a2:	464b      	movlt	r3, r9
 80069a4:	46a1      	movlt	r9, r4
 80069a6:	4630      	mov	r0, r6
 80069a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80069ac:	bfba      	itte	lt
 80069ae:	461c      	movlt	r4, r3
 80069b0:	2501      	movlt	r5, #1
 80069b2:	2500      	movge	r5, #0
 80069b4:	f7ff fd40 	bl	8006438 <_Balloc>
 80069b8:	4602      	mov	r2, r0
 80069ba:	b918      	cbnz	r0, 80069c4 <__mdiff+0x60>
 80069bc:	4b31      	ldr	r3, [pc, #196]	@ (8006a84 <__mdiff+0x120>)
 80069be:	f240 2145 	movw	r1, #581	@ 0x245
 80069c2:	e7e3      	b.n	800698c <__mdiff+0x28>
 80069c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80069c8:	6926      	ldr	r6, [r4, #16]
 80069ca:	60c5      	str	r5, [r0, #12]
 80069cc:	f109 0310 	add.w	r3, r9, #16
 80069d0:	f109 0514 	add.w	r5, r9, #20
 80069d4:	f104 0e14 	add.w	lr, r4, #20
 80069d8:	f100 0b14 	add.w	fp, r0, #20
 80069dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80069e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80069e4:	9301      	str	r3, [sp, #4]
 80069e6:	46d9      	mov	r9, fp
 80069e8:	f04f 0c00 	mov.w	ip, #0
 80069ec:	9b01      	ldr	r3, [sp, #4]
 80069ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 80069f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80069f6:	9301      	str	r3, [sp, #4]
 80069f8:	fa1f f38a 	uxth.w	r3, sl
 80069fc:	4619      	mov	r1, r3
 80069fe:	b283      	uxth	r3, r0
 8006a00:	1acb      	subs	r3, r1, r3
 8006a02:	0c00      	lsrs	r0, r0, #16
 8006a04:	4463      	add	r3, ip
 8006a06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006a0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006a14:	4576      	cmp	r6, lr
 8006a16:	f849 3b04 	str.w	r3, [r9], #4
 8006a1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a1e:	d8e5      	bhi.n	80069ec <__mdiff+0x88>
 8006a20:	1b33      	subs	r3, r6, r4
 8006a22:	3b15      	subs	r3, #21
 8006a24:	f023 0303 	bic.w	r3, r3, #3
 8006a28:	3415      	adds	r4, #21
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	42a6      	cmp	r6, r4
 8006a2e:	bf38      	it	cc
 8006a30:	2304      	movcc	r3, #4
 8006a32:	441d      	add	r5, r3
 8006a34:	445b      	add	r3, fp
 8006a36:	461e      	mov	r6, r3
 8006a38:	462c      	mov	r4, r5
 8006a3a:	4544      	cmp	r4, r8
 8006a3c:	d30e      	bcc.n	8006a5c <__mdiff+0xf8>
 8006a3e:	f108 0103 	add.w	r1, r8, #3
 8006a42:	1b49      	subs	r1, r1, r5
 8006a44:	f021 0103 	bic.w	r1, r1, #3
 8006a48:	3d03      	subs	r5, #3
 8006a4a:	45a8      	cmp	r8, r5
 8006a4c:	bf38      	it	cc
 8006a4e:	2100      	movcc	r1, #0
 8006a50:	440b      	add	r3, r1
 8006a52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a56:	b191      	cbz	r1, 8006a7e <__mdiff+0x11a>
 8006a58:	6117      	str	r7, [r2, #16]
 8006a5a:	e79d      	b.n	8006998 <__mdiff+0x34>
 8006a5c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006a60:	46e6      	mov	lr, ip
 8006a62:	0c08      	lsrs	r0, r1, #16
 8006a64:	fa1c fc81 	uxtah	ip, ip, r1
 8006a68:	4471      	add	r1, lr
 8006a6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006a6e:	b289      	uxth	r1, r1
 8006a70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006a74:	f846 1b04 	str.w	r1, [r6], #4
 8006a78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a7c:	e7dd      	b.n	8006a3a <__mdiff+0xd6>
 8006a7e:	3f01      	subs	r7, #1
 8006a80:	e7e7      	b.n	8006a52 <__mdiff+0xee>
 8006a82:	bf00      	nop
 8006a84:	080084fe 	.word	0x080084fe
 8006a88:	0800850f 	.word	0x0800850f

08006a8c <__d2b>:
 8006a8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a90:	460f      	mov	r7, r1
 8006a92:	2101      	movs	r1, #1
 8006a94:	ec59 8b10 	vmov	r8, r9, d0
 8006a98:	4616      	mov	r6, r2
 8006a9a:	f7ff fccd 	bl	8006438 <_Balloc>
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	b930      	cbnz	r0, 8006ab0 <__d2b+0x24>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	4b23      	ldr	r3, [pc, #140]	@ (8006b34 <__d2b+0xa8>)
 8006aa6:	4824      	ldr	r0, [pc, #144]	@ (8006b38 <__d2b+0xac>)
 8006aa8:	f240 310f 	movw	r1, #783	@ 0x30f
 8006aac:	f000 fe10 	bl	80076d0 <__assert_func>
 8006ab0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006ab4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ab8:	b10d      	cbz	r5, 8006abe <__d2b+0x32>
 8006aba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006abe:	9301      	str	r3, [sp, #4]
 8006ac0:	f1b8 0300 	subs.w	r3, r8, #0
 8006ac4:	d023      	beq.n	8006b0e <__d2b+0x82>
 8006ac6:	4668      	mov	r0, sp
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	f7ff fd7c 	bl	80065c6 <__lo0bits>
 8006ace:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ad2:	b1d0      	cbz	r0, 8006b0a <__d2b+0x7e>
 8006ad4:	f1c0 0320 	rsb	r3, r0, #32
 8006ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8006adc:	430b      	orrs	r3, r1
 8006ade:	40c2      	lsrs	r2, r0
 8006ae0:	6163      	str	r3, [r4, #20]
 8006ae2:	9201      	str	r2, [sp, #4]
 8006ae4:	9b01      	ldr	r3, [sp, #4]
 8006ae6:	61a3      	str	r3, [r4, #24]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	bf0c      	ite	eq
 8006aec:	2201      	moveq	r2, #1
 8006aee:	2202      	movne	r2, #2
 8006af0:	6122      	str	r2, [r4, #16]
 8006af2:	b1a5      	cbz	r5, 8006b1e <__d2b+0x92>
 8006af4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006af8:	4405      	add	r5, r0
 8006afa:	603d      	str	r5, [r7, #0]
 8006afc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006b00:	6030      	str	r0, [r6, #0]
 8006b02:	4620      	mov	r0, r4
 8006b04:	b003      	add	sp, #12
 8006b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b0a:	6161      	str	r1, [r4, #20]
 8006b0c:	e7ea      	b.n	8006ae4 <__d2b+0x58>
 8006b0e:	a801      	add	r0, sp, #4
 8006b10:	f7ff fd59 	bl	80065c6 <__lo0bits>
 8006b14:	9b01      	ldr	r3, [sp, #4]
 8006b16:	6163      	str	r3, [r4, #20]
 8006b18:	3020      	adds	r0, #32
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	e7e8      	b.n	8006af0 <__d2b+0x64>
 8006b1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006b26:	6038      	str	r0, [r7, #0]
 8006b28:	6918      	ldr	r0, [r3, #16]
 8006b2a:	f7ff fd2d 	bl	8006588 <__hi0bits>
 8006b2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b32:	e7e5      	b.n	8006b00 <__d2b+0x74>
 8006b34:	080084fe 	.word	0x080084fe
 8006b38:	0800850f 	.word	0x0800850f

08006b3c <__ssputs_r>:
 8006b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b40:	688e      	ldr	r6, [r1, #8]
 8006b42:	461f      	mov	r7, r3
 8006b44:	42be      	cmp	r6, r7
 8006b46:	680b      	ldr	r3, [r1, #0]
 8006b48:	4682      	mov	sl, r0
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	4690      	mov	r8, r2
 8006b4e:	d82d      	bhi.n	8006bac <__ssputs_r+0x70>
 8006b50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006b58:	d026      	beq.n	8006ba8 <__ssputs_r+0x6c>
 8006b5a:	6965      	ldr	r5, [r4, #20]
 8006b5c:	6909      	ldr	r1, [r1, #16]
 8006b5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b62:	eba3 0901 	sub.w	r9, r3, r1
 8006b66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b6a:	1c7b      	adds	r3, r7, #1
 8006b6c:	444b      	add	r3, r9
 8006b6e:	106d      	asrs	r5, r5, #1
 8006b70:	429d      	cmp	r5, r3
 8006b72:	bf38      	it	cc
 8006b74:	461d      	movcc	r5, r3
 8006b76:	0553      	lsls	r3, r2, #21
 8006b78:	d527      	bpl.n	8006bca <__ssputs_r+0x8e>
 8006b7a:	4629      	mov	r1, r5
 8006b7c:	f7ff fbd0 	bl	8006320 <_malloc_r>
 8006b80:	4606      	mov	r6, r0
 8006b82:	b360      	cbz	r0, 8006bde <__ssputs_r+0xa2>
 8006b84:	6921      	ldr	r1, [r4, #16]
 8006b86:	464a      	mov	r2, r9
 8006b88:	f000 fd94 	bl	80076b4 <memcpy>
 8006b8c:	89a3      	ldrh	r3, [r4, #12]
 8006b8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b96:	81a3      	strh	r3, [r4, #12]
 8006b98:	6126      	str	r6, [r4, #16]
 8006b9a:	6165      	str	r5, [r4, #20]
 8006b9c:	444e      	add	r6, r9
 8006b9e:	eba5 0509 	sub.w	r5, r5, r9
 8006ba2:	6026      	str	r6, [r4, #0]
 8006ba4:	60a5      	str	r5, [r4, #8]
 8006ba6:	463e      	mov	r6, r7
 8006ba8:	42be      	cmp	r6, r7
 8006baa:	d900      	bls.n	8006bae <__ssputs_r+0x72>
 8006bac:	463e      	mov	r6, r7
 8006bae:	6820      	ldr	r0, [r4, #0]
 8006bb0:	4632      	mov	r2, r6
 8006bb2:	4641      	mov	r1, r8
 8006bb4:	f000 fd53 	bl	800765e <memmove>
 8006bb8:	68a3      	ldr	r3, [r4, #8]
 8006bba:	1b9b      	subs	r3, r3, r6
 8006bbc:	60a3      	str	r3, [r4, #8]
 8006bbe:	6823      	ldr	r3, [r4, #0]
 8006bc0:	4433      	add	r3, r6
 8006bc2:	6023      	str	r3, [r4, #0]
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bca:	462a      	mov	r2, r5
 8006bcc:	f000 fdc4 	bl	8007758 <_realloc_r>
 8006bd0:	4606      	mov	r6, r0
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	d1e0      	bne.n	8006b98 <__ssputs_r+0x5c>
 8006bd6:	6921      	ldr	r1, [r4, #16]
 8006bd8:	4650      	mov	r0, sl
 8006bda:	f7ff fb2d 	bl	8006238 <_free_r>
 8006bde:	230c      	movs	r3, #12
 8006be0:	f8ca 3000 	str.w	r3, [sl]
 8006be4:	89a3      	ldrh	r3, [r4, #12]
 8006be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bea:	81a3      	strh	r3, [r4, #12]
 8006bec:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf0:	e7e9      	b.n	8006bc6 <__ssputs_r+0x8a>
	...

08006bf4 <_svfiprintf_r>:
 8006bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf8:	4698      	mov	r8, r3
 8006bfa:	898b      	ldrh	r3, [r1, #12]
 8006bfc:	061b      	lsls	r3, r3, #24
 8006bfe:	b09d      	sub	sp, #116	@ 0x74
 8006c00:	4607      	mov	r7, r0
 8006c02:	460d      	mov	r5, r1
 8006c04:	4614      	mov	r4, r2
 8006c06:	d510      	bpl.n	8006c2a <_svfiprintf_r+0x36>
 8006c08:	690b      	ldr	r3, [r1, #16]
 8006c0a:	b973      	cbnz	r3, 8006c2a <_svfiprintf_r+0x36>
 8006c0c:	2140      	movs	r1, #64	@ 0x40
 8006c0e:	f7ff fb87 	bl	8006320 <_malloc_r>
 8006c12:	6028      	str	r0, [r5, #0]
 8006c14:	6128      	str	r0, [r5, #16]
 8006c16:	b930      	cbnz	r0, 8006c26 <_svfiprintf_r+0x32>
 8006c18:	230c      	movs	r3, #12
 8006c1a:	603b      	str	r3, [r7, #0]
 8006c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c20:	b01d      	add	sp, #116	@ 0x74
 8006c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c26:	2340      	movs	r3, #64	@ 0x40
 8006c28:	616b      	str	r3, [r5, #20]
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c2e:	2320      	movs	r3, #32
 8006c30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c34:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c38:	2330      	movs	r3, #48	@ 0x30
 8006c3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006dd8 <_svfiprintf_r+0x1e4>
 8006c3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c42:	f04f 0901 	mov.w	r9, #1
 8006c46:	4623      	mov	r3, r4
 8006c48:	469a      	mov	sl, r3
 8006c4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c4e:	b10a      	cbz	r2, 8006c54 <_svfiprintf_r+0x60>
 8006c50:	2a25      	cmp	r2, #37	@ 0x25
 8006c52:	d1f9      	bne.n	8006c48 <_svfiprintf_r+0x54>
 8006c54:	ebba 0b04 	subs.w	fp, sl, r4
 8006c58:	d00b      	beq.n	8006c72 <_svfiprintf_r+0x7e>
 8006c5a:	465b      	mov	r3, fp
 8006c5c:	4622      	mov	r2, r4
 8006c5e:	4629      	mov	r1, r5
 8006c60:	4638      	mov	r0, r7
 8006c62:	f7ff ff6b 	bl	8006b3c <__ssputs_r>
 8006c66:	3001      	adds	r0, #1
 8006c68:	f000 80a7 	beq.w	8006dba <_svfiprintf_r+0x1c6>
 8006c6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c6e:	445a      	add	r2, fp
 8006c70:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c72:	f89a 3000 	ldrb.w	r3, [sl]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f000 809f 	beq.w	8006dba <_svfiprintf_r+0x1c6>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c86:	f10a 0a01 	add.w	sl, sl, #1
 8006c8a:	9304      	str	r3, [sp, #16]
 8006c8c:	9307      	str	r3, [sp, #28]
 8006c8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c92:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c94:	4654      	mov	r4, sl
 8006c96:	2205      	movs	r2, #5
 8006c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c9c:	484e      	ldr	r0, [pc, #312]	@ (8006dd8 <_svfiprintf_r+0x1e4>)
 8006c9e:	f7f9 fa97 	bl	80001d0 <memchr>
 8006ca2:	9a04      	ldr	r2, [sp, #16]
 8006ca4:	b9d8      	cbnz	r0, 8006cde <_svfiprintf_r+0xea>
 8006ca6:	06d0      	lsls	r0, r2, #27
 8006ca8:	bf44      	itt	mi
 8006caa:	2320      	movmi	r3, #32
 8006cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cb0:	0711      	lsls	r1, r2, #28
 8006cb2:	bf44      	itt	mi
 8006cb4:	232b      	movmi	r3, #43	@ 0x2b
 8006cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cba:	f89a 3000 	ldrb.w	r3, [sl]
 8006cbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cc0:	d015      	beq.n	8006cee <_svfiprintf_r+0xfa>
 8006cc2:	9a07      	ldr	r2, [sp, #28]
 8006cc4:	4654      	mov	r4, sl
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	f04f 0c0a 	mov.w	ip, #10
 8006ccc:	4621      	mov	r1, r4
 8006cce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cd2:	3b30      	subs	r3, #48	@ 0x30
 8006cd4:	2b09      	cmp	r3, #9
 8006cd6:	d94b      	bls.n	8006d70 <_svfiprintf_r+0x17c>
 8006cd8:	b1b0      	cbz	r0, 8006d08 <_svfiprintf_r+0x114>
 8006cda:	9207      	str	r2, [sp, #28]
 8006cdc:	e014      	b.n	8006d08 <_svfiprintf_r+0x114>
 8006cde:	eba0 0308 	sub.w	r3, r0, r8
 8006ce2:	fa09 f303 	lsl.w	r3, r9, r3
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	9304      	str	r3, [sp, #16]
 8006cea:	46a2      	mov	sl, r4
 8006cec:	e7d2      	b.n	8006c94 <_svfiprintf_r+0xa0>
 8006cee:	9b03      	ldr	r3, [sp, #12]
 8006cf0:	1d19      	adds	r1, r3, #4
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	9103      	str	r1, [sp, #12]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	bfbb      	ittet	lt
 8006cfa:	425b      	neglt	r3, r3
 8006cfc:	f042 0202 	orrlt.w	r2, r2, #2
 8006d00:	9307      	strge	r3, [sp, #28]
 8006d02:	9307      	strlt	r3, [sp, #28]
 8006d04:	bfb8      	it	lt
 8006d06:	9204      	strlt	r2, [sp, #16]
 8006d08:	7823      	ldrb	r3, [r4, #0]
 8006d0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d0c:	d10a      	bne.n	8006d24 <_svfiprintf_r+0x130>
 8006d0e:	7863      	ldrb	r3, [r4, #1]
 8006d10:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d12:	d132      	bne.n	8006d7a <_svfiprintf_r+0x186>
 8006d14:	9b03      	ldr	r3, [sp, #12]
 8006d16:	1d1a      	adds	r2, r3, #4
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	9203      	str	r2, [sp, #12]
 8006d1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d20:	3402      	adds	r4, #2
 8006d22:	9305      	str	r3, [sp, #20]
 8006d24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006de8 <_svfiprintf_r+0x1f4>
 8006d28:	7821      	ldrb	r1, [r4, #0]
 8006d2a:	2203      	movs	r2, #3
 8006d2c:	4650      	mov	r0, sl
 8006d2e:	f7f9 fa4f 	bl	80001d0 <memchr>
 8006d32:	b138      	cbz	r0, 8006d44 <_svfiprintf_r+0x150>
 8006d34:	9b04      	ldr	r3, [sp, #16]
 8006d36:	eba0 000a 	sub.w	r0, r0, sl
 8006d3a:	2240      	movs	r2, #64	@ 0x40
 8006d3c:	4082      	lsls	r2, r0
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	3401      	adds	r4, #1
 8006d42:	9304      	str	r3, [sp, #16]
 8006d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d48:	4824      	ldr	r0, [pc, #144]	@ (8006ddc <_svfiprintf_r+0x1e8>)
 8006d4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d4e:	2206      	movs	r2, #6
 8006d50:	f7f9 fa3e 	bl	80001d0 <memchr>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d036      	beq.n	8006dc6 <_svfiprintf_r+0x1d2>
 8006d58:	4b21      	ldr	r3, [pc, #132]	@ (8006de0 <_svfiprintf_r+0x1ec>)
 8006d5a:	bb1b      	cbnz	r3, 8006da4 <_svfiprintf_r+0x1b0>
 8006d5c:	9b03      	ldr	r3, [sp, #12]
 8006d5e:	3307      	adds	r3, #7
 8006d60:	f023 0307 	bic.w	r3, r3, #7
 8006d64:	3308      	adds	r3, #8
 8006d66:	9303      	str	r3, [sp, #12]
 8006d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d6a:	4433      	add	r3, r6
 8006d6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d6e:	e76a      	b.n	8006c46 <_svfiprintf_r+0x52>
 8006d70:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d74:	460c      	mov	r4, r1
 8006d76:	2001      	movs	r0, #1
 8006d78:	e7a8      	b.n	8006ccc <_svfiprintf_r+0xd8>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	3401      	adds	r4, #1
 8006d7e:	9305      	str	r3, [sp, #20]
 8006d80:	4619      	mov	r1, r3
 8006d82:	f04f 0c0a 	mov.w	ip, #10
 8006d86:	4620      	mov	r0, r4
 8006d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d8c:	3a30      	subs	r2, #48	@ 0x30
 8006d8e:	2a09      	cmp	r2, #9
 8006d90:	d903      	bls.n	8006d9a <_svfiprintf_r+0x1a6>
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d0c6      	beq.n	8006d24 <_svfiprintf_r+0x130>
 8006d96:	9105      	str	r1, [sp, #20]
 8006d98:	e7c4      	b.n	8006d24 <_svfiprintf_r+0x130>
 8006d9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d9e:	4604      	mov	r4, r0
 8006da0:	2301      	movs	r3, #1
 8006da2:	e7f0      	b.n	8006d86 <_svfiprintf_r+0x192>
 8006da4:	ab03      	add	r3, sp, #12
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	462a      	mov	r2, r5
 8006daa:	4b0e      	ldr	r3, [pc, #56]	@ (8006de4 <_svfiprintf_r+0x1f0>)
 8006dac:	a904      	add	r1, sp, #16
 8006dae:	4638      	mov	r0, r7
 8006db0:	f7fd fe6a 	bl	8004a88 <_printf_float>
 8006db4:	1c42      	adds	r2, r0, #1
 8006db6:	4606      	mov	r6, r0
 8006db8:	d1d6      	bne.n	8006d68 <_svfiprintf_r+0x174>
 8006dba:	89ab      	ldrh	r3, [r5, #12]
 8006dbc:	065b      	lsls	r3, r3, #25
 8006dbe:	f53f af2d 	bmi.w	8006c1c <_svfiprintf_r+0x28>
 8006dc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006dc4:	e72c      	b.n	8006c20 <_svfiprintf_r+0x2c>
 8006dc6:	ab03      	add	r3, sp, #12
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	462a      	mov	r2, r5
 8006dcc:	4b05      	ldr	r3, [pc, #20]	@ (8006de4 <_svfiprintf_r+0x1f0>)
 8006dce:	a904      	add	r1, sp, #16
 8006dd0:	4638      	mov	r0, r7
 8006dd2:	f7fe f8f1 	bl	8004fb8 <_printf_i>
 8006dd6:	e7ed      	b.n	8006db4 <_svfiprintf_r+0x1c0>
 8006dd8:	08008668 	.word	0x08008668
 8006ddc:	08008672 	.word	0x08008672
 8006de0:	08004a89 	.word	0x08004a89
 8006de4:	08006b3d 	.word	0x08006b3d
 8006de8:	0800866e 	.word	0x0800866e

08006dec <_sungetc_r>:
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	1c4b      	adds	r3, r1, #1
 8006df0:	4614      	mov	r4, r2
 8006df2:	d103      	bne.n	8006dfc <_sungetc_r+0x10>
 8006df4:	f04f 35ff 	mov.w	r5, #4294967295
 8006df8:	4628      	mov	r0, r5
 8006dfa:	bd38      	pop	{r3, r4, r5, pc}
 8006dfc:	8993      	ldrh	r3, [r2, #12]
 8006dfe:	f023 0320 	bic.w	r3, r3, #32
 8006e02:	8193      	strh	r3, [r2, #12]
 8006e04:	6853      	ldr	r3, [r2, #4]
 8006e06:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006e08:	b2cd      	uxtb	r5, r1
 8006e0a:	b18a      	cbz	r2, 8006e30 <_sungetc_r+0x44>
 8006e0c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	dd08      	ble.n	8006e24 <_sungetc_r+0x38>
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	1e5a      	subs	r2, r3, #1
 8006e16:	6022      	str	r2, [r4, #0]
 8006e18:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006e1c:	6863      	ldr	r3, [r4, #4]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	6063      	str	r3, [r4, #4]
 8006e22:	e7e9      	b.n	8006df8 <_sungetc_r+0xc>
 8006e24:	4621      	mov	r1, r4
 8006e26:	f000 fbe0 	bl	80075ea <__submore>
 8006e2a:	2800      	cmp	r0, #0
 8006e2c:	d0f1      	beq.n	8006e12 <_sungetc_r+0x26>
 8006e2e:	e7e1      	b.n	8006df4 <_sungetc_r+0x8>
 8006e30:	6921      	ldr	r1, [r4, #16]
 8006e32:	6822      	ldr	r2, [r4, #0]
 8006e34:	b141      	cbz	r1, 8006e48 <_sungetc_r+0x5c>
 8006e36:	4291      	cmp	r1, r2
 8006e38:	d206      	bcs.n	8006e48 <_sungetc_r+0x5c>
 8006e3a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8006e3e:	42a9      	cmp	r1, r5
 8006e40:	d102      	bne.n	8006e48 <_sungetc_r+0x5c>
 8006e42:	3a01      	subs	r2, #1
 8006e44:	6022      	str	r2, [r4, #0]
 8006e46:	e7ea      	b.n	8006e1e <_sungetc_r+0x32>
 8006e48:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8006e4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e50:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e52:	2303      	movs	r3, #3
 8006e54:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006e56:	4623      	mov	r3, r4
 8006e58:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e7de      	b.n	8006e20 <_sungetc_r+0x34>

08006e62 <__ssrefill_r>:
 8006e62:	b510      	push	{r4, lr}
 8006e64:	460c      	mov	r4, r1
 8006e66:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006e68:	b169      	cbz	r1, 8006e86 <__ssrefill_r+0x24>
 8006e6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e6e:	4299      	cmp	r1, r3
 8006e70:	d001      	beq.n	8006e76 <__ssrefill_r+0x14>
 8006e72:	f7ff f9e1 	bl	8006238 <_free_r>
 8006e76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e78:	6063      	str	r3, [r4, #4]
 8006e7a:	2000      	movs	r0, #0
 8006e7c:	6360      	str	r0, [r4, #52]	@ 0x34
 8006e7e:	b113      	cbz	r3, 8006e86 <__ssrefill_r+0x24>
 8006e80:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006e82:	6023      	str	r3, [r4, #0]
 8006e84:	bd10      	pop	{r4, pc}
 8006e86:	6923      	ldr	r3, [r4, #16]
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	6063      	str	r3, [r4, #4]
 8006e8e:	89a3      	ldrh	r3, [r4, #12]
 8006e90:	f043 0320 	orr.w	r3, r3, #32
 8006e94:	81a3      	strh	r3, [r4, #12]
 8006e96:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9a:	e7f3      	b.n	8006e84 <__ssrefill_r+0x22>

08006e9c <__ssvfiscanf_r>:
 8006e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ea0:	460c      	mov	r4, r1
 8006ea2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8006eac:	49a5      	ldr	r1, [pc, #660]	@ (8007144 <__ssvfiscanf_r+0x2a8>)
 8006eae:	91a0      	str	r1, [sp, #640]	@ 0x280
 8006eb0:	f10d 0804 	add.w	r8, sp, #4
 8006eb4:	49a4      	ldr	r1, [pc, #656]	@ (8007148 <__ssvfiscanf_r+0x2ac>)
 8006eb6:	4fa5      	ldr	r7, [pc, #660]	@ (800714c <__ssvfiscanf_r+0x2b0>)
 8006eb8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8006ebc:	4606      	mov	r6, r0
 8006ebe:	91a1      	str	r1, [sp, #644]	@ 0x284
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	7813      	ldrb	r3, [r2, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 8158 	beq.w	800717a <__ssvfiscanf_r+0x2de>
 8006eca:	5cf9      	ldrb	r1, [r7, r3]
 8006ecc:	f011 0108 	ands.w	r1, r1, #8
 8006ed0:	f102 0501 	add.w	r5, r2, #1
 8006ed4:	d019      	beq.n	8006f0a <__ssvfiscanf_r+0x6e>
 8006ed6:	6863      	ldr	r3, [r4, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	dd0f      	ble.n	8006efc <__ssvfiscanf_r+0x60>
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	781a      	ldrb	r2, [r3, #0]
 8006ee0:	5cba      	ldrb	r2, [r7, r2]
 8006ee2:	0712      	lsls	r2, r2, #28
 8006ee4:	d401      	bmi.n	8006eea <__ssvfiscanf_r+0x4e>
 8006ee6:	462a      	mov	r2, r5
 8006ee8:	e7eb      	b.n	8006ec2 <__ssvfiscanf_r+0x26>
 8006eea:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006eec:	3201      	adds	r2, #1
 8006eee:	9245      	str	r2, [sp, #276]	@ 0x114
 8006ef0:	6862      	ldr	r2, [r4, #4]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	3a01      	subs	r2, #1
 8006ef6:	6062      	str	r2, [r4, #4]
 8006ef8:	6023      	str	r3, [r4, #0]
 8006efa:	e7ec      	b.n	8006ed6 <__ssvfiscanf_r+0x3a>
 8006efc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006efe:	4621      	mov	r1, r4
 8006f00:	4630      	mov	r0, r6
 8006f02:	4798      	blx	r3
 8006f04:	2800      	cmp	r0, #0
 8006f06:	d0e9      	beq.n	8006edc <__ssvfiscanf_r+0x40>
 8006f08:	e7ed      	b.n	8006ee6 <__ssvfiscanf_r+0x4a>
 8006f0a:	2b25      	cmp	r3, #37	@ 0x25
 8006f0c:	d012      	beq.n	8006f34 <__ssvfiscanf_r+0x98>
 8006f0e:	4699      	mov	r9, r3
 8006f10:	6863      	ldr	r3, [r4, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f340 8093 	ble.w	800703e <__ssvfiscanf_r+0x1a2>
 8006f18:	6822      	ldr	r2, [r4, #0]
 8006f1a:	7813      	ldrb	r3, [r2, #0]
 8006f1c:	454b      	cmp	r3, r9
 8006f1e:	f040 812c 	bne.w	800717a <__ssvfiscanf_r+0x2de>
 8006f22:	6863      	ldr	r3, [r4, #4]
 8006f24:	3b01      	subs	r3, #1
 8006f26:	6063      	str	r3, [r4, #4]
 8006f28:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8006f2a:	3201      	adds	r2, #1
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	6022      	str	r2, [r4, #0]
 8006f30:	9345      	str	r3, [sp, #276]	@ 0x114
 8006f32:	e7d8      	b.n	8006ee6 <__ssvfiscanf_r+0x4a>
 8006f34:	9141      	str	r1, [sp, #260]	@ 0x104
 8006f36:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006f38:	7853      	ldrb	r3, [r2, #1]
 8006f3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f3c:	bf02      	ittt	eq
 8006f3e:	2310      	moveq	r3, #16
 8006f40:	1c95      	addeq	r5, r2, #2
 8006f42:	9341      	streq	r3, [sp, #260]	@ 0x104
 8006f44:	220a      	movs	r2, #10
 8006f46:	46a9      	mov	r9, r5
 8006f48:	f819 1b01 	ldrb.w	r1, [r9], #1
 8006f4c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8006f50:	2b09      	cmp	r3, #9
 8006f52:	d91e      	bls.n	8006f92 <__ssvfiscanf_r+0xf6>
 8006f54:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8007150 <__ssvfiscanf_r+0x2b4>
 8006f58:	2203      	movs	r2, #3
 8006f5a:	4650      	mov	r0, sl
 8006f5c:	f7f9 f938 	bl	80001d0 <memchr>
 8006f60:	b138      	cbz	r0, 8006f72 <__ssvfiscanf_r+0xd6>
 8006f62:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006f64:	eba0 000a 	sub.w	r0, r0, sl
 8006f68:	2301      	movs	r3, #1
 8006f6a:	4083      	lsls	r3, r0
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	9341      	str	r3, [sp, #260]	@ 0x104
 8006f70:	464d      	mov	r5, r9
 8006f72:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006f76:	2b78      	cmp	r3, #120	@ 0x78
 8006f78:	d806      	bhi.n	8006f88 <__ssvfiscanf_r+0xec>
 8006f7a:	2b57      	cmp	r3, #87	@ 0x57
 8006f7c:	d810      	bhi.n	8006fa0 <__ssvfiscanf_r+0x104>
 8006f7e:	2b25      	cmp	r3, #37	@ 0x25
 8006f80:	d0c5      	beq.n	8006f0e <__ssvfiscanf_r+0x72>
 8006f82:	d857      	bhi.n	8007034 <__ssvfiscanf_r+0x198>
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d065      	beq.n	8007054 <__ssvfiscanf_r+0x1b8>
 8006f88:	2303      	movs	r3, #3
 8006f8a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006f8c:	230a      	movs	r3, #10
 8006f8e:	9342      	str	r3, [sp, #264]	@ 0x108
 8006f90:	e078      	b.n	8007084 <__ssvfiscanf_r+0x1e8>
 8006f92:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8006f94:	fb02 1103 	mla	r1, r2, r3, r1
 8006f98:	3930      	subs	r1, #48	@ 0x30
 8006f9a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006f9c:	464d      	mov	r5, r9
 8006f9e:	e7d2      	b.n	8006f46 <__ssvfiscanf_r+0xaa>
 8006fa0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8006fa4:	2a20      	cmp	r2, #32
 8006fa6:	d8ef      	bhi.n	8006f88 <__ssvfiscanf_r+0xec>
 8006fa8:	a101      	add	r1, pc, #4	@ (adr r1, 8006fb0 <__ssvfiscanf_r+0x114>)
 8006faa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006fae:	bf00      	nop
 8006fb0:	08007063 	.word	0x08007063
 8006fb4:	08006f89 	.word	0x08006f89
 8006fb8:	08006f89 	.word	0x08006f89
 8006fbc:	080070bd 	.word	0x080070bd
 8006fc0:	08006f89 	.word	0x08006f89
 8006fc4:	08006f89 	.word	0x08006f89
 8006fc8:	08006f89 	.word	0x08006f89
 8006fcc:	08006f89 	.word	0x08006f89
 8006fd0:	08006f89 	.word	0x08006f89
 8006fd4:	08006f89 	.word	0x08006f89
 8006fd8:	08006f89 	.word	0x08006f89
 8006fdc:	080070d3 	.word	0x080070d3
 8006fe0:	080070b9 	.word	0x080070b9
 8006fe4:	0800703b 	.word	0x0800703b
 8006fe8:	0800703b 	.word	0x0800703b
 8006fec:	0800703b 	.word	0x0800703b
 8006ff0:	08006f89 	.word	0x08006f89
 8006ff4:	08007075 	.word	0x08007075
 8006ff8:	08006f89 	.word	0x08006f89
 8006ffc:	08006f89 	.word	0x08006f89
 8007000:	08006f89 	.word	0x08006f89
 8007004:	08006f89 	.word	0x08006f89
 8007008:	080070e3 	.word	0x080070e3
 800700c:	0800707d 	.word	0x0800707d
 8007010:	0800705b 	.word	0x0800705b
 8007014:	08006f89 	.word	0x08006f89
 8007018:	08006f89 	.word	0x08006f89
 800701c:	080070df 	.word	0x080070df
 8007020:	08006f89 	.word	0x08006f89
 8007024:	080070b9 	.word	0x080070b9
 8007028:	08006f89 	.word	0x08006f89
 800702c:	08006f89 	.word	0x08006f89
 8007030:	08007063 	.word	0x08007063
 8007034:	3b45      	subs	r3, #69	@ 0x45
 8007036:	2b02      	cmp	r3, #2
 8007038:	d8a6      	bhi.n	8006f88 <__ssvfiscanf_r+0xec>
 800703a:	2305      	movs	r3, #5
 800703c:	e021      	b.n	8007082 <__ssvfiscanf_r+0x1e6>
 800703e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007040:	4621      	mov	r1, r4
 8007042:	4630      	mov	r0, r6
 8007044:	4798      	blx	r3
 8007046:	2800      	cmp	r0, #0
 8007048:	f43f af66 	beq.w	8006f18 <__ssvfiscanf_r+0x7c>
 800704c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800704e:	2800      	cmp	r0, #0
 8007050:	f040 808b 	bne.w	800716a <__ssvfiscanf_r+0x2ce>
 8007054:	f04f 30ff 	mov.w	r0, #4294967295
 8007058:	e08b      	b.n	8007172 <__ssvfiscanf_r+0x2d6>
 800705a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800705c:	f042 0220 	orr.w	r2, r2, #32
 8007060:	9241      	str	r2, [sp, #260]	@ 0x104
 8007062:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007064:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007068:	9241      	str	r2, [sp, #260]	@ 0x104
 800706a:	2210      	movs	r2, #16
 800706c:	2b6e      	cmp	r3, #110	@ 0x6e
 800706e:	9242      	str	r2, [sp, #264]	@ 0x108
 8007070:	d902      	bls.n	8007078 <__ssvfiscanf_r+0x1dc>
 8007072:	e005      	b.n	8007080 <__ssvfiscanf_r+0x1e4>
 8007074:	2300      	movs	r3, #0
 8007076:	9342      	str	r3, [sp, #264]	@ 0x108
 8007078:	2303      	movs	r3, #3
 800707a:	e002      	b.n	8007082 <__ssvfiscanf_r+0x1e6>
 800707c:	2308      	movs	r3, #8
 800707e:	9342      	str	r3, [sp, #264]	@ 0x108
 8007080:	2304      	movs	r3, #4
 8007082:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007084:	6863      	ldr	r3, [r4, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	dd39      	ble.n	80070fe <__ssvfiscanf_r+0x262>
 800708a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800708c:	0659      	lsls	r1, r3, #25
 800708e:	d404      	bmi.n	800709a <__ssvfiscanf_r+0x1fe>
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	781a      	ldrb	r2, [r3, #0]
 8007094:	5cba      	ldrb	r2, [r7, r2]
 8007096:	0712      	lsls	r2, r2, #28
 8007098:	d438      	bmi.n	800710c <__ssvfiscanf_r+0x270>
 800709a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800709c:	2b02      	cmp	r3, #2
 800709e:	dc47      	bgt.n	8007130 <__ssvfiscanf_r+0x294>
 80070a0:	466b      	mov	r3, sp
 80070a2:	4622      	mov	r2, r4
 80070a4:	a941      	add	r1, sp, #260	@ 0x104
 80070a6:	4630      	mov	r0, r6
 80070a8:	f000 f86c 	bl	8007184 <_scanf_chars>
 80070ac:	2801      	cmp	r0, #1
 80070ae:	d064      	beq.n	800717a <__ssvfiscanf_r+0x2de>
 80070b0:	2802      	cmp	r0, #2
 80070b2:	f47f af18 	bne.w	8006ee6 <__ssvfiscanf_r+0x4a>
 80070b6:	e7c9      	b.n	800704c <__ssvfiscanf_r+0x1b0>
 80070b8:	220a      	movs	r2, #10
 80070ba:	e7d7      	b.n	800706c <__ssvfiscanf_r+0x1d0>
 80070bc:	4629      	mov	r1, r5
 80070be:	4640      	mov	r0, r8
 80070c0:	f000 fa5a 	bl	8007578 <__sccl>
 80070c4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80070c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070ca:	9341      	str	r3, [sp, #260]	@ 0x104
 80070cc:	4605      	mov	r5, r0
 80070ce:	2301      	movs	r3, #1
 80070d0:	e7d7      	b.n	8007082 <__ssvfiscanf_r+0x1e6>
 80070d2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80070d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070d8:	9341      	str	r3, [sp, #260]	@ 0x104
 80070da:	2300      	movs	r3, #0
 80070dc:	e7d1      	b.n	8007082 <__ssvfiscanf_r+0x1e6>
 80070de:	2302      	movs	r3, #2
 80070e0:	e7cf      	b.n	8007082 <__ssvfiscanf_r+0x1e6>
 80070e2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80070e4:	06c3      	lsls	r3, r0, #27
 80070e6:	f53f aefe 	bmi.w	8006ee6 <__ssvfiscanf_r+0x4a>
 80070ea:	9b00      	ldr	r3, [sp, #0]
 80070ec:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80070ee:	1d19      	adds	r1, r3, #4
 80070f0:	9100      	str	r1, [sp, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	07c0      	lsls	r0, r0, #31
 80070f6:	bf4c      	ite	mi
 80070f8:	801a      	strhmi	r2, [r3, #0]
 80070fa:	601a      	strpl	r2, [r3, #0]
 80070fc:	e6f3      	b.n	8006ee6 <__ssvfiscanf_r+0x4a>
 80070fe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007100:	4621      	mov	r1, r4
 8007102:	4630      	mov	r0, r6
 8007104:	4798      	blx	r3
 8007106:	2800      	cmp	r0, #0
 8007108:	d0bf      	beq.n	800708a <__ssvfiscanf_r+0x1ee>
 800710a:	e79f      	b.n	800704c <__ssvfiscanf_r+0x1b0>
 800710c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800710e:	3201      	adds	r2, #1
 8007110:	9245      	str	r2, [sp, #276]	@ 0x114
 8007112:	6862      	ldr	r2, [r4, #4]
 8007114:	3a01      	subs	r2, #1
 8007116:	2a00      	cmp	r2, #0
 8007118:	6062      	str	r2, [r4, #4]
 800711a:	dd02      	ble.n	8007122 <__ssvfiscanf_r+0x286>
 800711c:	3301      	adds	r3, #1
 800711e:	6023      	str	r3, [r4, #0]
 8007120:	e7b6      	b.n	8007090 <__ssvfiscanf_r+0x1f4>
 8007122:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007124:	4621      	mov	r1, r4
 8007126:	4630      	mov	r0, r6
 8007128:	4798      	blx	r3
 800712a:	2800      	cmp	r0, #0
 800712c:	d0b0      	beq.n	8007090 <__ssvfiscanf_r+0x1f4>
 800712e:	e78d      	b.n	800704c <__ssvfiscanf_r+0x1b0>
 8007130:	2b04      	cmp	r3, #4
 8007132:	dc0f      	bgt.n	8007154 <__ssvfiscanf_r+0x2b8>
 8007134:	466b      	mov	r3, sp
 8007136:	4622      	mov	r2, r4
 8007138:	a941      	add	r1, sp, #260	@ 0x104
 800713a:	4630      	mov	r0, r6
 800713c:	f000 f87c 	bl	8007238 <_scanf_i>
 8007140:	e7b4      	b.n	80070ac <__ssvfiscanf_r+0x210>
 8007142:	bf00      	nop
 8007144:	08006ded 	.word	0x08006ded
 8007148:	08006e63 	.word	0x08006e63
 800714c:	080086db 	.word	0x080086db
 8007150:	0800866e 	.word	0x0800866e
 8007154:	4b0a      	ldr	r3, [pc, #40]	@ (8007180 <__ssvfiscanf_r+0x2e4>)
 8007156:	2b00      	cmp	r3, #0
 8007158:	f43f aec5 	beq.w	8006ee6 <__ssvfiscanf_r+0x4a>
 800715c:	466b      	mov	r3, sp
 800715e:	4622      	mov	r2, r4
 8007160:	a941      	add	r1, sp, #260	@ 0x104
 8007162:	4630      	mov	r0, r6
 8007164:	f3af 8000 	nop.w
 8007168:	e7a0      	b.n	80070ac <__ssvfiscanf_r+0x210>
 800716a:	89a3      	ldrh	r3, [r4, #12]
 800716c:	065b      	lsls	r3, r3, #25
 800716e:	f53f af71 	bmi.w	8007054 <__ssvfiscanf_r+0x1b8>
 8007172:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8007176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800717a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800717c:	e7f9      	b.n	8007172 <__ssvfiscanf_r+0x2d6>
 800717e:	bf00      	nop
 8007180:	00000000 	.word	0x00000000

08007184 <_scanf_chars>:
 8007184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007188:	4615      	mov	r5, r2
 800718a:	688a      	ldr	r2, [r1, #8]
 800718c:	4680      	mov	r8, r0
 800718e:	460c      	mov	r4, r1
 8007190:	b932      	cbnz	r2, 80071a0 <_scanf_chars+0x1c>
 8007192:	698a      	ldr	r2, [r1, #24]
 8007194:	2a00      	cmp	r2, #0
 8007196:	bf14      	ite	ne
 8007198:	f04f 32ff 	movne.w	r2, #4294967295
 800719c:	2201      	moveq	r2, #1
 800719e:	608a      	str	r2, [r1, #8]
 80071a0:	6822      	ldr	r2, [r4, #0]
 80071a2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8007234 <_scanf_chars+0xb0>
 80071a6:	06d1      	lsls	r1, r2, #27
 80071a8:	bf5f      	itttt	pl
 80071aa:	681a      	ldrpl	r2, [r3, #0]
 80071ac:	1d11      	addpl	r1, r2, #4
 80071ae:	6019      	strpl	r1, [r3, #0]
 80071b0:	6816      	ldrpl	r6, [r2, #0]
 80071b2:	2700      	movs	r7, #0
 80071b4:	69a0      	ldr	r0, [r4, #24]
 80071b6:	b188      	cbz	r0, 80071dc <_scanf_chars+0x58>
 80071b8:	2801      	cmp	r0, #1
 80071ba:	d107      	bne.n	80071cc <_scanf_chars+0x48>
 80071bc:	682b      	ldr	r3, [r5, #0]
 80071be:	781a      	ldrb	r2, [r3, #0]
 80071c0:	6963      	ldr	r3, [r4, #20]
 80071c2:	5c9b      	ldrb	r3, [r3, r2]
 80071c4:	b953      	cbnz	r3, 80071dc <_scanf_chars+0x58>
 80071c6:	2f00      	cmp	r7, #0
 80071c8:	d031      	beq.n	800722e <_scanf_chars+0xaa>
 80071ca:	e022      	b.n	8007212 <_scanf_chars+0x8e>
 80071cc:	2802      	cmp	r0, #2
 80071ce:	d120      	bne.n	8007212 <_scanf_chars+0x8e>
 80071d0:	682b      	ldr	r3, [r5, #0]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80071d8:	071b      	lsls	r3, r3, #28
 80071da:	d41a      	bmi.n	8007212 <_scanf_chars+0x8e>
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	06da      	lsls	r2, r3, #27
 80071e0:	bf5e      	ittt	pl
 80071e2:	682b      	ldrpl	r3, [r5, #0]
 80071e4:	781b      	ldrbpl	r3, [r3, #0]
 80071e6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80071ea:	682a      	ldr	r2, [r5, #0]
 80071ec:	686b      	ldr	r3, [r5, #4]
 80071ee:	3201      	adds	r2, #1
 80071f0:	602a      	str	r2, [r5, #0]
 80071f2:	68a2      	ldr	r2, [r4, #8]
 80071f4:	3b01      	subs	r3, #1
 80071f6:	3a01      	subs	r2, #1
 80071f8:	606b      	str	r3, [r5, #4]
 80071fa:	3701      	adds	r7, #1
 80071fc:	60a2      	str	r2, [r4, #8]
 80071fe:	b142      	cbz	r2, 8007212 <_scanf_chars+0x8e>
 8007200:	2b00      	cmp	r3, #0
 8007202:	dcd7      	bgt.n	80071b4 <_scanf_chars+0x30>
 8007204:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007208:	4629      	mov	r1, r5
 800720a:	4640      	mov	r0, r8
 800720c:	4798      	blx	r3
 800720e:	2800      	cmp	r0, #0
 8007210:	d0d0      	beq.n	80071b4 <_scanf_chars+0x30>
 8007212:	6823      	ldr	r3, [r4, #0]
 8007214:	f013 0310 	ands.w	r3, r3, #16
 8007218:	d105      	bne.n	8007226 <_scanf_chars+0xa2>
 800721a:	68e2      	ldr	r2, [r4, #12]
 800721c:	3201      	adds	r2, #1
 800721e:	60e2      	str	r2, [r4, #12]
 8007220:	69a2      	ldr	r2, [r4, #24]
 8007222:	b102      	cbz	r2, 8007226 <_scanf_chars+0xa2>
 8007224:	7033      	strb	r3, [r6, #0]
 8007226:	6923      	ldr	r3, [r4, #16]
 8007228:	443b      	add	r3, r7
 800722a:	6123      	str	r3, [r4, #16]
 800722c:	2000      	movs	r0, #0
 800722e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007232:	bf00      	nop
 8007234:	080086db 	.word	0x080086db

08007238 <_scanf_i>:
 8007238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723c:	4698      	mov	r8, r3
 800723e:	4b74      	ldr	r3, [pc, #464]	@ (8007410 <_scanf_i+0x1d8>)
 8007240:	460c      	mov	r4, r1
 8007242:	4682      	mov	sl, r0
 8007244:	4616      	mov	r6, r2
 8007246:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800724a:	b087      	sub	sp, #28
 800724c:	ab03      	add	r3, sp, #12
 800724e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007252:	4b70      	ldr	r3, [pc, #448]	@ (8007414 <_scanf_i+0x1dc>)
 8007254:	69a1      	ldr	r1, [r4, #24]
 8007256:	4a70      	ldr	r2, [pc, #448]	@ (8007418 <_scanf_i+0x1e0>)
 8007258:	2903      	cmp	r1, #3
 800725a:	bf08      	it	eq
 800725c:	461a      	moveq	r2, r3
 800725e:	68a3      	ldr	r3, [r4, #8]
 8007260:	9201      	str	r2, [sp, #4]
 8007262:	1e5a      	subs	r2, r3, #1
 8007264:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007268:	bf88      	it	hi
 800726a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800726e:	4627      	mov	r7, r4
 8007270:	bf82      	ittt	hi
 8007272:	eb03 0905 	addhi.w	r9, r3, r5
 8007276:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800727a:	60a3      	strhi	r3, [r4, #8]
 800727c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007280:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8007284:	bf98      	it	ls
 8007286:	f04f 0900 	movls.w	r9, #0
 800728a:	6023      	str	r3, [r4, #0]
 800728c:	463d      	mov	r5, r7
 800728e:	f04f 0b00 	mov.w	fp, #0
 8007292:	6831      	ldr	r1, [r6, #0]
 8007294:	ab03      	add	r3, sp, #12
 8007296:	7809      	ldrb	r1, [r1, #0]
 8007298:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800729c:	2202      	movs	r2, #2
 800729e:	f7f8 ff97 	bl	80001d0 <memchr>
 80072a2:	b328      	cbz	r0, 80072f0 <_scanf_i+0xb8>
 80072a4:	f1bb 0f01 	cmp.w	fp, #1
 80072a8:	d159      	bne.n	800735e <_scanf_i+0x126>
 80072aa:	6862      	ldr	r2, [r4, #4]
 80072ac:	b92a      	cbnz	r2, 80072ba <_scanf_i+0x82>
 80072ae:	6822      	ldr	r2, [r4, #0]
 80072b0:	2108      	movs	r1, #8
 80072b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072b6:	6061      	str	r1, [r4, #4]
 80072b8:	6022      	str	r2, [r4, #0]
 80072ba:	6822      	ldr	r2, [r4, #0]
 80072bc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80072c0:	6022      	str	r2, [r4, #0]
 80072c2:	68a2      	ldr	r2, [r4, #8]
 80072c4:	1e51      	subs	r1, r2, #1
 80072c6:	60a1      	str	r1, [r4, #8]
 80072c8:	b192      	cbz	r2, 80072f0 <_scanf_i+0xb8>
 80072ca:	6832      	ldr	r2, [r6, #0]
 80072cc:	1c51      	adds	r1, r2, #1
 80072ce:	6031      	str	r1, [r6, #0]
 80072d0:	7812      	ldrb	r2, [r2, #0]
 80072d2:	f805 2b01 	strb.w	r2, [r5], #1
 80072d6:	6872      	ldr	r2, [r6, #4]
 80072d8:	3a01      	subs	r2, #1
 80072da:	2a00      	cmp	r2, #0
 80072dc:	6072      	str	r2, [r6, #4]
 80072de:	dc07      	bgt.n	80072f0 <_scanf_i+0xb8>
 80072e0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80072e4:	4631      	mov	r1, r6
 80072e6:	4650      	mov	r0, sl
 80072e8:	4790      	blx	r2
 80072ea:	2800      	cmp	r0, #0
 80072ec:	f040 8085 	bne.w	80073fa <_scanf_i+0x1c2>
 80072f0:	f10b 0b01 	add.w	fp, fp, #1
 80072f4:	f1bb 0f03 	cmp.w	fp, #3
 80072f8:	d1cb      	bne.n	8007292 <_scanf_i+0x5a>
 80072fa:	6863      	ldr	r3, [r4, #4]
 80072fc:	b90b      	cbnz	r3, 8007302 <_scanf_i+0xca>
 80072fe:	230a      	movs	r3, #10
 8007300:	6063      	str	r3, [r4, #4]
 8007302:	6863      	ldr	r3, [r4, #4]
 8007304:	4945      	ldr	r1, [pc, #276]	@ (800741c <_scanf_i+0x1e4>)
 8007306:	6960      	ldr	r0, [r4, #20]
 8007308:	1ac9      	subs	r1, r1, r3
 800730a:	f000 f935 	bl	8007578 <__sccl>
 800730e:	f04f 0b00 	mov.w	fp, #0
 8007312:	68a3      	ldr	r3, [r4, #8]
 8007314:	6822      	ldr	r2, [r4, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d03d      	beq.n	8007396 <_scanf_i+0x15e>
 800731a:	6831      	ldr	r1, [r6, #0]
 800731c:	6960      	ldr	r0, [r4, #20]
 800731e:	f891 c000 	ldrb.w	ip, [r1]
 8007322:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007326:	2800      	cmp	r0, #0
 8007328:	d035      	beq.n	8007396 <_scanf_i+0x15e>
 800732a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800732e:	d124      	bne.n	800737a <_scanf_i+0x142>
 8007330:	0510      	lsls	r0, r2, #20
 8007332:	d522      	bpl.n	800737a <_scanf_i+0x142>
 8007334:	f10b 0b01 	add.w	fp, fp, #1
 8007338:	f1b9 0f00 	cmp.w	r9, #0
 800733c:	d003      	beq.n	8007346 <_scanf_i+0x10e>
 800733e:	3301      	adds	r3, #1
 8007340:	f109 39ff 	add.w	r9, r9, #4294967295
 8007344:	60a3      	str	r3, [r4, #8]
 8007346:	6873      	ldr	r3, [r6, #4]
 8007348:	3b01      	subs	r3, #1
 800734a:	2b00      	cmp	r3, #0
 800734c:	6073      	str	r3, [r6, #4]
 800734e:	dd1b      	ble.n	8007388 <_scanf_i+0x150>
 8007350:	6833      	ldr	r3, [r6, #0]
 8007352:	3301      	adds	r3, #1
 8007354:	6033      	str	r3, [r6, #0]
 8007356:	68a3      	ldr	r3, [r4, #8]
 8007358:	3b01      	subs	r3, #1
 800735a:	60a3      	str	r3, [r4, #8]
 800735c:	e7d9      	b.n	8007312 <_scanf_i+0xda>
 800735e:	f1bb 0f02 	cmp.w	fp, #2
 8007362:	d1ae      	bne.n	80072c2 <_scanf_i+0x8a>
 8007364:	6822      	ldr	r2, [r4, #0]
 8007366:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800736a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800736e:	d1bf      	bne.n	80072f0 <_scanf_i+0xb8>
 8007370:	2110      	movs	r1, #16
 8007372:	6061      	str	r1, [r4, #4]
 8007374:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007378:	e7a2      	b.n	80072c0 <_scanf_i+0x88>
 800737a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800737e:	6022      	str	r2, [r4, #0]
 8007380:	780b      	ldrb	r3, [r1, #0]
 8007382:	f805 3b01 	strb.w	r3, [r5], #1
 8007386:	e7de      	b.n	8007346 <_scanf_i+0x10e>
 8007388:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800738c:	4631      	mov	r1, r6
 800738e:	4650      	mov	r0, sl
 8007390:	4798      	blx	r3
 8007392:	2800      	cmp	r0, #0
 8007394:	d0df      	beq.n	8007356 <_scanf_i+0x11e>
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	05d9      	lsls	r1, r3, #23
 800739a:	d50d      	bpl.n	80073b8 <_scanf_i+0x180>
 800739c:	42bd      	cmp	r5, r7
 800739e:	d909      	bls.n	80073b4 <_scanf_i+0x17c>
 80073a0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80073a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073a8:	4632      	mov	r2, r6
 80073aa:	4650      	mov	r0, sl
 80073ac:	4798      	blx	r3
 80073ae:	f105 39ff 	add.w	r9, r5, #4294967295
 80073b2:	464d      	mov	r5, r9
 80073b4:	42bd      	cmp	r5, r7
 80073b6:	d028      	beq.n	800740a <_scanf_i+0x1d2>
 80073b8:	6822      	ldr	r2, [r4, #0]
 80073ba:	f012 0210 	ands.w	r2, r2, #16
 80073be:	d113      	bne.n	80073e8 <_scanf_i+0x1b0>
 80073c0:	702a      	strb	r2, [r5, #0]
 80073c2:	6863      	ldr	r3, [r4, #4]
 80073c4:	9e01      	ldr	r6, [sp, #4]
 80073c6:	4639      	mov	r1, r7
 80073c8:	4650      	mov	r0, sl
 80073ca:	47b0      	blx	r6
 80073cc:	f8d8 3000 	ldr.w	r3, [r8]
 80073d0:	6821      	ldr	r1, [r4, #0]
 80073d2:	1d1a      	adds	r2, r3, #4
 80073d4:	f8c8 2000 	str.w	r2, [r8]
 80073d8:	f011 0f20 	tst.w	r1, #32
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	d00f      	beq.n	8007400 <_scanf_i+0x1c8>
 80073e0:	6018      	str	r0, [r3, #0]
 80073e2:	68e3      	ldr	r3, [r4, #12]
 80073e4:	3301      	adds	r3, #1
 80073e6:	60e3      	str	r3, [r4, #12]
 80073e8:	6923      	ldr	r3, [r4, #16]
 80073ea:	1bed      	subs	r5, r5, r7
 80073ec:	445d      	add	r5, fp
 80073ee:	442b      	add	r3, r5
 80073f0:	6123      	str	r3, [r4, #16]
 80073f2:	2000      	movs	r0, #0
 80073f4:	b007      	add	sp, #28
 80073f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fa:	f04f 0b00 	mov.w	fp, #0
 80073fe:	e7ca      	b.n	8007396 <_scanf_i+0x15e>
 8007400:	07ca      	lsls	r2, r1, #31
 8007402:	bf4c      	ite	mi
 8007404:	8018      	strhmi	r0, [r3, #0]
 8007406:	6018      	strpl	r0, [r3, #0]
 8007408:	e7eb      	b.n	80073e2 <_scanf_i+0x1aa>
 800740a:	2001      	movs	r0, #1
 800740c:	e7f2      	b.n	80073f4 <_scanf_i+0x1bc>
 800740e:	bf00      	nop
 8007410:	080083fc 	.word	0x080083fc
 8007414:	080078a9 	.word	0x080078a9
 8007418:	08007989 	.word	0x08007989
 800741c:	08008689 	.word	0x08008689

08007420 <__sflush_r>:
 8007420:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007428:	0716      	lsls	r6, r2, #28
 800742a:	4605      	mov	r5, r0
 800742c:	460c      	mov	r4, r1
 800742e:	d454      	bmi.n	80074da <__sflush_r+0xba>
 8007430:	684b      	ldr	r3, [r1, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	dc02      	bgt.n	800743c <__sflush_r+0x1c>
 8007436:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007438:	2b00      	cmp	r3, #0
 800743a:	dd48      	ble.n	80074ce <__sflush_r+0xae>
 800743c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800743e:	2e00      	cmp	r6, #0
 8007440:	d045      	beq.n	80074ce <__sflush_r+0xae>
 8007442:	2300      	movs	r3, #0
 8007444:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007448:	682f      	ldr	r7, [r5, #0]
 800744a:	6a21      	ldr	r1, [r4, #32]
 800744c:	602b      	str	r3, [r5, #0]
 800744e:	d030      	beq.n	80074b2 <__sflush_r+0x92>
 8007450:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007452:	89a3      	ldrh	r3, [r4, #12]
 8007454:	0759      	lsls	r1, r3, #29
 8007456:	d505      	bpl.n	8007464 <__sflush_r+0x44>
 8007458:	6863      	ldr	r3, [r4, #4]
 800745a:	1ad2      	subs	r2, r2, r3
 800745c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800745e:	b10b      	cbz	r3, 8007464 <__sflush_r+0x44>
 8007460:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007462:	1ad2      	subs	r2, r2, r3
 8007464:	2300      	movs	r3, #0
 8007466:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007468:	6a21      	ldr	r1, [r4, #32]
 800746a:	4628      	mov	r0, r5
 800746c:	47b0      	blx	r6
 800746e:	1c43      	adds	r3, r0, #1
 8007470:	89a3      	ldrh	r3, [r4, #12]
 8007472:	d106      	bne.n	8007482 <__sflush_r+0x62>
 8007474:	6829      	ldr	r1, [r5, #0]
 8007476:	291d      	cmp	r1, #29
 8007478:	d82b      	bhi.n	80074d2 <__sflush_r+0xb2>
 800747a:	4a2a      	ldr	r2, [pc, #168]	@ (8007524 <__sflush_r+0x104>)
 800747c:	410a      	asrs	r2, r1
 800747e:	07d6      	lsls	r6, r2, #31
 8007480:	d427      	bmi.n	80074d2 <__sflush_r+0xb2>
 8007482:	2200      	movs	r2, #0
 8007484:	6062      	str	r2, [r4, #4]
 8007486:	04d9      	lsls	r1, r3, #19
 8007488:	6922      	ldr	r2, [r4, #16]
 800748a:	6022      	str	r2, [r4, #0]
 800748c:	d504      	bpl.n	8007498 <__sflush_r+0x78>
 800748e:	1c42      	adds	r2, r0, #1
 8007490:	d101      	bne.n	8007496 <__sflush_r+0x76>
 8007492:	682b      	ldr	r3, [r5, #0]
 8007494:	b903      	cbnz	r3, 8007498 <__sflush_r+0x78>
 8007496:	6560      	str	r0, [r4, #84]	@ 0x54
 8007498:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800749a:	602f      	str	r7, [r5, #0]
 800749c:	b1b9      	cbz	r1, 80074ce <__sflush_r+0xae>
 800749e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074a2:	4299      	cmp	r1, r3
 80074a4:	d002      	beq.n	80074ac <__sflush_r+0x8c>
 80074a6:	4628      	mov	r0, r5
 80074a8:	f7fe fec6 	bl	8006238 <_free_r>
 80074ac:	2300      	movs	r3, #0
 80074ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80074b0:	e00d      	b.n	80074ce <__sflush_r+0xae>
 80074b2:	2301      	movs	r3, #1
 80074b4:	4628      	mov	r0, r5
 80074b6:	47b0      	blx	r6
 80074b8:	4602      	mov	r2, r0
 80074ba:	1c50      	adds	r0, r2, #1
 80074bc:	d1c9      	bne.n	8007452 <__sflush_r+0x32>
 80074be:	682b      	ldr	r3, [r5, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d0c6      	beq.n	8007452 <__sflush_r+0x32>
 80074c4:	2b1d      	cmp	r3, #29
 80074c6:	d001      	beq.n	80074cc <__sflush_r+0xac>
 80074c8:	2b16      	cmp	r3, #22
 80074ca:	d11e      	bne.n	800750a <__sflush_r+0xea>
 80074cc:	602f      	str	r7, [r5, #0]
 80074ce:	2000      	movs	r0, #0
 80074d0:	e022      	b.n	8007518 <__sflush_r+0xf8>
 80074d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074d6:	b21b      	sxth	r3, r3
 80074d8:	e01b      	b.n	8007512 <__sflush_r+0xf2>
 80074da:	690f      	ldr	r7, [r1, #16]
 80074dc:	2f00      	cmp	r7, #0
 80074de:	d0f6      	beq.n	80074ce <__sflush_r+0xae>
 80074e0:	0793      	lsls	r3, r2, #30
 80074e2:	680e      	ldr	r6, [r1, #0]
 80074e4:	bf08      	it	eq
 80074e6:	694b      	ldreq	r3, [r1, #20]
 80074e8:	600f      	str	r7, [r1, #0]
 80074ea:	bf18      	it	ne
 80074ec:	2300      	movne	r3, #0
 80074ee:	eba6 0807 	sub.w	r8, r6, r7
 80074f2:	608b      	str	r3, [r1, #8]
 80074f4:	f1b8 0f00 	cmp.w	r8, #0
 80074f8:	dde9      	ble.n	80074ce <__sflush_r+0xae>
 80074fa:	6a21      	ldr	r1, [r4, #32]
 80074fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80074fe:	4643      	mov	r3, r8
 8007500:	463a      	mov	r2, r7
 8007502:	4628      	mov	r0, r5
 8007504:	47b0      	blx	r6
 8007506:	2800      	cmp	r0, #0
 8007508:	dc08      	bgt.n	800751c <__sflush_r+0xfc>
 800750a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800750e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007512:	81a3      	strh	r3, [r4, #12]
 8007514:	f04f 30ff 	mov.w	r0, #4294967295
 8007518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800751c:	4407      	add	r7, r0
 800751e:	eba8 0800 	sub.w	r8, r8, r0
 8007522:	e7e7      	b.n	80074f4 <__sflush_r+0xd4>
 8007524:	dfbffffe 	.word	0xdfbffffe

08007528 <_fflush_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	690b      	ldr	r3, [r1, #16]
 800752c:	4605      	mov	r5, r0
 800752e:	460c      	mov	r4, r1
 8007530:	b913      	cbnz	r3, 8007538 <_fflush_r+0x10>
 8007532:	2500      	movs	r5, #0
 8007534:	4628      	mov	r0, r5
 8007536:	bd38      	pop	{r3, r4, r5, pc}
 8007538:	b118      	cbz	r0, 8007542 <_fflush_r+0x1a>
 800753a:	6a03      	ldr	r3, [r0, #32]
 800753c:	b90b      	cbnz	r3, 8007542 <_fflush_r+0x1a>
 800753e:	f7fd fee7 	bl	8005310 <__sinit>
 8007542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d0f3      	beq.n	8007532 <_fflush_r+0xa>
 800754a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800754c:	07d0      	lsls	r0, r2, #31
 800754e:	d404      	bmi.n	800755a <_fflush_r+0x32>
 8007550:	0599      	lsls	r1, r3, #22
 8007552:	d402      	bmi.n	800755a <_fflush_r+0x32>
 8007554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007556:	f7fe f81e 	bl	8005596 <__retarget_lock_acquire_recursive>
 800755a:	4628      	mov	r0, r5
 800755c:	4621      	mov	r1, r4
 800755e:	f7ff ff5f 	bl	8007420 <__sflush_r>
 8007562:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007564:	07da      	lsls	r2, r3, #31
 8007566:	4605      	mov	r5, r0
 8007568:	d4e4      	bmi.n	8007534 <_fflush_r+0xc>
 800756a:	89a3      	ldrh	r3, [r4, #12]
 800756c:	059b      	lsls	r3, r3, #22
 800756e:	d4e1      	bmi.n	8007534 <_fflush_r+0xc>
 8007570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007572:	f7fe f811 	bl	8005598 <__retarget_lock_release_recursive>
 8007576:	e7dd      	b.n	8007534 <_fflush_r+0xc>

08007578 <__sccl>:
 8007578:	b570      	push	{r4, r5, r6, lr}
 800757a:	780b      	ldrb	r3, [r1, #0]
 800757c:	4604      	mov	r4, r0
 800757e:	2b5e      	cmp	r3, #94	@ 0x5e
 8007580:	bf0b      	itete	eq
 8007582:	784b      	ldrbeq	r3, [r1, #1]
 8007584:	1c4a      	addne	r2, r1, #1
 8007586:	1c8a      	addeq	r2, r1, #2
 8007588:	2100      	movne	r1, #0
 800758a:	bf08      	it	eq
 800758c:	2101      	moveq	r1, #1
 800758e:	3801      	subs	r0, #1
 8007590:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8007594:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007598:	42a8      	cmp	r0, r5
 800759a:	d1fb      	bne.n	8007594 <__sccl+0x1c>
 800759c:	b90b      	cbnz	r3, 80075a2 <__sccl+0x2a>
 800759e:	1e50      	subs	r0, r2, #1
 80075a0:	bd70      	pop	{r4, r5, r6, pc}
 80075a2:	f081 0101 	eor.w	r1, r1, #1
 80075a6:	54e1      	strb	r1, [r4, r3]
 80075a8:	4610      	mov	r0, r2
 80075aa:	4602      	mov	r2, r0
 80075ac:	f812 5b01 	ldrb.w	r5, [r2], #1
 80075b0:	2d2d      	cmp	r5, #45	@ 0x2d
 80075b2:	d005      	beq.n	80075c0 <__sccl+0x48>
 80075b4:	2d5d      	cmp	r5, #93	@ 0x5d
 80075b6:	d016      	beq.n	80075e6 <__sccl+0x6e>
 80075b8:	2d00      	cmp	r5, #0
 80075ba:	d0f1      	beq.n	80075a0 <__sccl+0x28>
 80075bc:	462b      	mov	r3, r5
 80075be:	e7f2      	b.n	80075a6 <__sccl+0x2e>
 80075c0:	7846      	ldrb	r6, [r0, #1]
 80075c2:	2e5d      	cmp	r6, #93	@ 0x5d
 80075c4:	d0fa      	beq.n	80075bc <__sccl+0x44>
 80075c6:	42b3      	cmp	r3, r6
 80075c8:	dcf8      	bgt.n	80075bc <__sccl+0x44>
 80075ca:	3002      	adds	r0, #2
 80075cc:	461a      	mov	r2, r3
 80075ce:	3201      	adds	r2, #1
 80075d0:	4296      	cmp	r6, r2
 80075d2:	54a1      	strb	r1, [r4, r2]
 80075d4:	dcfb      	bgt.n	80075ce <__sccl+0x56>
 80075d6:	1af2      	subs	r2, r6, r3
 80075d8:	3a01      	subs	r2, #1
 80075da:	1c5d      	adds	r5, r3, #1
 80075dc:	42b3      	cmp	r3, r6
 80075de:	bfa8      	it	ge
 80075e0:	2200      	movge	r2, #0
 80075e2:	18ab      	adds	r3, r5, r2
 80075e4:	e7e1      	b.n	80075aa <__sccl+0x32>
 80075e6:	4610      	mov	r0, r2
 80075e8:	e7da      	b.n	80075a0 <__sccl+0x28>

080075ea <__submore>:
 80075ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ee:	460c      	mov	r4, r1
 80075f0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80075f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075f6:	4299      	cmp	r1, r3
 80075f8:	d11d      	bne.n	8007636 <__submore+0x4c>
 80075fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80075fe:	f7fe fe8f 	bl	8006320 <_malloc_r>
 8007602:	b918      	cbnz	r0, 800760c <__submore+0x22>
 8007604:	f04f 30ff 	mov.w	r0, #4294967295
 8007608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800760c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007610:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007612:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8007616:	6360      	str	r0, [r4, #52]	@ 0x34
 8007618:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800761c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007620:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8007624:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007628:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800762c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8007630:	6020      	str	r0, [r4, #0]
 8007632:	2000      	movs	r0, #0
 8007634:	e7e8      	b.n	8007608 <__submore+0x1e>
 8007636:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8007638:	0077      	lsls	r7, r6, #1
 800763a:	463a      	mov	r2, r7
 800763c:	f000 f88c 	bl	8007758 <_realloc_r>
 8007640:	4605      	mov	r5, r0
 8007642:	2800      	cmp	r0, #0
 8007644:	d0de      	beq.n	8007604 <__submore+0x1a>
 8007646:	eb00 0806 	add.w	r8, r0, r6
 800764a:	4601      	mov	r1, r0
 800764c:	4632      	mov	r2, r6
 800764e:	4640      	mov	r0, r8
 8007650:	f000 f830 	bl	80076b4 <memcpy>
 8007654:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8007658:	f8c4 8000 	str.w	r8, [r4]
 800765c:	e7e9      	b.n	8007632 <__submore+0x48>

0800765e <memmove>:
 800765e:	4288      	cmp	r0, r1
 8007660:	b510      	push	{r4, lr}
 8007662:	eb01 0402 	add.w	r4, r1, r2
 8007666:	d902      	bls.n	800766e <memmove+0x10>
 8007668:	4284      	cmp	r4, r0
 800766a:	4623      	mov	r3, r4
 800766c:	d807      	bhi.n	800767e <memmove+0x20>
 800766e:	1e43      	subs	r3, r0, #1
 8007670:	42a1      	cmp	r1, r4
 8007672:	d008      	beq.n	8007686 <memmove+0x28>
 8007674:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007678:	f803 2f01 	strb.w	r2, [r3, #1]!
 800767c:	e7f8      	b.n	8007670 <memmove+0x12>
 800767e:	4402      	add	r2, r0
 8007680:	4601      	mov	r1, r0
 8007682:	428a      	cmp	r2, r1
 8007684:	d100      	bne.n	8007688 <memmove+0x2a>
 8007686:	bd10      	pop	{r4, pc}
 8007688:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800768c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007690:	e7f7      	b.n	8007682 <memmove+0x24>
	...

08007694 <_sbrk_r>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	4d06      	ldr	r5, [pc, #24]	@ (80076b0 <_sbrk_r+0x1c>)
 8007698:	2300      	movs	r3, #0
 800769a:	4604      	mov	r4, r0
 800769c:	4608      	mov	r0, r1
 800769e:	602b      	str	r3, [r5, #0]
 80076a0:	f7fa f8a6 	bl	80017f0 <_sbrk>
 80076a4:	1c43      	adds	r3, r0, #1
 80076a6:	d102      	bne.n	80076ae <_sbrk_r+0x1a>
 80076a8:	682b      	ldr	r3, [r5, #0]
 80076aa:	b103      	cbz	r3, 80076ae <_sbrk_r+0x1a>
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	bd38      	pop	{r3, r4, r5, pc}
 80076b0:	20003c40 	.word	0x20003c40

080076b4 <memcpy>:
 80076b4:	440a      	add	r2, r1
 80076b6:	4291      	cmp	r1, r2
 80076b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80076bc:	d100      	bne.n	80076c0 <memcpy+0xc>
 80076be:	4770      	bx	lr
 80076c0:	b510      	push	{r4, lr}
 80076c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076ca:	4291      	cmp	r1, r2
 80076cc:	d1f9      	bne.n	80076c2 <memcpy+0xe>
 80076ce:	bd10      	pop	{r4, pc}

080076d0 <__assert_func>:
 80076d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076d2:	4614      	mov	r4, r2
 80076d4:	461a      	mov	r2, r3
 80076d6:	4b09      	ldr	r3, [pc, #36]	@ (80076fc <__assert_func+0x2c>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4605      	mov	r5, r0
 80076dc:	68d8      	ldr	r0, [r3, #12]
 80076de:	b954      	cbnz	r4, 80076f6 <__assert_func+0x26>
 80076e0:	4b07      	ldr	r3, [pc, #28]	@ (8007700 <__assert_func+0x30>)
 80076e2:	461c      	mov	r4, r3
 80076e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80076e8:	9100      	str	r1, [sp, #0]
 80076ea:	462b      	mov	r3, r5
 80076ec:	4905      	ldr	r1, [pc, #20]	@ (8007704 <__assert_func+0x34>)
 80076ee:	f000 f95b 	bl	80079a8 <fiprintf>
 80076f2:	f000 f96b 	bl	80079cc <abort>
 80076f6:	4b04      	ldr	r3, [pc, #16]	@ (8007708 <__assert_func+0x38>)
 80076f8:	e7f4      	b.n	80076e4 <__assert_func+0x14>
 80076fa:	bf00      	nop
 80076fc:	2000001c 	.word	0x2000001c
 8007700:	080086d9 	.word	0x080086d9
 8007704:	080086ab 	.word	0x080086ab
 8007708:	0800869e 	.word	0x0800869e

0800770c <_calloc_r>:
 800770c:	b570      	push	{r4, r5, r6, lr}
 800770e:	fba1 5402 	umull	r5, r4, r1, r2
 8007712:	b93c      	cbnz	r4, 8007724 <_calloc_r+0x18>
 8007714:	4629      	mov	r1, r5
 8007716:	f7fe fe03 	bl	8006320 <_malloc_r>
 800771a:	4606      	mov	r6, r0
 800771c:	b928      	cbnz	r0, 800772a <_calloc_r+0x1e>
 800771e:	2600      	movs	r6, #0
 8007720:	4630      	mov	r0, r6
 8007722:	bd70      	pop	{r4, r5, r6, pc}
 8007724:	220c      	movs	r2, #12
 8007726:	6002      	str	r2, [r0, #0]
 8007728:	e7f9      	b.n	800771e <_calloc_r+0x12>
 800772a:	462a      	mov	r2, r5
 800772c:	4621      	mov	r1, r4
 800772e:	f7fd feb4 	bl	800549a <memset>
 8007732:	e7f5      	b.n	8007720 <_calloc_r+0x14>

08007734 <__ascii_mbtowc>:
 8007734:	b082      	sub	sp, #8
 8007736:	b901      	cbnz	r1, 800773a <__ascii_mbtowc+0x6>
 8007738:	a901      	add	r1, sp, #4
 800773a:	b142      	cbz	r2, 800774e <__ascii_mbtowc+0x1a>
 800773c:	b14b      	cbz	r3, 8007752 <__ascii_mbtowc+0x1e>
 800773e:	7813      	ldrb	r3, [r2, #0]
 8007740:	600b      	str	r3, [r1, #0]
 8007742:	7812      	ldrb	r2, [r2, #0]
 8007744:	1e10      	subs	r0, r2, #0
 8007746:	bf18      	it	ne
 8007748:	2001      	movne	r0, #1
 800774a:	b002      	add	sp, #8
 800774c:	4770      	bx	lr
 800774e:	4610      	mov	r0, r2
 8007750:	e7fb      	b.n	800774a <__ascii_mbtowc+0x16>
 8007752:	f06f 0001 	mvn.w	r0, #1
 8007756:	e7f8      	b.n	800774a <__ascii_mbtowc+0x16>

08007758 <_realloc_r>:
 8007758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800775c:	4680      	mov	r8, r0
 800775e:	4615      	mov	r5, r2
 8007760:	460c      	mov	r4, r1
 8007762:	b921      	cbnz	r1, 800776e <_realloc_r+0x16>
 8007764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007768:	4611      	mov	r1, r2
 800776a:	f7fe bdd9 	b.w	8006320 <_malloc_r>
 800776e:	b92a      	cbnz	r2, 800777c <_realloc_r+0x24>
 8007770:	f7fe fd62 	bl	8006238 <_free_r>
 8007774:	2400      	movs	r4, #0
 8007776:	4620      	mov	r0, r4
 8007778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800777c:	f000 f92d 	bl	80079da <_malloc_usable_size_r>
 8007780:	4285      	cmp	r5, r0
 8007782:	4606      	mov	r6, r0
 8007784:	d802      	bhi.n	800778c <_realloc_r+0x34>
 8007786:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800778a:	d8f4      	bhi.n	8007776 <_realloc_r+0x1e>
 800778c:	4629      	mov	r1, r5
 800778e:	4640      	mov	r0, r8
 8007790:	f7fe fdc6 	bl	8006320 <_malloc_r>
 8007794:	4607      	mov	r7, r0
 8007796:	2800      	cmp	r0, #0
 8007798:	d0ec      	beq.n	8007774 <_realloc_r+0x1c>
 800779a:	42b5      	cmp	r5, r6
 800779c:	462a      	mov	r2, r5
 800779e:	4621      	mov	r1, r4
 80077a0:	bf28      	it	cs
 80077a2:	4632      	movcs	r2, r6
 80077a4:	f7ff ff86 	bl	80076b4 <memcpy>
 80077a8:	4621      	mov	r1, r4
 80077aa:	4640      	mov	r0, r8
 80077ac:	f7fe fd44 	bl	8006238 <_free_r>
 80077b0:	463c      	mov	r4, r7
 80077b2:	e7e0      	b.n	8007776 <_realloc_r+0x1e>

080077b4 <_strtol_l.constprop.0>:
 80077b4:	2b24      	cmp	r3, #36	@ 0x24
 80077b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077ba:	4686      	mov	lr, r0
 80077bc:	4690      	mov	r8, r2
 80077be:	d801      	bhi.n	80077c4 <_strtol_l.constprop.0+0x10>
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d106      	bne.n	80077d2 <_strtol_l.constprop.0+0x1e>
 80077c4:	f7fd febc 	bl	8005540 <__errno>
 80077c8:	2316      	movs	r3, #22
 80077ca:	6003      	str	r3, [r0, #0]
 80077cc:	2000      	movs	r0, #0
 80077ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077d2:	4834      	ldr	r0, [pc, #208]	@ (80078a4 <_strtol_l.constprop.0+0xf0>)
 80077d4:	460d      	mov	r5, r1
 80077d6:	462a      	mov	r2, r5
 80077d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077dc:	5d06      	ldrb	r6, [r0, r4]
 80077de:	f016 0608 	ands.w	r6, r6, #8
 80077e2:	d1f8      	bne.n	80077d6 <_strtol_l.constprop.0+0x22>
 80077e4:	2c2d      	cmp	r4, #45	@ 0x2d
 80077e6:	d12d      	bne.n	8007844 <_strtol_l.constprop.0+0x90>
 80077e8:	782c      	ldrb	r4, [r5, #0]
 80077ea:	2601      	movs	r6, #1
 80077ec:	1c95      	adds	r5, r2, #2
 80077ee:	f033 0210 	bics.w	r2, r3, #16
 80077f2:	d109      	bne.n	8007808 <_strtol_l.constprop.0+0x54>
 80077f4:	2c30      	cmp	r4, #48	@ 0x30
 80077f6:	d12a      	bne.n	800784e <_strtol_l.constprop.0+0x9a>
 80077f8:	782a      	ldrb	r2, [r5, #0]
 80077fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80077fe:	2a58      	cmp	r2, #88	@ 0x58
 8007800:	d125      	bne.n	800784e <_strtol_l.constprop.0+0x9a>
 8007802:	786c      	ldrb	r4, [r5, #1]
 8007804:	2310      	movs	r3, #16
 8007806:	3502      	adds	r5, #2
 8007808:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800780c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007810:	2200      	movs	r2, #0
 8007812:	fbbc f9f3 	udiv	r9, ip, r3
 8007816:	4610      	mov	r0, r2
 8007818:	fb03 ca19 	mls	sl, r3, r9, ip
 800781c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007820:	2f09      	cmp	r7, #9
 8007822:	d81b      	bhi.n	800785c <_strtol_l.constprop.0+0xa8>
 8007824:	463c      	mov	r4, r7
 8007826:	42a3      	cmp	r3, r4
 8007828:	dd27      	ble.n	800787a <_strtol_l.constprop.0+0xc6>
 800782a:	1c57      	adds	r7, r2, #1
 800782c:	d007      	beq.n	800783e <_strtol_l.constprop.0+0x8a>
 800782e:	4581      	cmp	r9, r0
 8007830:	d320      	bcc.n	8007874 <_strtol_l.constprop.0+0xc0>
 8007832:	d101      	bne.n	8007838 <_strtol_l.constprop.0+0x84>
 8007834:	45a2      	cmp	sl, r4
 8007836:	db1d      	blt.n	8007874 <_strtol_l.constprop.0+0xc0>
 8007838:	fb00 4003 	mla	r0, r0, r3, r4
 800783c:	2201      	movs	r2, #1
 800783e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007842:	e7eb      	b.n	800781c <_strtol_l.constprop.0+0x68>
 8007844:	2c2b      	cmp	r4, #43	@ 0x2b
 8007846:	bf04      	itt	eq
 8007848:	782c      	ldrbeq	r4, [r5, #0]
 800784a:	1c95      	addeq	r5, r2, #2
 800784c:	e7cf      	b.n	80077ee <_strtol_l.constprop.0+0x3a>
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1da      	bne.n	8007808 <_strtol_l.constprop.0+0x54>
 8007852:	2c30      	cmp	r4, #48	@ 0x30
 8007854:	bf0c      	ite	eq
 8007856:	2308      	moveq	r3, #8
 8007858:	230a      	movne	r3, #10
 800785a:	e7d5      	b.n	8007808 <_strtol_l.constprop.0+0x54>
 800785c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007860:	2f19      	cmp	r7, #25
 8007862:	d801      	bhi.n	8007868 <_strtol_l.constprop.0+0xb4>
 8007864:	3c37      	subs	r4, #55	@ 0x37
 8007866:	e7de      	b.n	8007826 <_strtol_l.constprop.0+0x72>
 8007868:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800786c:	2f19      	cmp	r7, #25
 800786e:	d804      	bhi.n	800787a <_strtol_l.constprop.0+0xc6>
 8007870:	3c57      	subs	r4, #87	@ 0x57
 8007872:	e7d8      	b.n	8007826 <_strtol_l.constprop.0+0x72>
 8007874:	f04f 32ff 	mov.w	r2, #4294967295
 8007878:	e7e1      	b.n	800783e <_strtol_l.constprop.0+0x8a>
 800787a:	1c53      	adds	r3, r2, #1
 800787c:	d108      	bne.n	8007890 <_strtol_l.constprop.0+0xdc>
 800787e:	2322      	movs	r3, #34	@ 0x22
 8007880:	f8ce 3000 	str.w	r3, [lr]
 8007884:	4660      	mov	r0, ip
 8007886:	f1b8 0f00 	cmp.w	r8, #0
 800788a:	d0a0      	beq.n	80077ce <_strtol_l.constprop.0+0x1a>
 800788c:	1e69      	subs	r1, r5, #1
 800788e:	e006      	b.n	800789e <_strtol_l.constprop.0+0xea>
 8007890:	b106      	cbz	r6, 8007894 <_strtol_l.constprop.0+0xe0>
 8007892:	4240      	negs	r0, r0
 8007894:	f1b8 0f00 	cmp.w	r8, #0
 8007898:	d099      	beq.n	80077ce <_strtol_l.constprop.0+0x1a>
 800789a:	2a00      	cmp	r2, #0
 800789c:	d1f6      	bne.n	800788c <_strtol_l.constprop.0+0xd8>
 800789e:	f8c8 1000 	str.w	r1, [r8]
 80078a2:	e794      	b.n	80077ce <_strtol_l.constprop.0+0x1a>
 80078a4:	080086db 	.word	0x080086db

080078a8 <_strtol_r>:
 80078a8:	f7ff bf84 	b.w	80077b4 <_strtol_l.constprop.0>

080078ac <_strtoul_l.constprop.0>:
 80078ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078b0:	4e34      	ldr	r6, [pc, #208]	@ (8007984 <_strtoul_l.constprop.0+0xd8>)
 80078b2:	4686      	mov	lr, r0
 80078b4:	460d      	mov	r5, r1
 80078b6:	4628      	mov	r0, r5
 80078b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078bc:	5d37      	ldrb	r7, [r6, r4]
 80078be:	f017 0708 	ands.w	r7, r7, #8
 80078c2:	d1f8      	bne.n	80078b6 <_strtoul_l.constprop.0+0xa>
 80078c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80078c6:	d12f      	bne.n	8007928 <_strtoul_l.constprop.0+0x7c>
 80078c8:	782c      	ldrb	r4, [r5, #0]
 80078ca:	2701      	movs	r7, #1
 80078cc:	1c85      	adds	r5, r0, #2
 80078ce:	f033 0010 	bics.w	r0, r3, #16
 80078d2:	d109      	bne.n	80078e8 <_strtoul_l.constprop.0+0x3c>
 80078d4:	2c30      	cmp	r4, #48	@ 0x30
 80078d6:	d12c      	bne.n	8007932 <_strtoul_l.constprop.0+0x86>
 80078d8:	7828      	ldrb	r0, [r5, #0]
 80078da:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80078de:	2858      	cmp	r0, #88	@ 0x58
 80078e0:	d127      	bne.n	8007932 <_strtoul_l.constprop.0+0x86>
 80078e2:	786c      	ldrb	r4, [r5, #1]
 80078e4:	2310      	movs	r3, #16
 80078e6:	3502      	adds	r5, #2
 80078e8:	f04f 38ff 	mov.w	r8, #4294967295
 80078ec:	2600      	movs	r6, #0
 80078ee:	fbb8 f8f3 	udiv	r8, r8, r3
 80078f2:	fb03 f908 	mul.w	r9, r3, r8
 80078f6:	ea6f 0909 	mvn.w	r9, r9
 80078fa:	4630      	mov	r0, r6
 80078fc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007900:	f1bc 0f09 	cmp.w	ip, #9
 8007904:	d81c      	bhi.n	8007940 <_strtoul_l.constprop.0+0x94>
 8007906:	4664      	mov	r4, ip
 8007908:	42a3      	cmp	r3, r4
 800790a:	dd2a      	ble.n	8007962 <_strtoul_l.constprop.0+0xb6>
 800790c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007910:	d007      	beq.n	8007922 <_strtoul_l.constprop.0+0x76>
 8007912:	4580      	cmp	r8, r0
 8007914:	d322      	bcc.n	800795c <_strtoul_l.constprop.0+0xb0>
 8007916:	d101      	bne.n	800791c <_strtoul_l.constprop.0+0x70>
 8007918:	45a1      	cmp	r9, r4
 800791a:	db1f      	blt.n	800795c <_strtoul_l.constprop.0+0xb0>
 800791c:	fb00 4003 	mla	r0, r0, r3, r4
 8007920:	2601      	movs	r6, #1
 8007922:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007926:	e7e9      	b.n	80078fc <_strtoul_l.constprop.0+0x50>
 8007928:	2c2b      	cmp	r4, #43	@ 0x2b
 800792a:	bf04      	itt	eq
 800792c:	782c      	ldrbeq	r4, [r5, #0]
 800792e:	1c85      	addeq	r5, r0, #2
 8007930:	e7cd      	b.n	80078ce <_strtoul_l.constprop.0+0x22>
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1d8      	bne.n	80078e8 <_strtoul_l.constprop.0+0x3c>
 8007936:	2c30      	cmp	r4, #48	@ 0x30
 8007938:	bf0c      	ite	eq
 800793a:	2308      	moveq	r3, #8
 800793c:	230a      	movne	r3, #10
 800793e:	e7d3      	b.n	80078e8 <_strtoul_l.constprop.0+0x3c>
 8007940:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007944:	f1bc 0f19 	cmp.w	ip, #25
 8007948:	d801      	bhi.n	800794e <_strtoul_l.constprop.0+0xa2>
 800794a:	3c37      	subs	r4, #55	@ 0x37
 800794c:	e7dc      	b.n	8007908 <_strtoul_l.constprop.0+0x5c>
 800794e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8007952:	f1bc 0f19 	cmp.w	ip, #25
 8007956:	d804      	bhi.n	8007962 <_strtoul_l.constprop.0+0xb6>
 8007958:	3c57      	subs	r4, #87	@ 0x57
 800795a:	e7d5      	b.n	8007908 <_strtoul_l.constprop.0+0x5c>
 800795c:	f04f 36ff 	mov.w	r6, #4294967295
 8007960:	e7df      	b.n	8007922 <_strtoul_l.constprop.0+0x76>
 8007962:	1c73      	adds	r3, r6, #1
 8007964:	d106      	bne.n	8007974 <_strtoul_l.constprop.0+0xc8>
 8007966:	2322      	movs	r3, #34	@ 0x22
 8007968:	f8ce 3000 	str.w	r3, [lr]
 800796c:	4630      	mov	r0, r6
 800796e:	b932      	cbnz	r2, 800797e <_strtoul_l.constprop.0+0xd2>
 8007970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007974:	b107      	cbz	r7, 8007978 <_strtoul_l.constprop.0+0xcc>
 8007976:	4240      	negs	r0, r0
 8007978:	2a00      	cmp	r2, #0
 800797a:	d0f9      	beq.n	8007970 <_strtoul_l.constprop.0+0xc4>
 800797c:	b106      	cbz	r6, 8007980 <_strtoul_l.constprop.0+0xd4>
 800797e:	1e69      	subs	r1, r5, #1
 8007980:	6011      	str	r1, [r2, #0]
 8007982:	e7f5      	b.n	8007970 <_strtoul_l.constprop.0+0xc4>
 8007984:	080086db 	.word	0x080086db

08007988 <_strtoul_r>:
 8007988:	f7ff bf90 	b.w	80078ac <_strtoul_l.constprop.0>

0800798c <__ascii_wctomb>:
 800798c:	4603      	mov	r3, r0
 800798e:	4608      	mov	r0, r1
 8007990:	b141      	cbz	r1, 80079a4 <__ascii_wctomb+0x18>
 8007992:	2aff      	cmp	r2, #255	@ 0xff
 8007994:	d904      	bls.n	80079a0 <__ascii_wctomb+0x14>
 8007996:	228a      	movs	r2, #138	@ 0x8a
 8007998:	601a      	str	r2, [r3, #0]
 800799a:	f04f 30ff 	mov.w	r0, #4294967295
 800799e:	4770      	bx	lr
 80079a0:	700a      	strb	r2, [r1, #0]
 80079a2:	2001      	movs	r0, #1
 80079a4:	4770      	bx	lr
	...

080079a8 <fiprintf>:
 80079a8:	b40e      	push	{r1, r2, r3}
 80079aa:	b503      	push	{r0, r1, lr}
 80079ac:	4601      	mov	r1, r0
 80079ae:	ab03      	add	r3, sp, #12
 80079b0:	4805      	ldr	r0, [pc, #20]	@ (80079c8 <fiprintf+0x20>)
 80079b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80079b6:	6800      	ldr	r0, [r0, #0]
 80079b8:	9301      	str	r3, [sp, #4]
 80079ba:	f000 f83f 	bl	8007a3c <_vfiprintf_r>
 80079be:	b002      	add	sp, #8
 80079c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80079c4:	b003      	add	sp, #12
 80079c6:	4770      	bx	lr
 80079c8:	2000001c 	.word	0x2000001c

080079cc <abort>:
 80079cc:	b508      	push	{r3, lr}
 80079ce:	2006      	movs	r0, #6
 80079d0:	f000 fa08 	bl	8007de4 <raise>
 80079d4:	2001      	movs	r0, #1
 80079d6:	f7f9 fe93 	bl	8001700 <_exit>

080079da <_malloc_usable_size_r>:
 80079da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079de:	1f18      	subs	r0, r3, #4
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	bfbc      	itt	lt
 80079e4:	580b      	ldrlt	r3, [r1, r0]
 80079e6:	18c0      	addlt	r0, r0, r3
 80079e8:	4770      	bx	lr

080079ea <__sfputc_r>:
 80079ea:	6893      	ldr	r3, [r2, #8]
 80079ec:	3b01      	subs	r3, #1
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	b410      	push	{r4}
 80079f2:	6093      	str	r3, [r2, #8]
 80079f4:	da08      	bge.n	8007a08 <__sfputc_r+0x1e>
 80079f6:	6994      	ldr	r4, [r2, #24]
 80079f8:	42a3      	cmp	r3, r4
 80079fa:	db01      	blt.n	8007a00 <__sfputc_r+0x16>
 80079fc:	290a      	cmp	r1, #10
 80079fe:	d103      	bne.n	8007a08 <__sfputc_r+0x1e>
 8007a00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a04:	f000 b932 	b.w	8007c6c <__swbuf_r>
 8007a08:	6813      	ldr	r3, [r2, #0]
 8007a0a:	1c58      	adds	r0, r3, #1
 8007a0c:	6010      	str	r0, [r2, #0]
 8007a0e:	7019      	strb	r1, [r3, #0]
 8007a10:	4608      	mov	r0, r1
 8007a12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <__sfputs_r>:
 8007a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1a:	4606      	mov	r6, r0
 8007a1c:	460f      	mov	r7, r1
 8007a1e:	4614      	mov	r4, r2
 8007a20:	18d5      	adds	r5, r2, r3
 8007a22:	42ac      	cmp	r4, r5
 8007a24:	d101      	bne.n	8007a2a <__sfputs_r+0x12>
 8007a26:	2000      	movs	r0, #0
 8007a28:	e007      	b.n	8007a3a <__sfputs_r+0x22>
 8007a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a2e:	463a      	mov	r2, r7
 8007a30:	4630      	mov	r0, r6
 8007a32:	f7ff ffda 	bl	80079ea <__sfputc_r>
 8007a36:	1c43      	adds	r3, r0, #1
 8007a38:	d1f3      	bne.n	8007a22 <__sfputs_r+0xa>
 8007a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007a3c <_vfiprintf_r>:
 8007a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a40:	460d      	mov	r5, r1
 8007a42:	b09d      	sub	sp, #116	@ 0x74
 8007a44:	4614      	mov	r4, r2
 8007a46:	4698      	mov	r8, r3
 8007a48:	4606      	mov	r6, r0
 8007a4a:	b118      	cbz	r0, 8007a54 <_vfiprintf_r+0x18>
 8007a4c:	6a03      	ldr	r3, [r0, #32]
 8007a4e:	b90b      	cbnz	r3, 8007a54 <_vfiprintf_r+0x18>
 8007a50:	f7fd fc5e 	bl	8005310 <__sinit>
 8007a54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a56:	07d9      	lsls	r1, r3, #31
 8007a58:	d405      	bmi.n	8007a66 <_vfiprintf_r+0x2a>
 8007a5a:	89ab      	ldrh	r3, [r5, #12]
 8007a5c:	059a      	lsls	r2, r3, #22
 8007a5e:	d402      	bmi.n	8007a66 <_vfiprintf_r+0x2a>
 8007a60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a62:	f7fd fd98 	bl	8005596 <__retarget_lock_acquire_recursive>
 8007a66:	89ab      	ldrh	r3, [r5, #12]
 8007a68:	071b      	lsls	r3, r3, #28
 8007a6a:	d501      	bpl.n	8007a70 <_vfiprintf_r+0x34>
 8007a6c:	692b      	ldr	r3, [r5, #16]
 8007a6e:	b99b      	cbnz	r3, 8007a98 <_vfiprintf_r+0x5c>
 8007a70:	4629      	mov	r1, r5
 8007a72:	4630      	mov	r0, r6
 8007a74:	f000 f938 	bl	8007ce8 <__swsetup_r>
 8007a78:	b170      	cbz	r0, 8007a98 <_vfiprintf_r+0x5c>
 8007a7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a7c:	07dc      	lsls	r4, r3, #31
 8007a7e:	d504      	bpl.n	8007a8a <_vfiprintf_r+0x4e>
 8007a80:	f04f 30ff 	mov.w	r0, #4294967295
 8007a84:	b01d      	add	sp, #116	@ 0x74
 8007a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a8a:	89ab      	ldrh	r3, [r5, #12]
 8007a8c:	0598      	lsls	r0, r3, #22
 8007a8e:	d4f7      	bmi.n	8007a80 <_vfiprintf_r+0x44>
 8007a90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a92:	f7fd fd81 	bl	8005598 <__retarget_lock_release_recursive>
 8007a96:	e7f3      	b.n	8007a80 <_vfiprintf_r+0x44>
 8007a98:	2300      	movs	r3, #0
 8007a9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a9c:	2320      	movs	r3, #32
 8007a9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007aa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007aa6:	2330      	movs	r3, #48	@ 0x30
 8007aa8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007c58 <_vfiprintf_r+0x21c>
 8007aac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ab0:	f04f 0901 	mov.w	r9, #1
 8007ab4:	4623      	mov	r3, r4
 8007ab6:	469a      	mov	sl, r3
 8007ab8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007abc:	b10a      	cbz	r2, 8007ac2 <_vfiprintf_r+0x86>
 8007abe:	2a25      	cmp	r2, #37	@ 0x25
 8007ac0:	d1f9      	bne.n	8007ab6 <_vfiprintf_r+0x7a>
 8007ac2:	ebba 0b04 	subs.w	fp, sl, r4
 8007ac6:	d00b      	beq.n	8007ae0 <_vfiprintf_r+0xa4>
 8007ac8:	465b      	mov	r3, fp
 8007aca:	4622      	mov	r2, r4
 8007acc:	4629      	mov	r1, r5
 8007ace:	4630      	mov	r0, r6
 8007ad0:	f7ff ffa2 	bl	8007a18 <__sfputs_r>
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	f000 80a7 	beq.w	8007c28 <_vfiprintf_r+0x1ec>
 8007ada:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007adc:	445a      	add	r2, fp
 8007ade:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ae0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 809f 	beq.w	8007c28 <_vfiprintf_r+0x1ec>
 8007aea:	2300      	movs	r3, #0
 8007aec:	f04f 32ff 	mov.w	r2, #4294967295
 8007af0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007af4:	f10a 0a01 	add.w	sl, sl, #1
 8007af8:	9304      	str	r3, [sp, #16]
 8007afa:	9307      	str	r3, [sp, #28]
 8007afc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b00:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b02:	4654      	mov	r4, sl
 8007b04:	2205      	movs	r2, #5
 8007b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b0a:	4853      	ldr	r0, [pc, #332]	@ (8007c58 <_vfiprintf_r+0x21c>)
 8007b0c:	f7f8 fb60 	bl	80001d0 <memchr>
 8007b10:	9a04      	ldr	r2, [sp, #16]
 8007b12:	b9d8      	cbnz	r0, 8007b4c <_vfiprintf_r+0x110>
 8007b14:	06d1      	lsls	r1, r2, #27
 8007b16:	bf44      	itt	mi
 8007b18:	2320      	movmi	r3, #32
 8007b1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b1e:	0713      	lsls	r3, r2, #28
 8007b20:	bf44      	itt	mi
 8007b22:	232b      	movmi	r3, #43	@ 0x2b
 8007b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b28:	f89a 3000 	ldrb.w	r3, [sl]
 8007b2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b2e:	d015      	beq.n	8007b5c <_vfiprintf_r+0x120>
 8007b30:	9a07      	ldr	r2, [sp, #28]
 8007b32:	4654      	mov	r4, sl
 8007b34:	2000      	movs	r0, #0
 8007b36:	f04f 0c0a 	mov.w	ip, #10
 8007b3a:	4621      	mov	r1, r4
 8007b3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b40:	3b30      	subs	r3, #48	@ 0x30
 8007b42:	2b09      	cmp	r3, #9
 8007b44:	d94b      	bls.n	8007bde <_vfiprintf_r+0x1a2>
 8007b46:	b1b0      	cbz	r0, 8007b76 <_vfiprintf_r+0x13a>
 8007b48:	9207      	str	r2, [sp, #28]
 8007b4a:	e014      	b.n	8007b76 <_vfiprintf_r+0x13a>
 8007b4c:	eba0 0308 	sub.w	r3, r0, r8
 8007b50:	fa09 f303 	lsl.w	r3, r9, r3
 8007b54:	4313      	orrs	r3, r2
 8007b56:	9304      	str	r3, [sp, #16]
 8007b58:	46a2      	mov	sl, r4
 8007b5a:	e7d2      	b.n	8007b02 <_vfiprintf_r+0xc6>
 8007b5c:	9b03      	ldr	r3, [sp, #12]
 8007b5e:	1d19      	adds	r1, r3, #4
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	9103      	str	r1, [sp, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	bfbb      	ittet	lt
 8007b68:	425b      	neglt	r3, r3
 8007b6a:	f042 0202 	orrlt.w	r2, r2, #2
 8007b6e:	9307      	strge	r3, [sp, #28]
 8007b70:	9307      	strlt	r3, [sp, #28]
 8007b72:	bfb8      	it	lt
 8007b74:	9204      	strlt	r2, [sp, #16]
 8007b76:	7823      	ldrb	r3, [r4, #0]
 8007b78:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b7a:	d10a      	bne.n	8007b92 <_vfiprintf_r+0x156>
 8007b7c:	7863      	ldrb	r3, [r4, #1]
 8007b7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b80:	d132      	bne.n	8007be8 <_vfiprintf_r+0x1ac>
 8007b82:	9b03      	ldr	r3, [sp, #12]
 8007b84:	1d1a      	adds	r2, r3, #4
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	9203      	str	r2, [sp, #12]
 8007b8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b8e:	3402      	adds	r4, #2
 8007b90:	9305      	str	r3, [sp, #20]
 8007b92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007c68 <_vfiprintf_r+0x22c>
 8007b96:	7821      	ldrb	r1, [r4, #0]
 8007b98:	2203      	movs	r2, #3
 8007b9a:	4650      	mov	r0, sl
 8007b9c:	f7f8 fb18 	bl	80001d0 <memchr>
 8007ba0:	b138      	cbz	r0, 8007bb2 <_vfiprintf_r+0x176>
 8007ba2:	9b04      	ldr	r3, [sp, #16]
 8007ba4:	eba0 000a 	sub.w	r0, r0, sl
 8007ba8:	2240      	movs	r2, #64	@ 0x40
 8007baa:	4082      	lsls	r2, r0
 8007bac:	4313      	orrs	r3, r2
 8007bae:	3401      	adds	r4, #1
 8007bb0:	9304      	str	r3, [sp, #16]
 8007bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bb6:	4829      	ldr	r0, [pc, #164]	@ (8007c5c <_vfiprintf_r+0x220>)
 8007bb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007bbc:	2206      	movs	r2, #6
 8007bbe:	f7f8 fb07 	bl	80001d0 <memchr>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	d03f      	beq.n	8007c46 <_vfiprintf_r+0x20a>
 8007bc6:	4b26      	ldr	r3, [pc, #152]	@ (8007c60 <_vfiprintf_r+0x224>)
 8007bc8:	bb1b      	cbnz	r3, 8007c12 <_vfiprintf_r+0x1d6>
 8007bca:	9b03      	ldr	r3, [sp, #12]
 8007bcc:	3307      	adds	r3, #7
 8007bce:	f023 0307 	bic.w	r3, r3, #7
 8007bd2:	3308      	adds	r3, #8
 8007bd4:	9303      	str	r3, [sp, #12]
 8007bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bd8:	443b      	add	r3, r7
 8007bda:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bdc:	e76a      	b.n	8007ab4 <_vfiprintf_r+0x78>
 8007bde:	fb0c 3202 	mla	r2, ip, r2, r3
 8007be2:	460c      	mov	r4, r1
 8007be4:	2001      	movs	r0, #1
 8007be6:	e7a8      	b.n	8007b3a <_vfiprintf_r+0xfe>
 8007be8:	2300      	movs	r3, #0
 8007bea:	3401      	adds	r4, #1
 8007bec:	9305      	str	r3, [sp, #20]
 8007bee:	4619      	mov	r1, r3
 8007bf0:	f04f 0c0a 	mov.w	ip, #10
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bfa:	3a30      	subs	r2, #48	@ 0x30
 8007bfc:	2a09      	cmp	r2, #9
 8007bfe:	d903      	bls.n	8007c08 <_vfiprintf_r+0x1cc>
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d0c6      	beq.n	8007b92 <_vfiprintf_r+0x156>
 8007c04:	9105      	str	r1, [sp, #20]
 8007c06:	e7c4      	b.n	8007b92 <_vfiprintf_r+0x156>
 8007c08:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c0c:	4604      	mov	r4, r0
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e7f0      	b.n	8007bf4 <_vfiprintf_r+0x1b8>
 8007c12:	ab03      	add	r3, sp, #12
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	462a      	mov	r2, r5
 8007c18:	4b12      	ldr	r3, [pc, #72]	@ (8007c64 <_vfiprintf_r+0x228>)
 8007c1a:	a904      	add	r1, sp, #16
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	f7fc ff33 	bl	8004a88 <_printf_float>
 8007c22:	4607      	mov	r7, r0
 8007c24:	1c78      	adds	r0, r7, #1
 8007c26:	d1d6      	bne.n	8007bd6 <_vfiprintf_r+0x19a>
 8007c28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c2a:	07d9      	lsls	r1, r3, #31
 8007c2c:	d405      	bmi.n	8007c3a <_vfiprintf_r+0x1fe>
 8007c2e:	89ab      	ldrh	r3, [r5, #12]
 8007c30:	059a      	lsls	r2, r3, #22
 8007c32:	d402      	bmi.n	8007c3a <_vfiprintf_r+0x1fe>
 8007c34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c36:	f7fd fcaf 	bl	8005598 <__retarget_lock_release_recursive>
 8007c3a:	89ab      	ldrh	r3, [r5, #12]
 8007c3c:	065b      	lsls	r3, r3, #25
 8007c3e:	f53f af1f 	bmi.w	8007a80 <_vfiprintf_r+0x44>
 8007c42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c44:	e71e      	b.n	8007a84 <_vfiprintf_r+0x48>
 8007c46:	ab03      	add	r3, sp, #12
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	462a      	mov	r2, r5
 8007c4c:	4b05      	ldr	r3, [pc, #20]	@ (8007c64 <_vfiprintf_r+0x228>)
 8007c4e:	a904      	add	r1, sp, #16
 8007c50:	4630      	mov	r0, r6
 8007c52:	f7fd f9b1 	bl	8004fb8 <_printf_i>
 8007c56:	e7e4      	b.n	8007c22 <_vfiprintf_r+0x1e6>
 8007c58:	08008668 	.word	0x08008668
 8007c5c:	08008672 	.word	0x08008672
 8007c60:	08004a89 	.word	0x08004a89
 8007c64:	08007a19 	.word	0x08007a19
 8007c68:	0800866e 	.word	0x0800866e

08007c6c <__swbuf_r>:
 8007c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6e:	460e      	mov	r6, r1
 8007c70:	4614      	mov	r4, r2
 8007c72:	4605      	mov	r5, r0
 8007c74:	b118      	cbz	r0, 8007c7e <__swbuf_r+0x12>
 8007c76:	6a03      	ldr	r3, [r0, #32]
 8007c78:	b90b      	cbnz	r3, 8007c7e <__swbuf_r+0x12>
 8007c7a:	f7fd fb49 	bl	8005310 <__sinit>
 8007c7e:	69a3      	ldr	r3, [r4, #24]
 8007c80:	60a3      	str	r3, [r4, #8]
 8007c82:	89a3      	ldrh	r3, [r4, #12]
 8007c84:	071a      	lsls	r2, r3, #28
 8007c86:	d501      	bpl.n	8007c8c <__swbuf_r+0x20>
 8007c88:	6923      	ldr	r3, [r4, #16]
 8007c8a:	b943      	cbnz	r3, 8007c9e <__swbuf_r+0x32>
 8007c8c:	4621      	mov	r1, r4
 8007c8e:	4628      	mov	r0, r5
 8007c90:	f000 f82a 	bl	8007ce8 <__swsetup_r>
 8007c94:	b118      	cbz	r0, 8007c9e <__swbuf_r+0x32>
 8007c96:	f04f 37ff 	mov.w	r7, #4294967295
 8007c9a:	4638      	mov	r0, r7
 8007c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	6922      	ldr	r2, [r4, #16]
 8007ca2:	1a98      	subs	r0, r3, r2
 8007ca4:	6963      	ldr	r3, [r4, #20]
 8007ca6:	b2f6      	uxtb	r6, r6
 8007ca8:	4283      	cmp	r3, r0
 8007caa:	4637      	mov	r7, r6
 8007cac:	dc05      	bgt.n	8007cba <__swbuf_r+0x4e>
 8007cae:	4621      	mov	r1, r4
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	f7ff fc39 	bl	8007528 <_fflush_r>
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	d1ed      	bne.n	8007c96 <__swbuf_r+0x2a>
 8007cba:	68a3      	ldr	r3, [r4, #8]
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	60a3      	str	r3, [r4, #8]
 8007cc0:	6823      	ldr	r3, [r4, #0]
 8007cc2:	1c5a      	adds	r2, r3, #1
 8007cc4:	6022      	str	r2, [r4, #0]
 8007cc6:	701e      	strb	r6, [r3, #0]
 8007cc8:	6962      	ldr	r2, [r4, #20]
 8007cca:	1c43      	adds	r3, r0, #1
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d004      	beq.n	8007cda <__swbuf_r+0x6e>
 8007cd0:	89a3      	ldrh	r3, [r4, #12]
 8007cd2:	07db      	lsls	r3, r3, #31
 8007cd4:	d5e1      	bpl.n	8007c9a <__swbuf_r+0x2e>
 8007cd6:	2e0a      	cmp	r6, #10
 8007cd8:	d1df      	bne.n	8007c9a <__swbuf_r+0x2e>
 8007cda:	4621      	mov	r1, r4
 8007cdc:	4628      	mov	r0, r5
 8007cde:	f7ff fc23 	bl	8007528 <_fflush_r>
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	d0d9      	beq.n	8007c9a <__swbuf_r+0x2e>
 8007ce6:	e7d6      	b.n	8007c96 <__swbuf_r+0x2a>

08007ce8 <__swsetup_r>:
 8007ce8:	b538      	push	{r3, r4, r5, lr}
 8007cea:	4b29      	ldr	r3, [pc, #164]	@ (8007d90 <__swsetup_r+0xa8>)
 8007cec:	4605      	mov	r5, r0
 8007cee:	6818      	ldr	r0, [r3, #0]
 8007cf0:	460c      	mov	r4, r1
 8007cf2:	b118      	cbz	r0, 8007cfc <__swsetup_r+0x14>
 8007cf4:	6a03      	ldr	r3, [r0, #32]
 8007cf6:	b90b      	cbnz	r3, 8007cfc <__swsetup_r+0x14>
 8007cf8:	f7fd fb0a 	bl	8005310 <__sinit>
 8007cfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d00:	0719      	lsls	r1, r3, #28
 8007d02:	d422      	bmi.n	8007d4a <__swsetup_r+0x62>
 8007d04:	06da      	lsls	r2, r3, #27
 8007d06:	d407      	bmi.n	8007d18 <__swsetup_r+0x30>
 8007d08:	2209      	movs	r2, #9
 8007d0a:	602a      	str	r2, [r5, #0]
 8007d0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d10:	81a3      	strh	r3, [r4, #12]
 8007d12:	f04f 30ff 	mov.w	r0, #4294967295
 8007d16:	e033      	b.n	8007d80 <__swsetup_r+0x98>
 8007d18:	0758      	lsls	r0, r3, #29
 8007d1a:	d512      	bpl.n	8007d42 <__swsetup_r+0x5a>
 8007d1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d1e:	b141      	cbz	r1, 8007d32 <__swsetup_r+0x4a>
 8007d20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d24:	4299      	cmp	r1, r3
 8007d26:	d002      	beq.n	8007d2e <__swsetup_r+0x46>
 8007d28:	4628      	mov	r0, r5
 8007d2a:	f7fe fa85 	bl	8006238 <_free_r>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d32:	89a3      	ldrh	r3, [r4, #12]
 8007d34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007d38:	81a3      	strh	r3, [r4, #12]
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	6063      	str	r3, [r4, #4]
 8007d3e:	6923      	ldr	r3, [r4, #16]
 8007d40:	6023      	str	r3, [r4, #0]
 8007d42:	89a3      	ldrh	r3, [r4, #12]
 8007d44:	f043 0308 	orr.w	r3, r3, #8
 8007d48:	81a3      	strh	r3, [r4, #12]
 8007d4a:	6923      	ldr	r3, [r4, #16]
 8007d4c:	b94b      	cbnz	r3, 8007d62 <__swsetup_r+0x7a>
 8007d4e:	89a3      	ldrh	r3, [r4, #12]
 8007d50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d58:	d003      	beq.n	8007d62 <__swsetup_r+0x7a>
 8007d5a:	4621      	mov	r1, r4
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	f000 f883 	bl	8007e68 <__smakebuf_r>
 8007d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d66:	f013 0201 	ands.w	r2, r3, #1
 8007d6a:	d00a      	beq.n	8007d82 <__swsetup_r+0x9a>
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	60a2      	str	r2, [r4, #8]
 8007d70:	6962      	ldr	r2, [r4, #20]
 8007d72:	4252      	negs	r2, r2
 8007d74:	61a2      	str	r2, [r4, #24]
 8007d76:	6922      	ldr	r2, [r4, #16]
 8007d78:	b942      	cbnz	r2, 8007d8c <__swsetup_r+0xa4>
 8007d7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d7e:	d1c5      	bne.n	8007d0c <__swsetup_r+0x24>
 8007d80:	bd38      	pop	{r3, r4, r5, pc}
 8007d82:	0799      	lsls	r1, r3, #30
 8007d84:	bf58      	it	pl
 8007d86:	6962      	ldrpl	r2, [r4, #20]
 8007d88:	60a2      	str	r2, [r4, #8]
 8007d8a:	e7f4      	b.n	8007d76 <__swsetup_r+0x8e>
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	e7f7      	b.n	8007d80 <__swsetup_r+0x98>
 8007d90:	2000001c 	.word	0x2000001c

08007d94 <_raise_r>:
 8007d94:	291f      	cmp	r1, #31
 8007d96:	b538      	push	{r3, r4, r5, lr}
 8007d98:	4605      	mov	r5, r0
 8007d9a:	460c      	mov	r4, r1
 8007d9c:	d904      	bls.n	8007da8 <_raise_r+0x14>
 8007d9e:	2316      	movs	r3, #22
 8007da0:	6003      	str	r3, [r0, #0]
 8007da2:	f04f 30ff 	mov.w	r0, #4294967295
 8007da6:	bd38      	pop	{r3, r4, r5, pc}
 8007da8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007daa:	b112      	cbz	r2, 8007db2 <_raise_r+0x1e>
 8007dac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007db0:	b94b      	cbnz	r3, 8007dc6 <_raise_r+0x32>
 8007db2:	4628      	mov	r0, r5
 8007db4:	f000 f830 	bl	8007e18 <_getpid_r>
 8007db8:	4622      	mov	r2, r4
 8007dba:	4601      	mov	r1, r0
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dc2:	f000 b817 	b.w	8007df4 <_kill_r>
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d00a      	beq.n	8007de0 <_raise_r+0x4c>
 8007dca:	1c59      	adds	r1, r3, #1
 8007dcc:	d103      	bne.n	8007dd6 <_raise_r+0x42>
 8007dce:	2316      	movs	r3, #22
 8007dd0:	6003      	str	r3, [r0, #0]
 8007dd2:	2001      	movs	r0, #1
 8007dd4:	e7e7      	b.n	8007da6 <_raise_r+0x12>
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007ddc:	4620      	mov	r0, r4
 8007dde:	4798      	blx	r3
 8007de0:	2000      	movs	r0, #0
 8007de2:	e7e0      	b.n	8007da6 <_raise_r+0x12>

08007de4 <raise>:
 8007de4:	4b02      	ldr	r3, [pc, #8]	@ (8007df0 <raise+0xc>)
 8007de6:	4601      	mov	r1, r0
 8007de8:	6818      	ldr	r0, [r3, #0]
 8007dea:	f7ff bfd3 	b.w	8007d94 <_raise_r>
 8007dee:	bf00      	nop
 8007df0:	2000001c 	.word	0x2000001c

08007df4 <_kill_r>:
 8007df4:	b538      	push	{r3, r4, r5, lr}
 8007df6:	4d07      	ldr	r5, [pc, #28]	@ (8007e14 <_kill_r+0x20>)
 8007df8:	2300      	movs	r3, #0
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	4608      	mov	r0, r1
 8007dfe:	4611      	mov	r1, r2
 8007e00:	602b      	str	r3, [r5, #0]
 8007e02:	f7f9 fc6d 	bl	80016e0 <_kill>
 8007e06:	1c43      	adds	r3, r0, #1
 8007e08:	d102      	bne.n	8007e10 <_kill_r+0x1c>
 8007e0a:	682b      	ldr	r3, [r5, #0]
 8007e0c:	b103      	cbz	r3, 8007e10 <_kill_r+0x1c>
 8007e0e:	6023      	str	r3, [r4, #0]
 8007e10:	bd38      	pop	{r3, r4, r5, pc}
 8007e12:	bf00      	nop
 8007e14:	20003c40 	.word	0x20003c40

08007e18 <_getpid_r>:
 8007e18:	f7f9 bc5a 	b.w	80016d0 <_getpid>

08007e1c <__swhatbuf_r>:
 8007e1c:	b570      	push	{r4, r5, r6, lr}
 8007e1e:	460c      	mov	r4, r1
 8007e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e24:	2900      	cmp	r1, #0
 8007e26:	b096      	sub	sp, #88	@ 0x58
 8007e28:	4615      	mov	r5, r2
 8007e2a:	461e      	mov	r6, r3
 8007e2c:	da0d      	bge.n	8007e4a <__swhatbuf_r+0x2e>
 8007e2e:	89a3      	ldrh	r3, [r4, #12]
 8007e30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e34:	f04f 0100 	mov.w	r1, #0
 8007e38:	bf14      	ite	ne
 8007e3a:	2340      	movne	r3, #64	@ 0x40
 8007e3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e40:	2000      	movs	r0, #0
 8007e42:	6031      	str	r1, [r6, #0]
 8007e44:	602b      	str	r3, [r5, #0]
 8007e46:	b016      	add	sp, #88	@ 0x58
 8007e48:	bd70      	pop	{r4, r5, r6, pc}
 8007e4a:	466a      	mov	r2, sp
 8007e4c:	f000 f848 	bl	8007ee0 <_fstat_r>
 8007e50:	2800      	cmp	r0, #0
 8007e52:	dbec      	blt.n	8007e2e <__swhatbuf_r+0x12>
 8007e54:	9901      	ldr	r1, [sp, #4]
 8007e56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007e5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e5e:	4259      	negs	r1, r3
 8007e60:	4159      	adcs	r1, r3
 8007e62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e66:	e7eb      	b.n	8007e40 <__swhatbuf_r+0x24>

08007e68 <__smakebuf_r>:
 8007e68:	898b      	ldrh	r3, [r1, #12]
 8007e6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e6c:	079d      	lsls	r5, r3, #30
 8007e6e:	4606      	mov	r6, r0
 8007e70:	460c      	mov	r4, r1
 8007e72:	d507      	bpl.n	8007e84 <__smakebuf_r+0x1c>
 8007e74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e78:	6023      	str	r3, [r4, #0]
 8007e7a:	6123      	str	r3, [r4, #16]
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	6163      	str	r3, [r4, #20]
 8007e80:	b003      	add	sp, #12
 8007e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e84:	ab01      	add	r3, sp, #4
 8007e86:	466a      	mov	r2, sp
 8007e88:	f7ff ffc8 	bl	8007e1c <__swhatbuf_r>
 8007e8c:	9f00      	ldr	r7, [sp, #0]
 8007e8e:	4605      	mov	r5, r0
 8007e90:	4639      	mov	r1, r7
 8007e92:	4630      	mov	r0, r6
 8007e94:	f7fe fa44 	bl	8006320 <_malloc_r>
 8007e98:	b948      	cbnz	r0, 8007eae <__smakebuf_r+0x46>
 8007e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e9e:	059a      	lsls	r2, r3, #22
 8007ea0:	d4ee      	bmi.n	8007e80 <__smakebuf_r+0x18>
 8007ea2:	f023 0303 	bic.w	r3, r3, #3
 8007ea6:	f043 0302 	orr.w	r3, r3, #2
 8007eaa:	81a3      	strh	r3, [r4, #12]
 8007eac:	e7e2      	b.n	8007e74 <__smakebuf_r+0xc>
 8007eae:	89a3      	ldrh	r3, [r4, #12]
 8007eb0:	6020      	str	r0, [r4, #0]
 8007eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eb6:	81a3      	strh	r3, [r4, #12]
 8007eb8:	9b01      	ldr	r3, [sp, #4]
 8007eba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ebe:	b15b      	cbz	r3, 8007ed8 <__smakebuf_r+0x70>
 8007ec0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	f000 f81d 	bl	8007f04 <_isatty_r>
 8007eca:	b128      	cbz	r0, 8007ed8 <__smakebuf_r+0x70>
 8007ecc:	89a3      	ldrh	r3, [r4, #12]
 8007ece:	f023 0303 	bic.w	r3, r3, #3
 8007ed2:	f043 0301 	orr.w	r3, r3, #1
 8007ed6:	81a3      	strh	r3, [r4, #12]
 8007ed8:	89a3      	ldrh	r3, [r4, #12]
 8007eda:	431d      	orrs	r5, r3
 8007edc:	81a5      	strh	r5, [r4, #12]
 8007ede:	e7cf      	b.n	8007e80 <__smakebuf_r+0x18>

08007ee0 <_fstat_r>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	4d07      	ldr	r5, [pc, #28]	@ (8007f00 <_fstat_r+0x20>)
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	4608      	mov	r0, r1
 8007eea:	4611      	mov	r1, r2
 8007eec:	602b      	str	r3, [r5, #0]
 8007eee:	f7f9 fc57 	bl	80017a0 <_fstat>
 8007ef2:	1c43      	adds	r3, r0, #1
 8007ef4:	d102      	bne.n	8007efc <_fstat_r+0x1c>
 8007ef6:	682b      	ldr	r3, [r5, #0]
 8007ef8:	b103      	cbz	r3, 8007efc <_fstat_r+0x1c>
 8007efa:	6023      	str	r3, [r4, #0]
 8007efc:	bd38      	pop	{r3, r4, r5, pc}
 8007efe:	bf00      	nop
 8007f00:	20003c40 	.word	0x20003c40

08007f04 <_isatty_r>:
 8007f04:	b538      	push	{r3, r4, r5, lr}
 8007f06:	4d06      	ldr	r5, [pc, #24]	@ (8007f20 <_isatty_r+0x1c>)
 8007f08:	2300      	movs	r3, #0
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	4608      	mov	r0, r1
 8007f0e:	602b      	str	r3, [r5, #0]
 8007f10:	f7f9 fc56 	bl	80017c0 <_isatty>
 8007f14:	1c43      	adds	r3, r0, #1
 8007f16:	d102      	bne.n	8007f1e <_isatty_r+0x1a>
 8007f18:	682b      	ldr	r3, [r5, #0]
 8007f1a:	b103      	cbz	r3, 8007f1e <_isatty_r+0x1a>
 8007f1c:	6023      	str	r3, [r4, #0]
 8007f1e:	bd38      	pop	{r3, r4, r5, pc}
 8007f20:	20003c40 	.word	0x20003c40
 8007f24:	00000000 	.word	0x00000000

08007f28 <log>:
 8007f28:	b538      	push	{r3, r4, r5, lr}
 8007f2a:	ed2d 8b02 	vpush	{d8}
 8007f2e:	ec55 4b10 	vmov	r4, r5, d0
 8007f32:	f000 f841 	bl	8007fb8 <__ieee754_log>
 8007f36:	4622      	mov	r2, r4
 8007f38:	462b      	mov	r3, r5
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	4629      	mov	r1, r5
 8007f3e:	eeb0 8a40 	vmov.f32	s16, s0
 8007f42:	eef0 8a60 	vmov.f32	s17, s1
 8007f46:	f7f8 fdf1 	bl	8000b2c <__aeabi_dcmpun>
 8007f4a:	b998      	cbnz	r0, 8007f74 <log+0x4c>
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	2300      	movs	r3, #0
 8007f50:	4620      	mov	r0, r4
 8007f52:	4629      	mov	r1, r5
 8007f54:	f7f8 fde0 	bl	8000b18 <__aeabi_dcmpgt>
 8007f58:	b960      	cbnz	r0, 8007f74 <log+0x4c>
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	4620      	mov	r0, r4
 8007f60:	4629      	mov	r1, r5
 8007f62:	f7f8 fdb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f66:	b160      	cbz	r0, 8007f82 <log+0x5a>
 8007f68:	f7fd faea 	bl	8005540 <__errno>
 8007f6c:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8007f98 <log+0x70>
 8007f70:	2322      	movs	r3, #34	@ 0x22
 8007f72:	6003      	str	r3, [r0, #0]
 8007f74:	eeb0 0a48 	vmov.f32	s0, s16
 8007f78:	eef0 0a68 	vmov.f32	s1, s17
 8007f7c:	ecbd 8b02 	vpop	{d8}
 8007f80:	bd38      	pop	{r3, r4, r5, pc}
 8007f82:	f7fd fadd 	bl	8005540 <__errno>
 8007f86:	ecbd 8b02 	vpop	{d8}
 8007f8a:	2321      	movs	r3, #33	@ 0x21
 8007f8c:	6003      	str	r3, [r0, #0]
 8007f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f92:	4803      	ldr	r0, [pc, #12]	@ (8007fa0 <log+0x78>)
 8007f94:	f000 b808 	b.w	8007fa8 <nan>
 8007f98:	00000000 	.word	0x00000000
 8007f9c:	fff00000 	.word	0xfff00000
 8007fa0:	080086d9 	.word	0x080086d9
 8007fa4:	00000000 	.word	0x00000000

08007fa8 <nan>:
 8007fa8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007fb0 <nan+0x8>
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	00000000 	.word	0x00000000
 8007fb4:	7ff80000 	.word	0x7ff80000

08007fb8 <__ieee754_log>:
 8007fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fbc:	ec51 0b10 	vmov	r0, r1, d0
 8007fc0:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8007fc4:	b087      	sub	sp, #28
 8007fc6:	460d      	mov	r5, r1
 8007fc8:	da26      	bge.n	8008018 <__ieee754_log+0x60>
 8007fca:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007fce:	4303      	orrs	r3, r0
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	d10a      	bne.n	8007fea <__ieee754_log+0x32>
 8007fd4:	49ce      	ldr	r1, [pc, #824]	@ (8008310 <__ieee754_log+0x358>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	2300      	movs	r3, #0
 8007fda:	2000      	movs	r0, #0
 8007fdc:	f7f8 fc36 	bl	800084c <__aeabi_ddiv>
 8007fe0:	ec41 0b10 	vmov	d0, r0, r1
 8007fe4:	b007      	add	sp, #28
 8007fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fea:	2900      	cmp	r1, #0
 8007fec:	da05      	bge.n	8007ffa <__ieee754_log+0x42>
 8007fee:	460b      	mov	r3, r1
 8007ff0:	f7f8 f94a 	bl	8000288 <__aeabi_dsub>
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	e7f0      	b.n	8007fdc <__ieee754_log+0x24>
 8007ffa:	4bc6      	ldr	r3, [pc, #792]	@ (8008314 <__ieee754_log+0x35c>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f7f8 fafb 	bl	80005f8 <__aeabi_dmul>
 8008002:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8008006:	460d      	mov	r5, r1
 8008008:	4ac3      	ldr	r2, [pc, #780]	@ (8008318 <__ieee754_log+0x360>)
 800800a:	4295      	cmp	r5, r2
 800800c:	dd06      	ble.n	800801c <__ieee754_log+0x64>
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	f7f8 f93b 	bl	800028c <__adddf3>
 8008016:	e7e3      	b.n	8007fe0 <__ieee754_log+0x28>
 8008018:	2300      	movs	r3, #0
 800801a:	e7f5      	b.n	8008008 <__ieee754_log+0x50>
 800801c:	152c      	asrs	r4, r5, #20
 800801e:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8008022:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008026:	441c      	add	r4, r3
 8008028:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800802c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8008030:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008034:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8008038:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800803c:	ea42 0105 	orr.w	r1, r2, r5
 8008040:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8008044:	2200      	movs	r2, #0
 8008046:	4bb5      	ldr	r3, [pc, #724]	@ (800831c <__ieee754_log+0x364>)
 8008048:	f7f8 f91e 	bl	8000288 <__aeabi_dsub>
 800804c:	1cab      	adds	r3, r5, #2
 800804e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008052:	2b02      	cmp	r3, #2
 8008054:	4682      	mov	sl, r0
 8008056:	468b      	mov	fp, r1
 8008058:	f04f 0200 	mov.w	r2, #0
 800805c:	dc53      	bgt.n	8008106 <__ieee754_log+0x14e>
 800805e:	2300      	movs	r3, #0
 8008060:	f7f8 fd32 	bl	8000ac8 <__aeabi_dcmpeq>
 8008064:	b1d0      	cbz	r0, 800809c <__ieee754_log+0xe4>
 8008066:	2c00      	cmp	r4, #0
 8008068:	f000 8120 	beq.w	80082ac <__ieee754_log+0x2f4>
 800806c:	4620      	mov	r0, r4
 800806e:	f7f8 fa59 	bl	8000524 <__aeabi_i2d>
 8008072:	a391      	add	r3, pc, #580	@ (adr r3, 80082b8 <__ieee754_log+0x300>)
 8008074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008078:	4606      	mov	r6, r0
 800807a:	460f      	mov	r7, r1
 800807c:	f7f8 fabc 	bl	80005f8 <__aeabi_dmul>
 8008080:	a38f      	add	r3, pc, #572	@ (adr r3, 80082c0 <__ieee754_log+0x308>)
 8008082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008086:	4604      	mov	r4, r0
 8008088:	460d      	mov	r5, r1
 800808a:	4630      	mov	r0, r6
 800808c:	4639      	mov	r1, r7
 800808e:	f7f8 fab3 	bl	80005f8 <__aeabi_dmul>
 8008092:	4602      	mov	r2, r0
 8008094:	460b      	mov	r3, r1
 8008096:	4620      	mov	r0, r4
 8008098:	4629      	mov	r1, r5
 800809a:	e7ba      	b.n	8008012 <__ieee754_log+0x5a>
 800809c:	a38a      	add	r3, pc, #552	@ (adr r3, 80082c8 <__ieee754_log+0x310>)
 800809e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a2:	4650      	mov	r0, sl
 80080a4:	4659      	mov	r1, fp
 80080a6:	f7f8 faa7 	bl	80005f8 <__aeabi_dmul>
 80080aa:	4602      	mov	r2, r0
 80080ac:	460b      	mov	r3, r1
 80080ae:	2000      	movs	r0, #0
 80080b0:	499b      	ldr	r1, [pc, #620]	@ (8008320 <__ieee754_log+0x368>)
 80080b2:	f7f8 f8e9 	bl	8000288 <__aeabi_dsub>
 80080b6:	4652      	mov	r2, sl
 80080b8:	4606      	mov	r6, r0
 80080ba:	460f      	mov	r7, r1
 80080bc:	465b      	mov	r3, fp
 80080be:	4650      	mov	r0, sl
 80080c0:	4659      	mov	r1, fp
 80080c2:	f7f8 fa99 	bl	80005f8 <__aeabi_dmul>
 80080c6:	4602      	mov	r2, r0
 80080c8:	460b      	mov	r3, r1
 80080ca:	4630      	mov	r0, r6
 80080cc:	4639      	mov	r1, r7
 80080ce:	f7f8 fa93 	bl	80005f8 <__aeabi_dmul>
 80080d2:	4606      	mov	r6, r0
 80080d4:	460f      	mov	r7, r1
 80080d6:	b914      	cbnz	r4, 80080de <__ieee754_log+0x126>
 80080d8:	4632      	mov	r2, r6
 80080da:	463b      	mov	r3, r7
 80080dc:	e0a0      	b.n	8008220 <__ieee754_log+0x268>
 80080de:	4620      	mov	r0, r4
 80080e0:	f7f8 fa20 	bl	8000524 <__aeabi_i2d>
 80080e4:	a374      	add	r3, pc, #464	@ (adr r3, 80082b8 <__ieee754_log+0x300>)
 80080e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ea:	4680      	mov	r8, r0
 80080ec:	4689      	mov	r9, r1
 80080ee:	f7f8 fa83 	bl	80005f8 <__aeabi_dmul>
 80080f2:	a373      	add	r3, pc, #460	@ (adr r3, 80082c0 <__ieee754_log+0x308>)
 80080f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f8:	4604      	mov	r4, r0
 80080fa:	460d      	mov	r5, r1
 80080fc:	4640      	mov	r0, r8
 80080fe:	4649      	mov	r1, r9
 8008100:	f7f8 fa7a 	bl	80005f8 <__aeabi_dmul>
 8008104:	e0a5      	b.n	8008252 <__ieee754_log+0x29a>
 8008106:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800810a:	f7f8 f8bf 	bl	800028c <__adddf3>
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	4650      	mov	r0, sl
 8008114:	4659      	mov	r1, fp
 8008116:	f7f8 fb99 	bl	800084c <__aeabi_ddiv>
 800811a:	e9cd 0100 	strd	r0, r1, [sp]
 800811e:	4620      	mov	r0, r4
 8008120:	f7f8 fa00 	bl	8000524 <__aeabi_i2d>
 8008124:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008128:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800812c:	4610      	mov	r0, r2
 800812e:	4619      	mov	r1, r3
 8008130:	f7f8 fa62 	bl	80005f8 <__aeabi_dmul>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800813c:	f7f8 fa5c 	bl	80005f8 <__aeabi_dmul>
 8008140:	a363      	add	r3, pc, #396	@ (adr r3, 80082d0 <__ieee754_log+0x318>)
 8008142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008146:	4680      	mov	r8, r0
 8008148:	4689      	mov	r9, r1
 800814a:	f7f8 fa55 	bl	80005f8 <__aeabi_dmul>
 800814e:	a362      	add	r3, pc, #392	@ (adr r3, 80082d8 <__ieee754_log+0x320>)
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	f7f8 f89a 	bl	800028c <__adddf3>
 8008158:	4642      	mov	r2, r8
 800815a:	464b      	mov	r3, r9
 800815c:	f7f8 fa4c 	bl	80005f8 <__aeabi_dmul>
 8008160:	a35f      	add	r3, pc, #380	@ (adr r3, 80082e0 <__ieee754_log+0x328>)
 8008162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008166:	f7f8 f891 	bl	800028c <__adddf3>
 800816a:	4642      	mov	r2, r8
 800816c:	464b      	mov	r3, r9
 800816e:	f7f8 fa43 	bl	80005f8 <__aeabi_dmul>
 8008172:	a35d      	add	r3, pc, #372	@ (adr r3, 80082e8 <__ieee754_log+0x330>)
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	f7f8 f888 	bl	800028c <__adddf3>
 800817c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008180:	f7f8 fa3a 	bl	80005f8 <__aeabi_dmul>
 8008184:	a35a      	add	r3, pc, #360	@ (adr r3, 80082f0 <__ieee754_log+0x338>)
 8008186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800818e:	4640      	mov	r0, r8
 8008190:	4649      	mov	r1, r9
 8008192:	f7f8 fa31 	bl	80005f8 <__aeabi_dmul>
 8008196:	a358      	add	r3, pc, #352	@ (adr r3, 80082f8 <__ieee754_log+0x340>)
 8008198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819c:	f7f8 f876 	bl	800028c <__adddf3>
 80081a0:	4642      	mov	r2, r8
 80081a2:	464b      	mov	r3, r9
 80081a4:	f7f8 fa28 	bl	80005f8 <__aeabi_dmul>
 80081a8:	a355      	add	r3, pc, #340	@ (adr r3, 8008300 <__ieee754_log+0x348>)
 80081aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ae:	f7f8 f86d 	bl	800028c <__adddf3>
 80081b2:	4642      	mov	r2, r8
 80081b4:	464b      	mov	r3, r9
 80081b6:	f7f8 fa1f 	bl	80005f8 <__aeabi_dmul>
 80081ba:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 80081be:	4602      	mov	r2, r0
 80081c0:	460b      	mov	r3, r1
 80081c2:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 80081c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081ca:	f7f8 f85f 	bl	800028c <__adddf3>
 80081ce:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 80081d2:	3551      	adds	r5, #81	@ 0x51
 80081d4:	4335      	orrs	r5, r6
 80081d6:	2d00      	cmp	r5, #0
 80081d8:	4680      	mov	r8, r0
 80081da:	4689      	mov	r9, r1
 80081dc:	dd48      	ble.n	8008270 <__ieee754_log+0x2b8>
 80081de:	4b50      	ldr	r3, [pc, #320]	@ (8008320 <__ieee754_log+0x368>)
 80081e0:	2200      	movs	r2, #0
 80081e2:	4650      	mov	r0, sl
 80081e4:	4659      	mov	r1, fp
 80081e6:	f7f8 fa07 	bl	80005f8 <__aeabi_dmul>
 80081ea:	4652      	mov	r2, sl
 80081ec:	465b      	mov	r3, fp
 80081ee:	f7f8 fa03 	bl	80005f8 <__aeabi_dmul>
 80081f2:	4602      	mov	r2, r0
 80081f4:	460b      	mov	r3, r1
 80081f6:	4606      	mov	r6, r0
 80081f8:	460f      	mov	r7, r1
 80081fa:	4640      	mov	r0, r8
 80081fc:	4649      	mov	r1, r9
 80081fe:	f7f8 f845 	bl	800028c <__adddf3>
 8008202:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008206:	f7f8 f9f7 	bl	80005f8 <__aeabi_dmul>
 800820a:	4680      	mov	r8, r0
 800820c:	4689      	mov	r9, r1
 800820e:	b964      	cbnz	r4, 800822a <__ieee754_log+0x272>
 8008210:	4602      	mov	r2, r0
 8008212:	460b      	mov	r3, r1
 8008214:	4630      	mov	r0, r6
 8008216:	4639      	mov	r1, r7
 8008218:	f7f8 f836 	bl	8000288 <__aeabi_dsub>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	4650      	mov	r0, sl
 8008222:	4659      	mov	r1, fp
 8008224:	f7f8 f830 	bl	8000288 <__aeabi_dsub>
 8008228:	e6da      	b.n	8007fe0 <__ieee754_log+0x28>
 800822a:	a323      	add	r3, pc, #140	@ (adr r3, 80082b8 <__ieee754_log+0x300>)
 800822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008230:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008234:	f7f8 f9e0 	bl	80005f8 <__aeabi_dmul>
 8008238:	a321      	add	r3, pc, #132	@ (adr r3, 80082c0 <__ieee754_log+0x308>)
 800823a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823e:	4604      	mov	r4, r0
 8008240:	460d      	mov	r5, r1
 8008242:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008246:	f7f8 f9d7 	bl	80005f8 <__aeabi_dmul>
 800824a:	4642      	mov	r2, r8
 800824c:	464b      	mov	r3, r9
 800824e:	f7f8 f81d 	bl	800028c <__adddf3>
 8008252:	4602      	mov	r2, r0
 8008254:	460b      	mov	r3, r1
 8008256:	4630      	mov	r0, r6
 8008258:	4639      	mov	r1, r7
 800825a:	f7f8 f815 	bl	8000288 <__aeabi_dsub>
 800825e:	4652      	mov	r2, sl
 8008260:	465b      	mov	r3, fp
 8008262:	f7f8 f811 	bl	8000288 <__aeabi_dsub>
 8008266:	4602      	mov	r2, r0
 8008268:	460b      	mov	r3, r1
 800826a:	4620      	mov	r0, r4
 800826c:	4629      	mov	r1, r5
 800826e:	e7d9      	b.n	8008224 <__ieee754_log+0x26c>
 8008270:	4602      	mov	r2, r0
 8008272:	460b      	mov	r3, r1
 8008274:	4650      	mov	r0, sl
 8008276:	4659      	mov	r1, fp
 8008278:	f7f8 f806 	bl	8000288 <__aeabi_dsub>
 800827c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008280:	f7f8 f9ba 	bl	80005f8 <__aeabi_dmul>
 8008284:	4606      	mov	r6, r0
 8008286:	460f      	mov	r7, r1
 8008288:	2c00      	cmp	r4, #0
 800828a:	f43f af25 	beq.w	80080d8 <__ieee754_log+0x120>
 800828e:	a30a      	add	r3, pc, #40	@ (adr r3, 80082b8 <__ieee754_log+0x300>)
 8008290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008294:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008298:	f7f8 f9ae 	bl	80005f8 <__aeabi_dmul>
 800829c:	a308      	add	r3, pc, #32	@ (adr r3, 80082c0 <__ieee754_log+0x308>)
 800829e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a2:	4604      	mov	r4, r0
 80082a4:	460d      	mov	r5, r1
 80082a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082aa:	e729      	b.n	8008100 <__ieee754_log+0x148>
 80082ac:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8008308 <__ieee754_log+0x350>
 80082b0:	e698      	b.n	8007fe4 <__ieee754_log+0x2c>
 80082b2:	bf00      	nop
 80082b4:	f3af 8000 	nop.w
 80082b8:	fee00000 	.word	0xfee00000
 80082bc:	3fe62e42 	.word	0x3fe62e42
 80082c0:	35793c76 	.word	0x35793c76
 80082c4:	3dea39ef 	.word	0x3dea39ef
 80082c8:	55555555 	.word	0x55555555
 80082cc:	3fd55555 	.word	0x3fd55555
 80082d0:	df3e5244 	.word	0xdf3e5244
 80082d4:	3fc2f112 	.word	0x3fc2f112
 80082d8:	96cb03de 	.word	0x96cb03de
 80082dc:	3fc74664 	.word	0x3fc74664
 80082e0:	94229359 	.word	0x94229359
 80082e4:	3fd24924 	.word	0x3fd24924
 80082e8:	55555593 	.word	0x55555593
 80082ec:	3fe55555 	.word	0x3fe55555
 80082f0:	d078c69f 	.word	0xd078c69f
 80082f4:	3fc39a09 	.word	0x3fc39a09
 80082f8:	1d8e78af 	.word	0x1d8e78af
 80082fc:	3fcc71c5 	.word	0x3fcc71c5
 8008300:	9997fa04 	.word	0x9997fa04
 8008304:	3fd99999 	.word	0x3fd99999
	...
 8008310:	c3500000 	.word	0xc3500000
 8008314:	43500000 	.word	0x43500000
 8008318:	7fefffff 	.word	0x7fefffff
 800831c:	3ff00000 	.word	0x3ff00000
 8008320:	3fe00000 	.word	0x3fe00000

08008324 <_init>:
 8008324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008326:	bf00      	nop
 8008328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800832a:	bc08      	pop	{r3}
 800832c:	469e      	mov	lr, r3
 800832e:	4770      	bx	lr

08008330 <_fini>:
 8008330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008332:	bf00      	nop
 8008334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008336:	bc08      	pop	{r3}
 8008338:	469e      	mov	lr, r3
 800833a:	4770      	bx	lr
